/* tslint:disable */
/* eslint-disable */
/**
 * CODING OPEN API
 * CODING 提供了丰富的 API 接口，注册应用即可使用，无需审核，支持两种认证方式：[OAuth 2.0 协议](#oauth-认证)、[个人访问令牌](#个人令牌认证)、[项目令牌](#项目令牌认证)。  # [OAuth 认证](#oauth)  #### [生态令牌权限](#ecology-scope)  令牌权限说明 > Scope的权限分为只读（ro）和读写(rw) 俩种，用户可通过权限点+权限方式获取完整的权限 Scope 信息。例如，用户信息授权为只读时，用户的令牌权限 Scope 为 user:profile:ro  | 名称            | 描述信息                 | Scope 信息                  | 权限范围  | 示例                           | |---------------|----------------------|---------------------------|-------|------------------------------| | 用户信息          | 管理用户的基础信息。           | user:profile              | ro    | user:profile:ro              | | 用户邮箱          | 管理用户的电子邮件地址。         | user:email                | ro    | user:email:ro                | | 用户通知          | 管理用户的站内通知。           | user:notification         | ro、rw | user:notification:rw         | | 用户公钥          | 管理用户配置的个人公钥和部署公钥信息。  | user:public-key           | ro、rw | user:public-key:rw           | | 团队信息          | 管理团队基本信息。            | team:profile              | ro    | team:profile:ro              | | 团队成员          | 管理团队成员信息以及团队成员相关操作。  | team:member               | ro、rw | team:member:rw               | | 项目信息          | 管理项目基本信息。            | project:profile           | ro、rw | project:profile:rw           | | 项目成员          | 管理项目成员。              | project:member            | ro、rw | project:member:rw            | | 项目令牌          | 管理项目令牌。              | project:token             | ro、rw | project:token:rw             | | 项目公告          | 管理项目公告。              | project:notice            | ro、rw | project:notice:rw            | | 项目标签          | 管理项目标签。              | project:label             | ro、rw | project:label:rw             | | 项目集信息         | 管理项目集基本信息。           | program:profile           | ro、rw | program:profile:rw           | | 项目集项目         | 管理项目集下的项目列表。         | program:project           | ro、rw | program:project:rw           | | 项目集成员         | 管理项目集下的成员列表。         | program:member            | ro、rw | program:member:rw            | | 关联资源          | 管理团队和项目资源关联关系。       | related-resource:resource | ro、rw | related-resource:resource:rw | | 凭据信息          | 管理团队凭据。              | credential:profile        | ro、rw | credential:profile:rw        | | Service Hooks | 管理和配置 Service Hooks。 | service-hook:profile      | ro、rw | service-hook:profile:rw      | | 权限组           | 管理权限组。               | ram:policy                | ro、rw | ram:policy:rw                | | 授权            | 配置权限授权。              | ram:grant                 | ro、rw | ram:grant:rw                 | | 用户组           | 管理权限用户组。             | ram:user-group            | ro    | ram:user-group:ro            | | 研发度量数据集       | 研发度量数据集              | performance:dataset       | ro    | performance:dataset:ro       | | 项目协同          | 配置和使用项目协同功能。         | collaboration:issue       | ro、rw | collaboration:issue:rw       | | 知识管理          | 管理知识空间和撰写知识文档。       | document:knowledge        | ro、rw | document:knowledge:rw        | | 文件网盘          | 管理上传、分享和下载文件等。       | document:file             | ro、rw | document:file:rw             | | API 文档        | 发布、授权发布 API 文档。      | document:api-doc          | ro、rw | document:api-doc:rw          | | 代码仓库          | 管理仓库                 | vcs:repository            | ro、rw | vcs:repository:rw            | | 合并请求          | 管理代码仓库的合并请求。         | vcs:merge                 | ro、rw | vcs:merge:rw                 | | 部署公钥          | 管理代码仓库的部署公钥。         | vcs:ssh-key               | ro、rw | vcs:ssh-key:rw               | | 版本管理          | 管理代码仓库的版本信息。         | vcs:release               | ro、rw | vcs:release:rw               | | 外部仓库          | 管理关联的外部仓库信息。         | depot:external-repository | ro、rw | depot:external-repository:rw | | 测试管理          | 管理测试计、测试用例和测试报告等。    | testing:profile           | ro、rw | testing:profile:rw           | | 持续部署数据统计      | 持续部署发布数据统计。          | cd:statistics             | ro    | cd:statistics:ro             | | 持续部署主机组       | 管理持续部署主机组。           | cd:host-server            | ro、rw | cd:host-server:rw            | | 持续部署云账号       | 管理持续部署云账号。           | cd:cloud-account          | ro、rw | cd:cloud-account:rw          | | 持续部署应用        | 管理和配置持续部署应用。         | cd:application            | ro、rw | cd:application:rw            | | 持续部署流程        | 管理和配置持续部署流程。         | cd:pipeline               | ro、rw | cd:pipeline:rw               | | 制品库仓库         | 管理制品库仓库。             | artifact:repository       | ro、rw | artifact:repository:rw       | | 制品库版本         | 管理制品版本信息。            | artifact:version          | ro、rw | artifact:version:rw          | | 制品库配置         | 管理制品库配置。             | artifact:properties       | ro、rw | artifact:properties:rw       | | 制品库包          | 管理制品库包。              | artifact:package          | ro    | artifact:package:ro          | | 资产列表          | 管理资产列表               | assets:list               | ro、rw | assets:list:rw               | | 资产属性          | 管理资产属性               | assets:attribute          | ro、rw | assets:attribute:rw          |  #### [创建 CODING 应用](#创建-CODING-应用)  ##### 1、新建应用  点击【团队设置】->【生态能力】->【发布应用】->【新建应用】，填写信息。「回调地址」处填写回调服务地址，这里以codesign为例。  ![](https://help-assets.codehub.cn/enterprise/202309201515397.png)  ![](https://help-assets.codehub.cn/enterprise/202309201519877.png)  ##### 2、获取 Client ID 和 Client Secret  点击创建好的应用，点击客户端秘钥，即可看到客户端ID与客户端秘钥  ![](https://help-assets.codehub.cn/enterprise/202309201520614.png)  ##### 注意事项： - 更换令牌时，先新建令牌，再删除旧令牌 - 最多同时可创建 5 个令牌 - 令牌只有创建时可查看，创建后，任何人无法查看，请妥善保管。  #### 3、修改令牌权限  根据需求修改令牌权限，这里设置了用户信息只读权限与项目信息读写权限作为示例  ![](https://help-assets.codehub.cn/enterprise/202309201520611.png)  #### [用户授权](#oauth-scopes)  浏览器访问以下链接，进入到授权登录页面：  ```shell GET https://{your-team}.coding.net/oauth_authorize.html?client_id={client_id}&redirect_uri={redirect_uri}&response_type=code&state=${state}&scope={scope}  ```  参数说明：  - your-team：团队域名前缀；  - client_id：应用详情页的 Client ID；  - redirect_uri：应用详情页填写的回调地址；  - response_type：返回类型，固定为 code；  - state: 业务侧可以传任何值，这个值会原封不动传递回去，用来给业务识别一些场景用的。  - scope：授权范围，多个权限间以逗号分隔，如：user:profile:ro,project:profile:rw  ![](https://help-assets.codehub.cn/enterprise/202309201520497.png)  点击授权后，浏览器将带着授权码（code）参数和业务状态码（state）跳转到回调地址，如：  ```shell https://codesign.qq.com/?code={code}&state={state}&team={teamGk}&scope=user%3Aprofile%3Aro,project%3Aprofile%3Arw ```  #### [获取 access_token](#oauth-access-token)  获取授权码（code）后，开发者的后端程序向 CODING 发送请求，获取 access_token。  请求链接：  ```shell POST https://{your-team}.coding.net/api/oauth/access_token Content-Type: application/x-www-form-urlencoded  client_id={client_id}&client_secret={client_secret}&grant_type=authorization_code&code={code} ```  参数说明：  - your-team：团队域名前缀；  - client_id：应用详情页的 Client ID；  - client_secret：应用详情页的 Client Secret；  - code：上一步获取的授权码，须注意每个 code 仅能使用一次，且有效期仅5分钟；  - grant_type：授权类型，固定为 authorization_code；  返回值：  ```json {   \"access_token\": \"RtdlB8UgzKZ7BJdXKC5dQRiUAzwFcBFZbB2NPaNX3DUkJMhXqi5Cb_k-V7QxbwzFmo9oBkelu95xSoxualndQm9e1oc6F3H77z97aSE6neRrjf5oOu8Owzew_J1yC975\",   \"refresh_token\": \"9pqtQ6QUQlX9cdJCJ726PbeEVI7wCxNWflb16vz59QxSHQlFv0nnlxr8CpKf4gwPhaijKsDFmPWdR9ryiPMdzESKaMAqIhfCYvBjzmpsqiSHxqLpCXGV1amOtqjx9eyJ\",   \"scope\": \"user:profile:ro project:profile:rw\",   \"team\": \"jackwhu-test\",   \"token_type\": \"Bearer\",   \"expires_in\": \"7200\" } ```  返回值： - access_token： access_token值，可用于调用OpenAPI接口，建议按expires_in保存access_token - refresh_token： 刷新时使用的token，有效期90天。access_token过期后可用于刷新access_token - scope：令牌权限范围 - team： 团队gk - token_type：token类型 - expires_in：过期时间，单位秒   #### [刷新 access_token](#oauth-access-token)  通过上面获取到的 refresh_token，开发者的后端程序可以向 CODING 发送请求，刷新 access_token。   注意：调用刷新接口后，即使 access_token 未过期，原 access_token 也将失效  请求链接：  ```shell POST https://{your-team}.coding.net/api/oauth/access_token Content-Type: application/x-www-form-urlencoded  client_id={client_id}&client_secret={client_secret}&grant_type=authorization_code&refresh_token={refresh_token} ```  参数说明：  - your-team：团队域名前缀；  - client_id：应用详情页的 Client ID；  - client_secret：应用详情页的 Client Secret；  - refresh_token：获取 access_token接口返回的refresh_token字段  - grant_type：授权类型，固定为 refresh_token；  返回值：  ```json {   \"access_token\": \"q4qIkUGhJ2qfcdSV3bWx0YfQj-WjLqXG7LSdP9Oo3sOAjmuY-Bb_QJ6ORt-By-bc7WFFT7PyH7RXEvPLBM5lFU9PBOofgzXN9Lh5zp3FWRdyV_4XGno4U_S7zMkixWnv\",   \"refresh_token\": \"9pqtQ6QUQlX9cdJCJ726PbeEVI7wCxNWflb16vz59QxSHQlFv0nnlxr8CpKf4gwPhaijKsDFmPWdR9ryiPMdzESKaMAqIhfCYvBjzmpsqiSHxqLpCXGV1amOtqjx9eyJ\",   \"scope\": \"user:profile:ro project:profile:rw\",   \"team\": \"jackwhu-test\",   \"token_type\": \"Bearer\",   \"expires_in\": \"7200\" } ```  #### [获取当前用户信息](#oauth-get-user)  请求链接：  ```shell POST https://{your-team}.coding.net/open-api Authorization: Bearer RtdlB8UgzKZ7BJdXKC5dQRiUAzwFcBFZbB2NPaNX3DUkJMhXqi5Cb_k-V7QxbwzFmo9oBkelu95xSoxualndQm9e1oc6F3H77z97aSE6neRrjf5oOu8Owzew_J1yC975 Content-Type: application/json  {     \"Action\": \"DescribeCodingCurrentUser\" } ```  Headers说明：  - Authorization：\"Bearer {access_token}\"  参数说明：  - Action：固定为DescribeCodingCurrentUser，令牌须打开user:profile:ro权限  返回值：  ```json {   \"Response\": {     \"User\": {       \"Id\": 183478,       \"Status\": 1,       \"Email\": \"test@coding.com\",       \"GlobalKey\": \"anywhere\",       \"Avatar\": \"https://e.coding.net/static/fruit_avatar/Fruit-20.png\",       \"Gravatar\": \"\",       \"Name\": \"qqq\",       \"NamePinYin\": \"qqq\",       \"Phone\": \"18800000000\",       \"PhoneValidation\": 1,       \"EmailValidation\": 1,       \"PhoneRegionCode\": \"+86\",       \"Region\": \"cn\",       \"TeamId\": 1,       \"WeComId\": \"woG7VgCgAAov2F-sAQkD_YPsLNJiP1Vg\"     },     \"RequestId\": \"133e152f-8852-4d99-b704-c7ff245a1640\"   } }  ```  # [个人令牌认证](#personal_token)  #### [获取个人令牌](#personal-token-create)  - 点击左下角的【个人账户设置】>【访问令牌】>【新建访问令牌】，勾选相关权限后会生成「个人访问令牌」。若刷新页面令牌会消失，需输入账号密码后重新生成。 - 令牌权限与[OAuth令牌权限](#生态令牌权限)一样  ![](https://help-assets.codehub.cn/enterprise/202309201521630.png)  #### [获取当前用户信息](#personal-token-get-user)  请求链接：  ```shell POST https://{your-team}.coding.net/open-api Authorization: token 70823e19fb3f2aa7d1ef08727f6ab5d4dcd20af8 Content-Type: application/json  {     \"Action\": \"DescribeCodingCurrentUser\" } ```  header：  ```text Authorization: token {访问令牌}  ```  请求示例：  ```shell curl --location --request POST \'https://jackwhu-test.coding.net/open-api\' \\ --header \'Authorization: token 70823e19fb3f2aa7d1ef08727f6ab5d4dcd20af8\' \\ --header \'Content-Type: application/json\' \\ --data-raw \'{     \"Action\": \"DescribeCodingCurrentUser\" }\' ```  # [项目令牌认证](#personal_token)  #### [项目令牌Scope](#project-token-scope)  | 名称      | 描述                        | Scope 信息                  | 权限范围 | |---------|---------------------------|---------------------------|------| | 项目协同    | 读取与操作项目协同                 | project_issue_rw          | 读写   | | 文件      | 新建、查询、删除、编辑文件             | file_rw                   | 读写   | | WIKI    | 新建、查询、删除、编辑Wiki           | wiki_rw                   | 读写   | | 项目公告    | 新建、查询、删除、编辑项目公告           | project_tweet_rw          | 读写   | | API 文档  | 发布 API 文档                 | api_doc_release           | 读写   | | 关联资源    | 新建、查询、删除关联资源              | resource_reference_rw     | 读写   | | 项目成员    | 读取与操作项目成员                 | project_member_rw         | 读写   | | 项目权限    | 读取与操作项目权限                 | project_permission_rw     | 读写   | | 项目标签    | 新建、查询、删除、编辑项目标签           | project_label_rw          | 读写   | | 测试协同    | 执行 API 自动化测试              | ifbook_run_task           | 读写   | | 测试协同    | API 文档导入与导出               | ifbook_import_export      | 读写   | | 读取代码仓库  | 读取代码仓库                    | depot_read                | 只读   | | 推送至代码仓库 | 推送至代码仓库                   | depot_write               | 读写   | | MR      | 新建、查询、删除、编辑合并请求           | merge_request_rw          | 读写   | | 版本发布    | 新建、查询、删除、编辑版本发布           | release_rw                | 读写   | | 制品库     | 拉取制品库                     | artifact_r                | 只读   | | 制品库     | 拉取、推送制品库                  | artifact_rw               | 读写   | | 制品属性    | 新建、查询、删除、编辑制品属性           | artifact_version_props_rw | 读写   | | 构建节点    | 允许构建节点接入                  | ci_agent_register         | 读写   | | API触发   | 构建计划管理/触发构建               | ci_manager                | 读写   | | 构建计划    | 构建计划管理/触发构建（仅用于 Open API） | open_ci_manager           | 读写   |  #### [获取项目令牌](#project-token-create)  1. 点击【项目设置】>【开发者选项】>【项目令牌】>【新建项目令牌】，勾选相关权限后会生成「项目令牌」。点击查看密码即可获取密码信息  ![](https://help-assets.codehub.cn/enterprise/202309201843081.png)  2. Basic认证：将用户名与密码通过”用户名:密码“方式拼接后，使用Base64进行编码，获取凭证  #### [获取当前项目信息](#project-token-get-user)  请求链接：  ```shell POST https://{your-team}.coding.net/open-api Authorization: Basic cHRib2x5enBpYzB4OjNlZmYzOGY2MzU3MzhkYTNlMzAxYjcwZmI2ZGZhYzlhZjQ3MTQyZmE Content-Type: application/json  {     \"Action\": \"DescribeOneProject\",     \"ProjectId\": 11595365 } ```  header：  ```text Authorization: Basic cHRib2x5enBpYzB4OjNlZmYzOGY2MzU3MzhkYTNlMzAxYjcwZmI2ZGZhYzlhZjQ3MTQyZmE ```  请求示例：  ```shell curl --location --request POST \'https://jackwhu-test.coding.net/open-api\' \\ --header \'Authorization: Basic cHRib2x5enBpYzB4OjNlZmYzOGY2MzU3MzhkYTNlMzAxYjcwZmI2ZGZhYzlhZjQ3MTQyZmE\' \\ --header \'Content-Type: application/json\' \\ --data-raw \'{     \"Action\": \"DescribeOneProject\",     \"ProjectId\": 11595365 }\' ```  
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * AgentMachine 结构
 * @export
 * @interface AgentMachine
 */
export interface AgentMachine {
    /**
     * 堡垒机 id
     * @type {number}
     * @memberof AgentMachine
     */
    'Id'?: number;
    /**
     * 堡垒机名称
     * @type {string}
     * @memberof AgentMachine
     */
    'Name'?: string;
    /**
     * 堡垒机状态
     * @type {string}
     * @memberof AgentMachine
     */
    'Status'?: string;
}
/**
 * 堡垒机安装 Secret
 * @export
 * @interface AgentMachineSecret
 */
export interface AgentMachineSecret {
    /**
     * Secret 值
     * @type {string}
     * @memberof AgentMachineSecret
     */
    'Secret'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiFileFile
 */
export interface ApiFileFile {
    /**
     * 文件ID
     * @type {number}
     * @memberof ApiFileFile
     */
    'Id': number;
    /**
     * 文件名
     * @type {string}
     * @memberof ApiFileFile
     */
    'Name': string;
}
/**
 * 
 * @export
 * @interface ApiFileFolder
 */
export interface ApiFileFolder {
    /**
     * 文件夹ID
     * @type {number}
     * @memberof ApiFileFolder
     */
    'Id': number;
    /**
     * 文件夹名
     * @type {string}
     * @memberof ApiFileFolder
     */
    'Name': string;
}
/**
 * 
 * @export
 * @interface ApiFilePreSignUploadUrlData
 */
export interface ApiFilePreSignUploadUrlData {
    /**
     * token信息
     * @type {string}
     * @memberof ApiFilePreSignUploadUrlData
     */
    'AuthToken': string;
    /**
     * 请求头信息
     * @type {string}
     * @memberof ApiFilePreSignUploadUrlData
     */
    'Headers': string;
    /**
     * 文件存储的key信息
     * @type {string}
     * @memberof ApiFilePreSignUploadUrlData
     */
    'StorageKey': string;
    /**
     * 上传链接
     * @type {string}
     * @memberof ApiFilePreSignUploadUrlData
     */
    'UploadLink': string;
}
/**
 * 
 * @export
 * @interface ApiIssueIssueAttachmentPreSign
 */
export interface ApiIssueIssueAttachmentPreSign {
    /**
     * 认证凭据
     * @type {string}
     * @memberof ApiIssueIssueAttachmentPreSign
     */
    'AuthToken': string;
    /**
     * cos的临时token
     * @type {string}
     * @memberof ApiIssueIssueAttachmentPreSign
     */
    'CosSecurityToken': string;
    /**
     * 文件名
     * @type {string}
     * @memberof ApiIssueIssueAttachmentPreSign
     */
    'StorageKey': string;
    /**
     * 时间
     * @type {number}
     * @memberof ApiIssueIssueAttachmentPreSign
     */
    'Time': number;
    /**
     * 上传链接
     * @type {string}
     * @memberof ApiIssueIssueAttachmentPreSign
     */
    'UploadLink': string;
}
/**
 * 
 * @export
 * @interface ApiIssueLogIssueLog
 */
export interface ApiIssueLogIssueLog {
    /**
     * 动作类型, 取值包括如下：ADD、CHANGE_PARENT、CREATE、DELETE、REMOVE、UPDATE
     * @type {string}
     * @memberof ApiIssueLogIssueLog
     */
    'ActionType': string;
    /**
     * 内容，为转义后的JSON字符串
     * @type {string}
     * @memberof ApiIssueLogIssueLog
     */
    'Content': string;
    /**
     * 创建时间
     * @type {number}
     * @memberof ApiIssueLogIssueLog
     */
    'CreateAt': number;
    /**
     * 创建人
     * @type {number}
     * @memberof ApiIssueLogIssueLog
     */
    'Creator': number;
    /**
     * 事项id
     * @type {number}
     * @memberof ApiIssueLogIssueLog
     */
    'IssueId': number;
    /**
     * 操作对象，取值如下 ASSIGNEE  处理人，ATTACHMENT 附件，CHILD_ISSUE  子事项，CUSTOM_FIELD  自定义属性，DEFECT_TYPE 缺陷类型，DESCRIPTION 描述，DUE_DATE 截止日期，EPIC_ISSUE 所属史诗，ISSUE_EPIC_CHANGED ，ISSUE_PROGRAM_RELATION，ISSUE_RELATION，ITERATION 迭代，LABEL 标签，MODULE 模块，NAME 名字，PARENT_ISSUE 父事项，PRIORITY 优先级，PROGRESS 进度，RELATE_DEFECT，RELATE_REQUIREMENT，REQUIREMENT_TYPE，RESOURCE，SELF，START_DATE，STATUS 状态，STORY_POINT 故事点，THIRD_LINK 第三方链接，WATCHER 关注人，WORKING_HOURS 工时
     * @type {string}
     * @memberof ApiIssueLogIssueLog
     */
    'Target': string;
    /**
     * 操作对象名
     * @type {string}
     * @memberof ApiIssueLogIssueLog
     */
    'TargetName': string;
    /**
     * 更新时间
     * @type {number}
     * @memberof ApiIssueLogIssueLog
     */
    'UpdatedAt': number;
}
/**
 * 
 * @export
 * @interface ApiUserMemberRef
 */
export interface ApiUserMemberRef {
    /**
     * 是否管理员
     * @type {boolean}
     * @memberof ApiUserMemberRef
     */
    'Assignee'?: boolean;
    /**
     * 部门ID
     * @type {number}
     * @memberof ApiUserMemberRef
     */
    'DepartmentId'?: number;
    /**
     * 部门成员ID
     * @type {number}
     * @memberof ApiUserMemberRef
     */
    'DepartmentMemberId'?: number;
    /**
     * 部门名
     * @type {string}
     * @memberof ApiUserMemberRef
     */
    'DepartmentName'?: string;
    /**
     * 描述ID
     * @type {string}
     * @memberof ApiUserMemberRef
     */
    'DescribeId'?: string;
    /**
     * 是否是当前查询部门的直接成员
     * @type {boolean}
     * @memberof ApiUserMemberRef
     */
    'Pointer'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiUserRole
 */
export interface ApiUserRole {
    /**
     * 用户组Id
     * @type {number}
     * @memberof ApiUserRole
     */
    'RoleId'?: number;
    /**
     * 用户组类型： UserDefined 用户自定义的角色， EnterpriseOwner 企业所有者，EnterpriseAdmin 企业管理员， EnterpriseMember 企业普通成员， ProjectAdmin 项目管理员， ProjectMember 项目成员-> 新的权限系统里面叫\"开发\"，ProjectGuest 项目受限成员 -> 新的权限系统里面叫\"测试\"，ProjectManager 项目经理，ProductManager 产品经理，ProjectOperation 运维 ProgramOwner 项目集负责人，ProgramAdmin 项目集管理员，ProgramMember 项目集成员， ProgramProjectMember 项目集-项目成员
     * @type {string}
     * @memberof ApiUserRole
     */
    'RoleType'?: ApiUserRoleRoleTypeEnum;
    /**
     * 用户组类型名称
     * @type {string}
     * @memberof ApiUserRole
     */
    'RoleTypeName'?: string;
}

export const ApiUserRoleRoleTypeEnum = {
    UserDefined: 'UserDefined',
    EnterpriseOwner: 'EnterpriseOwner',
    EnterpriseAdmin: 'EnterpriseAdmin',
    EnterpriseMember: 'EnterpriseMember',
    ProjectAdmin: 'ProjectAdmin',
    ProjectMember: 'ProjectMember',
    ProjectGuest: 'ProjectGuest',
    ProjectManager: 'ProjectManager',
    ProductManager: 'ProductManager',
    ProjectOperation: 'ProjectOperation',
    ProgramOwner: 'ProgramOwner',
    ProgramAdmin: 'ProgramAdmin',
    ProgramMember: 'ProgramMember',
    ProgramProjectMember: 'ProgramProjectMember'
} as const;

export type ApiUserRoleRoleTypeEnum = typeof ApiUserRoleRoleTypeEnum[keyof typeof ApiUserRoleRoleTypeEnum];

/**
 * 
 * @export
 * @interface ApiUserUserData
 */
export interface ApiUserUserData {
    /**
     * 头像
     * @type {string}
     * @memberof ApiUserUserData
     */
    'Avatar': string;
    /**
     * 
     * @type {ApiUserUserDepartmentMember}
     * @memberof ApiUserUserData
     */
    'DepartmentMember': ApiUserUserDepartmentMember;
    /**
     * 邮件
     * @type {string}
     * @memberof ApiUserUserData
     */
    'Email': string;
    /**
     * 邮件校验
     * @type {number}
     * @memberof ApiUserUserData
     */
    'EmailValidation': number;
    /**
     * gk
     * @type {string}
     * @memberof ApiUserUserData
     */
    'GlobalKey': string;
    /**
     * 用户ID
     * @type {number}
     * @memberof ApiUserUserData
     */
    'Id': number;
    /**
     * 用户名
     * @type {string}
     * @memberof ApiUserUserData
     */
    'Name': string;
    /**
     * 用户拼音名
     * @type {string}
     * @memberof ApiUserUserData
     */
    'NamePinYin': string;
    /**
     * 手机号
     * @type {string}
     * @memberof ApiUserUserData
     */
    'Phone': string;
    /**
     * 手机校验
     * @type {number}
     * @memberof ApiUserUserData
     */
    'PhoneValidation': number;
    /**
     * 角色
     * @type {Array<ApiUserRole>}
     * @memberof ApiUserUserData
     */
    'Roles': Array<ApiUserRole>;
    /**
     * 用户状态 0不活跃，1活跃，-1被锁定，-2锁定登录，-3退出团队
     * @type {number}
     * @memberof ApiUserUserData
     */
    'Status': ApiUserUserDataStatusEnum;
    /**
     * 团队ID
     * @type {number}
     * @memberof ApiUserUserData
     */
    'TeamId': number;
    /**
     * 团队用户扩展字段、唯一。非必填
     * @type {string}
     * @memberof ApiUserUserData
     */
    'UniqueExtField': string;
}

export const ApiUserUserDataStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_MINUS_1: -1,
    NUMBER_MINUS_2: -2,
    NUMBER_MINUS_3: -3
} as const;

export type ApiUserUserDataStatusEnum = typeof ApiUserUserDataStatusEnum[keyof typeof ApiUserUserDataStatusEnum];

/**
 * 
 * @export
 * @interface ApiUserUserDepartmentMember
 */
export interface ApiUserUserDepartmentMember {
    /**
     * 部门成员refId
     * @type {number}
     * @memberof ApiUserUserDepartmentMember
     */
    'RefId': number;
    /**
     * 关联信息
     * @type {Array<ApiUserMemberRef>}
     * @memberof ApiUserUserDepartmentMember
     */
    'Refs': Array<ApiUserMemberRef>;
    /**
     * 三方头像
     * @type {string}
     * @memberof ApiUserUserDepartmentMember
     */
    'ThirdPartyAvatar': string;
    /**
     * 三方名
     * @type {string}
     * @memberof ApiUserUserDepartmentMember
     */
    'ThirdPartyName': string;
    /**
     * 三方ID，目前仅支持ldap的用户id信息
     * @type {string}
     * @memberof ApiUserUserDepartmentMember
     */
    'ThirdPartyId'?: string;
}
/**
 * 
 * @export
 * @interface ArchiveTestRun200Response
 */
export interface ArchiveTestRun200Response {
    /**
     * 
     * @type {ModifyTestRun200ResponseResponse}
     * @memberof ArchiveTestRun200Response
     */
    'Response'?: ModifyTestRun200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ArchiveTestRunRequest
 */
export interface ArchiveTestRunRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof ArchiveTestRunRequest
     */
    'ProjectName'?: string;
    /**
     * 计划 ID
     * @type {number}
     * @memberof ArchiveTestRunRequest
     */
    'RunId'?: number;
}
/**
 * 制品文件Checksum信息实体
 * @export
 * @interface ArtifactChecksum
 */
export interface ArtifactChecksum {
    /**
     * 文件Md5
     * @type {string}
     * @memberof ArtifactChecksum
     */
    'Md5'?: string | null;
    /**
     * 文件名称
     * @type {string}
     * @memberof ArtifactChecksum
     */
    'Name'?: string | null;
    /**
     * 文件Sha1
     * @type {string}
     * @memberof ArtifactChecksum
     */
    'Sha1'?: string | null;
    /**
     * 文件Sha256
     * @type {string}
     * @memberof ArtifactChecksum
     */
    'Sha256'?: string | null;
}
/**
 * 制品筛选规则实体
 * @export
 * @interface ArtifactFilterRule
 */
export interface ArtifactFilterRule {
    /**
     * 制品类型筛选（1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm）
     * @type {Array<number>}
     * @memberof ArtifactFilterRule
     */
    'ArtifactType'?: Array<number>;
    /**
     * 包筛选
     * @type {Array<ArtifactFilterRuleDetail>}
     * @memberof ArtifactFilterRule
     */
    'Package'?: Array<ArtifactFilterRuleDetail>;
    /**
     * 版本筛选
     * @type {Array<ArtifactFilterRuleDetail>}
     * @memberof ArtifactFilterRule
     */
    'PackageVersion'?: Array<ArtifactFilterRuleDetail>;
    /**
     * 项目筛选
     * @type {Array<string>}
     * @memberof ArtifactFilterRule
     */
    'ProjectName'?: Array<string>;
    /**
     * 仓库筛选
     * @type {Array<string>}
     * @memberof ArtifactFilterRule
     */
    'Repository'?: Array<string>;
}
/**
 * 制品筛选规则明细
 * @export
 * @interface ArtifactFilterRuleDetail
 */
export interface ArtifactFilterRuleDetail {
    /**
     * 名称匹配规则（支持 “EQUAL” 和 “REGEX”）
     * @type {string}
     * @memberof ArtifactFilterRuleDetail
     */
    'Algorithm': string;
    /**
     * 名称匹配值
     * @type {string}
     * @memberof ArtifactFilterRuleDetail
     */
    'Value': string;
}
/**
 * 制品包（镜像）
 * @export
 * @interface ArtifactPackageBean
 */
export interface ArtifactPackageBean {
    /**
     * 创建时间
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'CreatedAt'?: number;
    /**
     * 制品包描述
     * @type {string}
     * @memberof ArtifactPackageBean
     */
    'Description'?: string | null;
    /**
     * 制品包 ID
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'Id'?: number;
    /**
     * 最新推送版本的版本号 ID
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'LatestVersionId'?: number;
    /**
     * 最新推送版本的版本号
     * @type {string}
     * @memberof ArtifactPackageBean
     */
    'LatestVersionName'?: string;
    /**
     * 最新推送版本的版本发布状态：1-未发布;2-已发布
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'LatestVersionReleaseStatus'?: number;
    /**
     * 制品包名称
     * @type {string}
     * @memberof ArtifactPackageBean
     */
    'Name'?: string;
    /**
     * 版本发布策略：1-允许覆盖发布;2-不允许覆盖发布;3-快照策略;4-继承于仓库的策略
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'ReleaseStrategy'?: number;
    /**
     * 制品仓库 ID
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'RepoId'?: number;
    /**
     * 包下的版本数量
     * @type {number}
     * @memberof ArtifactPackageBean
     */
    'VersionCount'?: number;
}
/**
 * 制品包列表分页返回体
 * @export
 * @interface ArtifactPackagePageBean
 */
export interface ArtifactPackagePageBean {
    /**
     * 分页数据列表
     * @type {Array<ArtifactPackageBean>}
     * @memberof ArtifactPackagePageBean
     */
    'InstanceSet'?: Array<ArtifactPackageBean>;
    /**
     * 页码
     * @type {number}
     * @memberof ArtifactPackagePageBean
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量
     * @type {number}
     * @memberof ArtifactPackagePageBean
     */
    'PageSize'?: number;
    /**
     * 数据总数
     * @type {number}
     * @memberof ArtifactPackagePageBean
     */
    'TotalCount'?: number;
}
/**
 * 制品属性实体，用于查询制品属性列表
 * @export
 * @interface ArtifactProperty
 */
export interface ArtifactProperty {
    /**
     * 创建时间
     * @type {number}
     * @memberof ArtifactProperty
     */
    'CreatedAt'?: number;
    /**
     * 属性 ID
     * @type {number}
     * @memberof ArtifactProperty
     */
    'Id'?: number;
    /**
     * 是否不可变更
     * @type {boolean}
     * @memberof ArtifactProperty
     */
    'Immutable'?: boolean;
    /**
     * 属性名称（以 ‘coding.’ 作为属性名称开头的属性，将不可变更及删除，即 Immutable = false）
     * @type {string}
     * @memberof ArtifactProperty
     */
    'Name'?: string;
    /**
     * 属性值
     * @type {string}
     * @memberof ArtifactProperty
     */
    'Value'?: string;
    /**
     * 制品版本
     * @type {string}
     * @memberof ArtifactProperty
     */
    'Version'?: string;
}
/**
 * 简单制品属性实体，用于新增、修改制品属性
 * @export
 * @interface ArtifactPropertyBean
 */
export interface ArtifactPropertyBean {
    /**
     * 属性名称（以 ‘coding.’ 作为属性名称开头的属性，将不可变更及删除，即 Immutable = false）
     * @type {string}
     * @memberof ArtifactPropertyBean
     */
    'Name': string;
    /**
     * 属性值
     * @type {string}
     * @memberof ArtifactPropertyBean
     */
    'Value': string;
}
/**
 * 制品仓库实体
 * @export
 * @interface ArtifactRepositoryBean
 */
export interface ArtifactRepositoryBean {
    /**
     * 仓库访问权限：1-项目内;2-团队内;3-公开
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'AccessLevel'?: number;
    /**
     * 创建时间
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'CreatedAt'?: number;
    /**
     * 仓库描述
     * @type {string}
     * @memberof ArtifactRepositoryBean
     */
    'Description'?: string | null;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'Id'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof ArtifactRepositoryBean
     */
    'Name'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'ProjectId'?: number;
    /**
     * 版本发布策略：1-允许覆盖发布;2-不允许覆盖发布;3-快照策略
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'ReleaseStrategy'?: number;
    /**
     * 团队 ID
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'TeamId'?: number;
    /**
     * 仓库类型：1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm
     * @type {number}
     * @memberof ArtifactRepositoryBean
     */
    'Type'?: number;
}
/**
 * 制品库文件列表
 * @export
 * @interface ArtifactRepositoryFile
 */
export interface ArtifactRepositoryFile {
    /**
     * 制品类型
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'ArtifactType'?: string;
    /**
     * 符合对应制品标准协议的下载链接（有效期：300 s）
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'DownloadUrl'?: string;
    /**
     * 制品版本 Hash
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'Hash'?: string;
    /**
     * 制品仓库 Host
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'Host'?: string;
    /**
     * 制品包名称
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'PackageName'?: string;
    /**
     * 相对于仓库级别的文件路径
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'Path'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'Project'?: string;
    /**
     * 制品仓库名称
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'Repository'?: string;
    /**
     * 制品版本
     * @type {string}
     * @memberof ArtifactRepositoryFile
     */
    'VersionName'?: string;
}
/**
 * 制品仓库文件列表
 * @export
 * @interface ArtifactRepositoryFileListData
 */
export interface ArtifactRepositoryFileListData {
    /**
     * 翻页符，最后一页该字段为空
     * @type {string}
     * @memberof ArtifactRepositoryFileListData
     */
    'ContinuationToken'?: string;
    /**
     * 文件列表
     * @type {Array<ArtifactRepositoryFile>}
     * @memberof ArtifactRepositoryFileListData
     */
    'InstanceSet'?: Array<ArtifactRepositoryFile>;
}
/**
 * 制品仓库列表分页返回体
 * @export
 * @interface ArtifactRepositoryPageBean
 */
export interface ArtifactRepositoryPageBean {
    /**
     * 分页数据列表
     * @type {Array<ArtifactRepositoryBean>}
     * @memberof ArtifactRepositoryPageBean
     */
    'InstanceSet'?: Array<ArtifactRepositoryBean>;
    /**
     * 页码
     * @type {number}
     * @memberof ArtifactRepositoryPageBean
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量
     * @type {number}
     * @memberof ArtifactRepositoryPageBean
     */
    'PageSize'?: number;
    /**
     * 数据总数
     * @type {number}
     * @memberof ArtifactRepositoryPageBean
     */
    'TotalCount'?: number;
}
/**
 * 制品版本实体
 * @export
 * @interface ArtifactVersionBean
 */
export interface ArtifactVersionBean {
    /**
     * 创建时间
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'CreatedAt'?: number;
    /**
     * 版本描述
     * @type {string}
     * @memberof ArtifactVersionBean
     */
    'Description'?: string;
    /**
     * 下载量
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'DownloadCount'?: number;
    /**
     * 版本哈希
     * @type {string}
     * @memberof ArtifactVersionBean
     */
    'Hash'?: string;
    /**
     * 版本 ID
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'Id'?: number;
    /**
     * 制品包 ID
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'PkgId'?: number;
    /**
     * 发布状态：1-未发布;2-已发布
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'ReleaseStatus'?: number;
    /**
     * 版本大小（单位：MB）
     * @type {number}
     * @memberof ArtifactVersionBean
     */
    'Size'?: number | null;
    /**
     * 版本号
     * @type {string}
     * @memberof ArtifactVersionBean
     */
    'Version'?: string;
}
/**
 * 制品文件实体
 * @export
 * @interface ArtifactVersionFileBean
 */
export interface ArtifactVersionFileBean {
    /**
     * 文件名称
     * @type {string}
     * @memberof ArtifactVersionFileBean
     */
    'Name'?: string;
    /**
     * 文件大小，单位：MB
     * @type {number}
     * @memberof ArtifactVersionFileBean
     */
    'Size'?: number;
}
/**
 * 制品版本列表分页返回体
 * @export
 * @interface ArtifactVersionPageBean
 */
export interface ArtifactVersionPageBean {
    /**
     * 分页数据列表
     * @type {Array<ArtifactVersionBean>}
     * @memberof ArtifactVersionPageBean
     */
    'InstanceSet'?: Array<ArtifactVersionBean>;
    /**
     * 页码
     * @type {number}
     * @memberof ArtifactVersionPageBean
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量
     * @type {number}
     * @memberof ArtifactVersionPageBean
     */
    'PageSize'?: number;
    /**
     * 数据总数
     * @type {number}
     * @memberof ArtifactVersionPageBean
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiArtifactCreditsData
 */
export interface ArtifactsOpenApiArtifactCreditsData {
    /**
     * 授信清单Key
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'CreditKey': string;
    /**
     * 授信清单适用范围列表
     * @type {Array<ArtifactsOpenApiArtifactCreditsRangeData>}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Ranges': Array<ArtifactsOpenApiArtifactCreditsRangeData>;
    /**
     * 类型: NORMAL=普通类型，SYNC=来源其他系统同步
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Type': string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Enabled': boolean;
    /**
     * 授信清单ID
     * @type {number}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Id': number;
    /**
     * 授信清单适用范围列表
     * @type {Array<ArtifactsOpenApiArtifactCreditsRuleData>}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Rules': Array<ArtifactsOpenApiArtifactCreditsRuleData>;
    /**
     * 授信清单名称
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsData
     */
    'Name': string;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiArtifactCreditsRangeData
 */
export interface ArtifactsOpenApiArtifactCreditsRangeData {
    /**
     * 
     * @type {ArtifactsOpenApiProjectData}
     * @memberof ArtifactsOpenApiArtifactCreditsRangeData
     */
    'Project': ArtifactsOpenApiProjectData;
    /**
     * 
     * @type {ArtifactsOpenApiRemoteTeamData}
     * @memberof ArtifactsOpenApiArtifactCreditsRangeData
     */
    'RemoteTeam': ArtifactsOpenApiRemoteTeamData;
    /**
     * 生效范围（TEAM:团队；REMOTE-TEAM:远程团队；PROJECT:项目;REPO:仓库）
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsRangeData
     */
    'RangeType': string;
    /**
     * 
     * @type {ArtifactsOpenApiRepositoryData}
     * @memberof ArtifactsOpenApiArtifactCreditsRangeData
     */
    'Repository': ArtifactsOpenApiRepositoryData;
    /**
     * 适用范围ID
     * @type {number}
     * @memberof ArtifactsOpenApiArtifactCreditsRangeData
     */
    'RangeId': number;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiArtifactCreditsRuleData
 */
export interface ArtifactsOpenApiArtifactCreditsRuleData {
    /**
     * 制品版本
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsRuleData
     */
    'Version': string;
    /**
     * 制品的类型(1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan,10-cocoapods,11-rpm,12-Go)
     * @type {number}
     * @memberof ArtifactsOpenApiArtifactCreditsRuleData
     */
    'ArtifactType': number;
    /**
     * 制品名称计算规则：1-EQUAL(等于)，2-REGEX(正则表达式)
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsRuleData
     */
    'PkgNameAlgorithm': string;
    /**
     * 制品名称
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsRuleData
     */
    'PkgName': string;
    /**
     * 制品版本计算规则：1-EQUAL(等于)，2-REGEX(正则表达式)
     * @type {string}
     * @memberof ArtifactsOpenApiArtifactCreditsRuleData
     */
    'VersionAlgorithm': string;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiCreateArtifactCreditsRangeData
 */
export interface ArtifactsOpenApiCreateArtifactCreditsRangeData {
    /**
     * 
     * @type {ArtifactsOpenApiCreditRemoteTeam}
     * @memberof ArtifactsOpenApiCreateArtifactCreditsRangeData
     */
    'RemoteTeam'?: ArtifactsOpenApiCreditRemoteTeam;
    /**
     * 生效范围（TEAM:团队；REMOTE_TEAM:远程团队；PROJECT:项目;REPO:仓库）
     * @type {string}
     * @memberof ArtifactsOpenApiCreateArtifactCreditsRangeData
     */
    'RangeType': string;
    /**
     * 适用范围ID
     * @type {number}
     * @memberof ArtifactsOpenApiCreateArtifactCreditsRangeData
     */
    'RangeId': number;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiCreditRemoteTeam
 */
export interface ArtifactsOpenApiCreditRemoteTeam {
    /**
     * 远程团队地址
     * @type {string}
     * @memberof ArtifactsOpenApiCreditRemoteTeam
     */
    'RemoteTeamUrl': string;
    /**
     * 用户名
     * @type {string}
     * @memberof ArtifactsOpenApiCreditRemoteTeam
     */
    'UserName': string;
    /**
     * 远程仓库列表
     * @type {Array<ArtifactsOpenApiRemoteRepoData>}
     * @memberof ArtifactsOpenApiCreditRemoteTeam
     */
    'RemoteRepos': Array<ArtifactsOpenApiRemoteRepoData>;
    /**
     * 个人令牌base64编码
     * @type {string}
     * @memberof ArtifactsOpenApiCreditRemoteTeam
     */
    'Password': string;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiProjectData
 */
export interface ArtifactsOpenApiProjectData {
    /**
     * 是否生效，0-否，1-是
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Status': number;
    /**
     * 项目URL
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'HtmlUrl': string;
    /**
     * 更新时间
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Updated_at': number;
    /**
     * 团队ID
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'TeamId': number;
    /**
     * 名称
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Name': string;
    /**
     * 项目类型
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Type': number;
    /**
     * 接口URL
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'ApiUrl': string;
    /**
     * 显示名称
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'DisplayName': string;
    /**
     * 项目所属用户名
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'OwnerUserName': string;
    /**
     * ID
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Id': number;
    /**
     * 图标
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Icon': string;
    /**
     * 团队所有者 ID
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'TeamOwnerId': number;
    /**
     * 项目位置
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'ProjectPath': string;
    /**
     * 项目管理类型
     * @type {string}
     * @memberof ArtifactsOpenApiProjectData
     */
    'PmTypeName': string;
    /**
     * 创建时间
     * @type {number}
     * @memberof ArtifactsOpenApiProjectData
     */
    'Created_at': number;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiRemoteRepoData
 */
export interface ArtifactsOpenApiRemoteRepoData {
    /**
     * 项目名
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteRepoData
     */
    'Project': string;
    /**
     * 仓库名
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteRepoData
     */
    'Repository': string;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiRemoteTeamData
 */
export interface ArtifactsOpenApiRemoteTeamData {
    /**
     * 下发信息
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'SyncMessage': string;
    /**
     * 团队地址
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'RemoteTeamUrl': string;
    /**
     * 用户名
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'UserName': string;
    /**
     * 下发状态
     * @type {number}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'SyncStatus': number;
    /**
     * ID
     * @type {number}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'Id': number;
    /**
     * 远程仓库列表
     * @type {Array<ArtifactsOpenApiRemoteRepoData>}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'RemoteRepos': Array<ArtifactsOpenApiRemoteRepoData>;
    /**
     * 远程团队名
     * @type {string}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'RemoteTeamName': string;
    /**
     * 是否成功
     * @type {boolean}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'Successful': boolean;
    /**
     * 是否删除
     * @type {boolean}
     * @memberof ArtifactsOpenApiRemoteTeamData
     */
    'Deleting': boolean;
}
/**
 * 
 * @export
 * @interface ArtifactsOpenApiRepositoryData
 */
export interface ArtifactsOpenApiRepositoryData {
    /**
     * 制品类型(1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan,10-cocoapods,11-rpm,12-Go)
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'Type': number;
    /**
     * 存储规则
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'StorageRule': number;
    /**
     * 项目描述
     * @type {string}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'Description': string;
    /**
     * 创建人ID
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'CreatorId': number;
    /**
     * 项目ID
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'ProjectId': number;
    /**
     * 制品仓库ID
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'Id': number;
    /**
     * 团队ID
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'TeamId': number;
    /**
     * 版本发布策略：1-允许覆盖发布;2-不允许覆盖发布;3-快照策略
     * @type {number}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'ReleaseStrategy': number;
    /**
     * 是否删除
     * @type {boolean}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'Deleting': boolean;
    /**
     * 制品库名称
     * @type {string}
     * @memberof ArtifactsOpenApiRepositoryData
     */
    'Name': string;
}
/**
 * 
 * @export
 * @interface AttachResourceScopeToPolicyRequest
 */
export interface AttachResourceScopeToPolicyRequest {
    /**
     * 权限组 ID
     * @type {number}
     * @memberof AttachResourceScopeToPolicyRequest
     */
    'PolicyId'?: number;
    /**
     * 添加的资源
     * @type {Array<ResourceInfoOfPolicyScope>}
     * @memberof AttachResourceScopeToPolicyRequest
     */
    'ResourceInfos'?: Array<ResourceInfoOfPolicyScope>;
}
/**
 * 附件预上传信息
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 创建时间
     * @type {string}
     * @memberof Attachment
     */
    'CreatedAt'?: string | null;
    /**
     * 附件 ID
     * @type {number}
     * @memberof Attachment
     */
    'Id'?: number | null;
    /**
     * 附件文件名
     * @type {string}
     * @memberof Attachment
     */
    'Name'?: string | null;
    /**
     * 文件访问路径（有效期10分钟）
     * @type {string}
     * @memberof Attachment
     */
    'Url'?: string | null;
}
/**
 * 附件预上传信息
 * @export
 * @interface AttachmentPrepare
 */
export interface AttachmentPrepare {
    /**
     * 附件 ID
     * @type {number}
     * @memberof AttachmentPrepare
     */
    'AttachmentId'?: number | null;
    /**
     * 附件上传地址
     * @type {string}
     * @memberof AttachmentPrepare
     */
    'PrepareSignUrl'?: string | null;
}
/**
 * 附件预上传信息
 * @export
 * @interface AttachmentPrepareData
 */
export interface AttachmentPrepareData {
    /**
     * 
     * @type {AttachmentPrepare}
     * @memberof AttachmentPrepareData
     */
    'AttachmentPrepare'?: AttachmentPrepare;
}
/**
 * 
 * @export
 * @interface BindCdApplicationToProjectRequest
 */
export interface BindCdApplicationToProjectRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof BindCdApplicationToProjectRequest
     */
    'Application'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof BindCdApplicationToProjectRequest
     */
    'ProjectName'?: string;
}
/**
 * git Blob 信息
 * @export
 * @interface BlobDetail
 */
export interface BlobDetail {
    /**
     * blob 的 Sha 值
     * @type {string}
     * @memberof BlobDetail
     */
    'BlobSha'?: string | null;
    /**
     * blob 内容使用 base64编码后的内容
     * @type {string}
     * @memberof BlobDetail
     */
    'Content'?: string | null;
    /**
     * 编码方式(目前就base64一种)
     * @type {string}
     * @memberof BlobDetail
     */
    'Encoding'?: string | null;
    /**
     * blob大小(byte)
     * @type {number}
     * @memberof BlobDetail
     */
    'Size'?: number | null;
}
/**
 * 
 * @export
 * @interface BoundExternalDepotRequest
 */
export interface BoundExternalDepotRequest {
    /**
     * 当授权类型为USERNAME_PASSWORD时，填入和当前仓库用户名密码关联的凭证UUID
     * @type {string}
     * @memberof BoundExternalDepotRequest
     */
    'CredentialUUID'?: string;
    /**
     * 如果是跨项目代码仓库，则此字段必填，为源代码仓库id
     * @type {number}
     * @memberof BoundExternalDepotRequest
     */
    'DepotId'?: number;
    /**
     * 仓库类型
     * @type {string}
     * @memberof BoundExternalDepotRequest
     */
    'DepotType'?: string;
    /**
     * 外部仓库标识
     * @type {string}
     * @memberof BoundExternalDepotRequest
     */
    'ExternalDepotAddress'?: string;
    /**
     * 如果是跨项目代码仓库，则需要填入“CODING_PERSONAL_CREDENTIAL”，其他外部仓库填入“OAUTH”
     * @type {string}
     * @memberof BoundExternalDepotRequest
     */
    'GrantType'?: string;
    /**
     * 项目 Id
     * @type {number}
     * @memberof BoundExternalDepotRequest
     */
    'ProjectId'?: number;
    /**
     * 当授权类型为USERNAME_PASSWORD时，填入外部仓库http格式的仓库地址
     * @type {string}
     * @memberof BoundExternalDepotRequest
     */
    'RepoUrl'?: string;
    /**
     * 是否开启 WebHook 一般都填写 true
     * @type {boolean}
     * @memberof BoundExternalDepotRequest
     */
    'WebHook'?: boolean;
}
/**
 * 保护分支规则详情信息
 * @export
 * @interface BranchProtection
 */
export interface BranchProtection {
    /**
     * 自动添加评审着
     * @type {boolean}
     * @memberof BranchProtection
     */
    'AutoAddReviewer'?: boolean;
    /**
     * 保护分支规则id
     * @type {number}
     * @memberof BranchProtection
     */
    'BranchProtectionId'?: number;
    /**
     * 是否禁止强制推送
     * @type {boolean}
     * @memberof BranchProtection
     */
    'DenyForcePush'?: boolean;
    /**
     * 是否使用squash推送
     * @type {boolean}
     * @memberof BranchProtection
     */
    'ForceSquash'?: boolean;
    /**
     * 匹配到的分支数量
     * @type {number}
     * @memberof BranchProtection
     */
    'MatcherCount'?: number;
    /**
     * 是否需要文件 owner 授权
     * @type {boolean}
     * @memberof BranchProtection
     */
    'RequiredCodeOwnerGrant'?: boolean;
    /**
     * 已解决必需的讨论
     * @type {boolean}
     * @memberof BranchProtection
     */
    'RequiredDiscussionResolved'?: boolean;
    /**
     * 合并请求允许合并授权数量
     * @type {number}
     * @memberof BranchProtection
     */
    'RequiredGrantCount'?: number;
    /**
     * 是否开启状态检查
     * @type {boolean}
     * @memberof BranchProtection
     */
    'RequiredStatusCheck'?: boolean;
    /**
     * 保护分支规则
     * @type {string}
     * @memberof BranchProtection
     */
    'Rule'?: string;
    /**
     * 源分支必须已经合并到的某个分支,默认位空串
     * @type {string}
     * @memberof BranchProtection
     */
    'SrcMustMergedTo'?: string;
}
/**
 * 保护分支规则管理员信息
 * @export
 * @interface BranchProtectionMember
 */
export interface BranchProtectionMember {
    /**
     * 是否允许直接推送
     * @type {boolean}
     * @memberof BranchProtectionMember
     */
    'AllowPush'?: boolean;
    /**
     * 用户globalkey
     * @type {string}
     * @memberof BranchProtectionMember
     */
    'GlobalKey'?: string;
    /**
     * 名称
     * @type {string}
     * @memberof BranchProtectionMember
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface BuildDescribeCodingCIBuildArtifactsData
 */
export interface BuildDescribeCodingCIBuildArtifactsData {
    /**
     * 构建报告
     * @type {Array<BuildDescribeCodingCIBuildArtifactsResponseDataReports>}
     * @memberof BuildDescribeCodingCIBuildArtifactsData
     */
    'Reports': Array<BuildDescribeCodingCIBuildArtifactsResponseDataReports>;
}
/**
 * 
 * @export
 * @interface BuildDescribeCodingCIBuildArtifactsResponseDataReports
 */
export interface BuildDescribeCodingCIBuildArtifactsResponseDataReports {
    /**
     * 是否可下载
     * @type {boolean}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Downloadable': boolean;
    /**
     * 制品 ID
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Id': string;
    /**
     * 制品名
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Name': string;
    /**
     * 制品 path
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Path': string;
    /**
     * 制品大小
     * @type {number}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Size': number;
    /**
     * 制品 URL
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildArtifactsResponseDataReports
     */
    'Url': string;
}
/**
 * 
 * @export
 * @interface BuildDescribeCodingCIBuildHtmlReportsData
 */
export interface BuildDescribeCodingCIBuildHtmlReportsData {
    /**
     * 报告信息
     * @type {Array<BuildDescribeCodingCIBuildHtmlReportsResponseDataReports>}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsData
     */
    'Reports': Array<BuildDescribeCodingCIBuildHtmlReportsResponseDataReports>;
}
/**
 * 
 * @export
 * @interface BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
 */
export interface BuildDescribeCodingCIBuildHtmlReportsResponseDataReports {
    /**
     * 创建时间
     * @type {number}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'CreatedAt': number;
    /**
     * 描述信息
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Des': string;
    /**
     * 报告 ID
     * @type {number}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Id': number;
    /**
     * 报告名
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Name': string;
    /**
     * 报告大小
     * @type {number}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Size': number;
    /**
     * 标签
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Tag': string;
    /**
     * 报告URL
     * @type {string}
     * @memberof BuildDescribeCodingCIBuildHtmlReportsResponseDataReports
     */
    'Url': string;
}
/**
 * 构建的测试结果
 * @export
 * @interface CIBuildTestResult
 */
export interface CIBuildTestResult {
    /**
     * 时长
     * @type {number}
     * @memberof CIBuildTestResult
     */
    'Duration': number;
    /**
     * 是否空
     * @type {boolean}
     * @memberof CIBuildTestResult
     */
    'Empty': boolean;
    /**
     * 失败次数
     * @type {number}
     * @memberof CIBuildTestResult
     */
    'FailCount': number;
    /**
     * 通过次数
     * @type {number}
     * @memberof CIBuildTestResult
     */
    'PassCount': number;
    /**
     * 跳过次数
     * @type {number}
     * @memberof CIBuildTestResult
     */
    'SkipCount': number;
    /**
     * 总次数
     * @type {number}
     * @memberof CIBuildTestResult
     */
    'TotalCount': number;
}
/**
 * CI 任务缓存目录配置
 * @export
 * @interface CIJobCachePath
 */
export interface CIJobCachePath {
    /**
     * 绝对路径
     * @type {string}
     * @memberof CIJobCachePath
     */
    'AbsolutePath': string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CIJobCachePath
     */
    'Enabled': boolean;
}
/**
 * 环境变量配置
 * @export
 * @interface CIJobEnv
 */
export interface CIJobEnv {
    /**
     * 环境变量名称
     * @type {string}
     * @memberof CIJobEnv
     */
    'Name': string;
    /**
     * 是否保密
     * @type {boolean}
     * @memberof CIJobEnv
     */
    'Sensitive': boolean;
    /**
     * 环境变量值
     * @type {string}
     * @memberof CIJobEnv
     */
    'Value': string;
}
/**
 * 针对 CRON TriggerMethod 的设置
 * @export
 * @interface CIJobSchedule
 */
export interface CIJobSchedule {
    /**
     * 要触发的分支
     * @type {string}
     * @memberof CIJobSchedule
     */
    'Branch': string;
    /**
     * 结束时间。如果是单次触发，结束时间为空
     * @type {string}
     * @memberof CIJobSchedule
     */
    'EndTime': string;
    /**
     * 间隔
     * @type {string}
     * @memberof CIJobSchedule
     */
    'Interval': string;
    /**
     * 代码无变化时是否触发
     * @type {boolean}
     * @memberof CIJobSchedule
     */
    'RefChangeTrigger': boolean;
    /**
     * 是否周期触发（周期触发/单次触发）
     * @type {boolean}
     * @memberof CIJobSchedule
     */
    'Repeat': boolean;
    /**
     * 开始时间。如果是周期触发，精确到小时（ 8 ）如果是单次触发，精确到分钟数（ 8:20 ）
     * @type {string}
     * @memberof CIJobSchedule
     */
    'StartTime': string;
    /**
     * 星期几
     * @type {string}
     * @memberof CIJobSchedule
     */
    'Weekend': string;
}
/**
 * 
 * @export
 * @interface CancelCdPipelineRequest
 */
export interface CancelCdPipelineRequest {
    /**
     * 部署流程执行记录 ID
     * @type {string}
     * @memberof CancelCdPipelineRequest
     */
    'PipelineExecutionId'?: string;
    /**
     * 取消原因
     * @type {string}
     * @memberof CancelCdPipelineRequest
     */
    'Reason'?: string;
}
/**
 * 测试用例
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * 附件列表（非用例详情时本值为null）
     * @type {Array<Attachment>}
     * @memberof Case
     */
    'Attachments'?: Array<Attachment> | null;
    /**
     * 创建时间
     * @type {string}
     * @memberof Case
     */
    'CreatedAt'?: string | null;
    /**
     * 创建人ID
     * @type {number}
     * @memberof Case
     */
    'CreatedBy'?: number | null;
    /**
     * 自定义步骤
     * @type {Array<CustomStep>}
     * @memberof Case
     */
    'CustomSteps'?: Array<CustomStep> | null;
    /**
     * 预期结果 （适用于文本用例）
     * @type {string}
     * @memberof Case
     */
    'Expected'?: string | null;
    /**
     * ID 主键
     * @type {number}
     * @memberof Case
     */
    'Id'?: number | null;
    /**
     * 前置步骤
     * @type {string}
     * @memberof Case
     */
    'Preconds'?: string | null;
    /**
     * 优先级
     * @type {number}
     * @memberof Case
     */
    'Priority'?: number | null;
    /**
     * 分组 ID
     * @type {number}
     * @memberof Case
     */
    'SectionId'?: number | null;
    /**
     * 排序值
     * @type {number}
     * @memberof Case
     */
    'Sort'?: number | null;
    /**
     * 文本描述（适用于文本用例）
     * @type {string}
     * @memberof Case
     */
    'Steps'?: string | null;
    /**
     * 用例类型，可选值：STEPS，TEXT
     * @type {string}
     * @memberof Case
     */
    'TemplateType'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof Case
     */
    'Title'?: string | null;
    /**
     * 更新时间
     * @type {string}
     * @memberof Case
     */
    'UpdatedAt'?: string | null;
}
/**
 * 测试用例数据
 * @export
 * @interface CaseData
 */
export interface CaseData {
    /**
     * 
     * @type {Case}
     * @memberof CaseData
     */
    'Case'?: Case;
}
/**
 * 测试用例数据
 * @export
 * @interface CaseDataSpecial
 */
export interface CaseDataSpecial {
    /**
     * 
     * @type {CaseSpecial}
     * @memberof CaseDataSpecial
     */
    'Case'?: CaseSpecial;
}
/**
 * 测试用例
 * @export
 * @interface CaseSpecial
 */
export interface CaseSpecial {
    /**
     * 创建时间
     * @type {string}
     * @memberof CaseSpecial
     */
    'CreatedAt'?: string | null;
    /**
     * 创建人ID
     * @type {string}
     * @memberof CaseSpecial
     */
    'CreatedBy'?: string | null;
    /**
     * 自定义步骤
     * @type {Array<CustomStep>}
     * @memberof CaseSpecial
     */
    'CustomSteps'?: Array<CustomStep> | null;
    /**
     * 预期结果 （适用于文本用例）
     * @type {string}
     * @memberof CaseSpecial
     */
    'Expected'?: string | null;
    /**
     * ID 主键
     * @type {number}
     * @memberof CaseSpecial
     */
    'Id'?: number | null;
    /**
     * 前置步骤
     * @type {string}
     * @memberof CaseSpecial
     */
    'Preconds'?: string | null;
    /**
     * 优先级
     * @type {number}
     * @memberof CaseSpecial
     */
    'Priority'?: number | null;
    /**
     * 分组 ID
     * @type {number}
     * @memberof CaseSpecial
     */
    'SectionId'?: number | null;
    /**
     * 排序值
     * @type {number}
     * @memberof CaseSpecial
     */
    'Sort'?: number | null;
    /**
     * 文本描述（适用于文本用例）
     * @type {string}
     * @memberof CaseSpecial
     */
    'Steps'?: string | null;
    /**
     * 用例类型，可选值：STEPS，TEXT
     * @type {string}
     * @memberof CaseSpecial
     */
    'TemplateType'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof CaseSpecial
     */
    'Title'?: string | null;
    /**
     * 更新时间
     * @type {string}
     * @memberof CaseSpecial
     */
    'UpdatedAt'?: string | null;
}
/**
 * 测试用例列表
 * @export
 * @interface CasesData
 */
export interface CasesData {
    /**
     * 用例列表
     * @type {Array<Case>}
     * @memberof CasesData
     */
    'Cases'?: Array<Case> | null;
}
/**
 * 测试用例列表
 * @export
 * @interface CasesDataSchema
 */
export interface CasesDataSchema {
    /**
     * 用例列表
     * @type {Array<Case>}
     * @memberof CasesDataSchema
     */
    'Cases'?: Array<Case> | null;
    /**
     * 页码
     * @type {number}
     * @memberof CasesDataSchema
     */
    'Page'?: number;
    /**
     * 分页的大小
     * @type {number}
     * @memberof CasesDataSchema
     */
    'PageSize'?: number;
    /**
     * 所有行数
     * @type {number}
     * @memberof CasesDataSchema
     */
    'Total'?: number;
    /**
     * 全部页
     * @type {number}
     * @memberof CasesDataSchema
     */
    'TotalPage'?: number;
}
/**
 * CdApplication 结构
 * @export
 * @interface CdApplication
 */
export interface CdApplication {
    /**
     * 应用名称
     * @type {string}
     * @memberof CdApplication
     */
    'Name'?: string;
}
/**
 * CdDeployCount 结构
 * @export
 * @interface CdDeployCount
 */
export interface CdDeployCount {
    /**
     * 成功发布次数
     * @type {number}
     * @memberof CdDeployCount
     */
    'SucceedCount'?: number;
    /**
     * 发布总次数
     * @type {number}
     * @memberof CdDeployCount
     */
    'TotalCount'?: number;
}
/**
 * CdDeployCountDetail 结构
 * @export
 * @interface CdDeployCountDetail
 */
export interface CdDeployCountDetail {
    /**
     * 应用名称
     * @type {string}
     * @memberof CdDeployCountDetail
     */
    'Application'?: string;
    /**
     * 
     * @type {CdDeployCount}
     * @memberof CdDeployCountDetail
     */
    'CdDeployCount'?: CdDeployCount;
}
/**
 * 主机组部署详情
 * @export
 * @interface CdDeployOpenApiHostServerInstance
 */
export interface CdDeployOpenApiHostServerInstance {
    /**
     * 部署状态 succeed:成功 failed:失败 running:运行中
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Status': CdDeployOpenApiHostServerInstanceStatusEnum;
    /**
     * 主机IP
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'HumanReadableName': string;
    /**
     * 部署账号
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Account': string;
    /**
     * 部署时间
     * @type {number}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'DeployedTime': number;
    /**
     * 主机组名称
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Zone': string;
    /**
     * 云主机类型 主机组部署默认为 hostserver
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'CloudProvider': string;
    /**
     * 主机IP
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Ip': string;
    /**
     * 主机组名称
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Region': string;
    /**
     * 云主机类型 主机组部署默认为 hostserver
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'ProviderType': string;
    /**
     * 该主机部署主键
     * @type {string}
     * @memberof CdDeployOpenApiHostServerInstance
     */
    'Name': string;
}

export const CdDeployOpenApiHostServerInstanceStatusEnum = {
    Succeed: 'succeed',
    Failed: 'failed',
    Running: 'running'
} as const;

export type CdDeployOpenApiHostServerInstanceStatusEnum = typeof CdDeployOpenApiHostServerInstanceStatusEnum[keyof typeof CdDeployOpenApiHostServerInstanceStatusEnum];

/**
 * CdDeployTime 结构
 * @export
 * @interface CdDeployTime
 */
export interface CdDeployTime {
    /**
     * 发布时长（单位秒）
     * @type {number}
     * @memberof CdDeployTime
     */
    'DeployTime'?: number;
    /**
     * 发布总次数
     * @type {number}
     * @memberof CdDeployTime
     */
    'TotalCount'?: number;
}
/**
 * CdDeployTimeDetail 结构
 * @export
 * @interface CdDeployTimeDetail
 */
export interface CdDeployTimeDetail {
    /**
     * 应用名称
     * @type {string}
     * @memberof CdDeployTimeDetail
     */
    'Application'?: string;
    /**
     * 
     * @type {CdDeployTime}
     * @memberof CdDeployTimeDetail
     */
    'CdDeployTime'?: CdDeployTime;
}
/**
 * CdDeployTrend 结构
 * @export
 * @interface CdDeployTrend
 */
export interface CdDeployTrend {
    /**
     * 发布日期
     * @type {string}
     * @memberof CdDeployTrend
     */
    'Date'?: string;
    /**
     * 成功发布次数
     * @type {number}
     * @memberof CdDeployTrend
     */
    'SucceedCount'?: number;
    /**
     * 发布总次数
     * @type {number}
     * @memberof CdDeployTrend
     */
    'TotalCount'?: number;
}
/**
 * CdDeployTrendDetail 结构
 * @export
 * @interface CdDeployTrendDetail
 */
export interface CdDeployTrendDetail {
    /**
     * 应用名称
     * @type {string}
     * @memberof CdDeployTrendDetail
     */
    'Application'?: string;
    /**
     * 应用发布趋势统计
     * @type {Array<CdDeployTrend>}
     * @memberof CdDeployTrendDetail
     */
    'CdDeployTrend'?: Array<CdDeployTrend>;
    /**
     * 成功发布次数
     * @type {number}
     * @memberof CdDeployTrendDetail
     */
    'SuccessCount'?: number;
    /**
     * 发布总次数
     * @type {number}
     * @memberof CdDeployTrendDetail
     */
    'TotalCount'?: number;
}
/**
 * CdDeployTrendTotal 结构
 * @export
 * @interface CdDeployTrendTotal
 */
export interface CdDeployTrendTotal {
    /**
     * 应用发布趋势统计
     * @type {Array<CdDeployTrend>}
     * @memberof CdDeployTrendTotal
     */
    'CdDeployTrend'?: Array<CdDeployTrend>;
    /**
     * 成功发布次数
     * @type {number}
     * @memberof CdDeployTrendTotal
     */
    'SuccessCount'?: number;
    /**
     * 发布总次数
     * @type {number}
     * @memberof CdDeployTrendTotal
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ClearCodingCIJobCacheRequest
 */
export interface ClearCodingCIJobCacheRequest {
    /**
     * 构建计划ID
     * @type {number}
     * @memberof ClearCodingCIJobCacheRequest
     */
    'Id'?: number;
}
/**
 * CloudAccount 结构
 * @export
 * @interface CloudAccount
 */
export interface CloudAccount {
    /**
     * 云账号类型
     * @type {string}
     * @memberof CloudAccount
     */
    'CloudProvider'?: string;
    /**
     * 
     * @type {CloudAccountCredential}
     * @memberof CloudAccount
     */
    'Credential'?: CloudAccountCredential;
    /**
     * 云账号状态错误信息
     * @type {string}
     * @memberof CloudAccount
     */
    'ErrorMessage'?: string | null;
    /**
     * 云账号 ID
     * @type {number}
     * @memberof CloudAccount
     */
    'Id'?: number;
    /**
     * 云账号名称
     * @type {string}
     * @memberof CloudAccount
     */
    'Name'?: string;
    /**
     * 云账号状态
     * @type {string}
     * @memberof CloudAccount
     */
    'Status'?: string;
}
/**
 * CloudAccountCredential 结构
 * @export
 * @interface CloudAccountCredential
 */
export interface CloudAccountCredential {
    /**
     * 
     * @type {KubeConfigForm}
     * @memberof CloudAccountCredential
     */
    'KubeConfig'?: KubeConfigForm;
    /**
     * KUBERNETES 类型云账号认证方式（可选值：KUBE_CONFIG、SERVICE_ACCOUNT、TKE），TENCENT 类型云账号可不填
     * @type {string}
     * @memberof CloudAccountCredential
     */
    'KubernetesType'?: string | null;
    /**
     * 
     * @type {ServiceAccountForm}
     * @memberof CloudAccountCredential
     */
    'ServiceAccount'?: ServiceAccountForm;
    /**
     * 
     * @type {TKEConfigForm}
     * @memberof CloudAccountCredential
     */
    'TKEConfig'?: TKEConfigForm;
    /**
     * 
     * @type {TencentCloudAccountForm}
     * @memberof CloudAccountCredential
     */
    'TencentCloudAccount'?: TencentCloudAccountForm;
}
/**
 * CodingCiBuild 结构
 * @export
 * @interface CodingCIBuild
 */
export interface CodingCIBuild {
    /**
     * 分支
     * @type {string}
     * @memberof CodingCIBuild
     */
    'Branch': string;
    /**
     * 触发原因
     * @type {string}
     * @memberof CodingCIBuild
     */
    'Cause': string;
    /**
     * 构建唯一标识
     * @type {string}
     * @memberof CodingCIBuild
     */
    'CodingCIId': string;
    /**
     * Git Commit ID
     * @type {string}
     * @memberof CodingCIBuild
     */
    'CommitId': string;
    /**
     * 构建创建时间
     * @type {number}
     * @memberof CodingCIBuild
     */
    'CreatedAt': number;
    /**
     * 构建执行时间 QUEUED  等待构建 INITIALIZING  初始化 NOT_BUILT  准备构建 RUNNING  运行中 SUCCEED  成功 FAILED  失败 ABORTED  被取消 TIMEOUT  超时
     * @type {number}
     * @memberof CodingCIBuild
     */
    'Duration': number;
    /**
     * 构建使用的环境变量
     * @type {Array<CIJobEnv>}
     * @memberof CodingCIBuild
     */
    'EnvList'?: Array<CIJobEnv> | null;
    /**
     * 失败原因
     * @type {string}
     * @memberof CodingCIBuild
     */
    'FailedMessage': string;
    /**
     * 构建 ID
     * @type {number}
     * @memberof CodingCIBuild
     */
    'Id': number;
    /**
     * 本次构建的 Jenkinsfile
     * @type {string}
     * @memberof CodingCIBuild
     */
    'JenkinsFileContent': string;
    /**
     * 构建计划 ID
     * @type {number}
     * @memberof CodingCIBuild
     */
    'JobId': number;
    /**
     * 获取到执行机的时间，如果为负数表示还未获取到构建节点
     * @type {number}
     * @memberof CodingCIBuild
     */
    'NodeObtainedAt'?: number | null;
    /**
     * 构建序号
     * @type {number}
     * @memberof CodingCIBuild
     */
    'Number': number;
    /**
     * 开始构建时间，如果为负数就是默认值表示还未开始
     * @type {number}
     * @memberof CodingCIBuild
     */
    'StartedAt'?: number | null;
    /**
     * 构建当前状态
     * @type {string}
     * @memberof CodingCIBuild
     */
    'Status': string;
    /**
     * 构建进行到了哪个 stage/node
     * @type {string}
     * @memberof CodingCIBuild
     */
    'StatusNode': string;
    /**
     * 
     * @type {CIBuildTestResult}
     * @memberof CodingCIBuild
     */
    'TestResult': CIBuildTestResult;
}
/**
 * Stage 返回结构
 * @export
 * @interface CodingCIBuildStageData
 */
export interface CodingCIBuildStageData {
    /**
     * Stage 返回字符串
     * @type {string}
     * @memberof CodingCIBuildStageData
     */
    'StageJsonString': string;
}
/**
 * 获取构建任务指定阶段的步骤
 * @export
 * @interface CodingCIBuildStepData
 */
export interface CodingCIBuildStepData {
    /**
     * 步骤
     * @type {string}
     * @memberof CodingCIBuildStepData
     */
    'StepJsonString': string;
}
/**
 * 仓库提交信息
 * @export
 * @interface CodingCIDepotDetail
 */
export interface CodingCIDepotDetail {
    /**
     * Commit 内容
     * @type {string}
     * @memberof CodingCIDepotDetail
     */
    'Name'?: string;
    /**
     * CommitId
     * @type {string}
     * @memberof CodingCIDepotDetail
     */
    'Sha'?: string;
}
/**
 * 构建计划信息
 * @export
 * @interface CodingCIJob
 */
export interface CodingCIJob {
    /**
     * 不管构建成功还是失败总是通知的用户
     * @type {Array<number>}
     * @memberof CodingCIJob
     */
    'AlwaysUserIdList': Array<number>;
    /**
     * 自动取消相同 MR
     * @type {boolean}
     * @memberof CodingCIJob
     */
    'AutoCancelSameMergeRequest': boolean;
    /**
     * 自动取消相同版本
     * @type {boolean}
     * @memberof CodingCIJob
     */
    'AutoCancelSameRevision': boolean;
    /**
     * 分支匹配正则
     * @type {string}
     * @memberof CodingCIJob
     */
    'BranchRegex': string;
    /**
     * 触发构建的分支
     * @type {string}
     * @memberof CodingCIJob
     */
    'BranchSelector': string;
    /**
     * 仅构建失败时要通知的用户
     * @type {Array<number>}
     * @memberof CodingCIJob
     */
    'BuildFailUserIdList': Array<number>;
    /**
     * 任务缓存目录配置
     * @type {Array<CIJobCachePath>}
     * @memberof CodingCIJob
     */
    'CachePathList': Array<CIJobCachePath>;
    /**
     * 构建缓存大小
     * @type {number}
     * @memberof CodingCIJob
     */
    'CacheSize'?: number;
    /**
     * 创建时间
     * @type {number}
     * @memberof CodingCIJob
     */
    'CreatedAt': number;
    /**
     * 创建者
     * @type {number}
     * @memberof CodingCIJob
     */
    'CreatorId': number;
    /**
     * 仓库库的 Https 地址
     * @type {string}
     * @memberof CodingCIJob
     */
    'DepotHttpsUrl'?: string;
    /**
     * 仓库ID
     * @type {number}
     * @memberof CodingCIJob
     */
    'DepotId': number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof CodingCIJob
     */
    'DepotName'?: string;
    /**
     * 仓库库的 SSH 地址
     * @type {string}
     * @memberof CodingCIJob
     */
    'DepotSshUrl'?: string;
    /**
     * 仓库类型
     * @type {string}
     * @memberof CodingCIJob
     */
    'DepotType': string;
    /**
     * 仓库库的 Web 页面
     * @type {string}
     * @memberof CodingCIJob
     */
    'DepotWebUrl'?: string;
    /**
     * 环境变量配置
     * @type {Array<CIJobEnv>}
     * @memberof CodingCIJob
     */
    'EnvList': Array<CIJobEnv>;
    /**
     * 执行方式
     * @type {string}
     * @memberof CodingCIJob
     */
    'ExecuteIn': string;
    /**
     * 自定义构建节点池 ID
     * @type {number}
     * @memberof CodingCIJob
     */
    'ExecutedAgentPoolId'?: number;
    /**
     * 代码更新触发匹配规则
     * @type {string}
     * @memberof CodingCIJob
     */
    'HookType': string;
    /**
     * 构建计划ID
     * @type {number}
     * @memberof CodingCIJob
     */
    'Id'?: number;
    /**
     * Jenkinsfile 来源
     * @type {string}
     * @memberof CodingCIJob
     */
    'JenkinsFileFromType': string;
    /**
     * Jenkinsfile 在仓库中的文件路径
     * @type {string}
     * @memberof CodingCIJob
     */
    'JenkinsFilePath': string;
    /**
     * Jenkinsfile 文件内容
     * @type {string}
     * @memberof CodingCIJob
     */
    'JenkinsFileStaticContent': string;
    /**
     * 构建计划创建来源
     * @type {string}
     * @memberof CodingCIJob
     */
    'JobFromType': string;
    /**
     * 构建计划名称
     * @type {string}
     * @memberof CodingCIJob
     */
    'Name': string;
    /**
     * 项目ID
     * @type {number}
     * @memberof CodingCIJob
     */
    'ProjectId': number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CodingCIJob
     */
    'ProjectName'?: string;
    /**
     * 针对 CRON triggerMethod 的 schedule 规则配置
     * @type {Array<CIJobSchedule>}
     * @memberof CodingCIJob
     */
    'ScheduleList': Array<CIJobSchedule>;
    /**
     * 构建计划触发方式
     * @type {Array<string>}
     * @memberof CodingCIJob
     */
    'TriggerMethodList': Array<string>;
    /**
     * 构建结果通知触发者机制
     * @type {string}
     * @memberof CodingCIJob
     */
    'TriggerRemind': string;
    /**
     * 最后更新时间
     * @type {number}
     * @memberof CodingCIJob
     */
    'UpdatedAt': number;
}
/**
 * CI 任务缓存目录配置
 * @export
 * @interface CodingCIJobCachePath
 */
export interface CodingCIJobCachePath {
    /**
     * 绝对路径
     * @type {string}
     * @memberof CodingCIJobCachePath
     */
    'AbsolutePath': string;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CodingCIJobCachePath
     */
    'Enabled': boolean;
}
/**
 * 环境变量配置
 * @export
 * @interface CodingCIJobEnv
 */
export interface CodingCIJobEnv {
    /**
     * 环境变量名称
     * @type {string}
     * @memberof CodingCIJobEnv
     */
    'Name': string;
    /**
     * 是否保密
     * @type {boolean}
     * @memberof CodingCIJobEnv
     */
    'Sensitive': boolean;
    /**
     * 环境变量值
     * @type {string}
     * @memberof CodingCIJobEnv
     */
    'Value': string;
}
/**
 * 针对 CRON TriggerMethod 的设置
 * @export
 * @interface CodingCIJobSchedule
 */
export interface CodingCIJobSchedule {
    /**
     * 目标触发的分支
     * @type {string}
     * @memberof CodingCIJobSchedule
     */
    'Branch': string;
    /**
     * 结束时间。如果是单次触发，结束时间为空
     * @type {string}
     * @memberof CodingCIJobSchedule
     */
    'EndTime': string;
    /**
     * 间隔
     * @type {string}
     * @memberof CodingCIJobSchedule
     */
    'Interval': string;
    /**
     * 代码无变化时是否触发
     * @type {boolean}
     * @memberof CodingCIJobSchedule
     */
    'RefChangeTrigger': boolean;
    /**
     * 是否周期触发（周期触发/单次触发）
     * @type {boolean}
     * @memberof CodingCIJobSchedule
     */
    'Repeat': boolean;
    /**
     * 开始时间。如果是周期触发，精确到小时（ 8 ）如果是单次触发，精确到分钟数（ 8:20 ）
     * @type {string}
     * @memberof CodingCIJobSchedule
     */
    'StartTime': string;
    /**
     * 星期几
     * @type {string}
     * @memberof CodingCIJobSchedule
     */
    'Weekend': string;
}
/**
 * 个人外部仓库返回结构
 * @export
 * @interface CodingCIPersonalExternalDepot
 */
export interface CodingCIPersonalExternalDepot {
    /**
     * 外部仓库是否被关联
     * @type {boolean}
     * @memberof CodingCIPersonalExternalDepot
     */
    'Authorized'?: boolean | null;
    /**
     * 仓库 Https 地址
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'DepotHttpsUrl'?: string | null;
    /**
     * 仓库 Ssh 地址
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'DepotSshUrl'?: string | null;
    /**
     * 仓库类型
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'DepotType'?: string;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof CodingCIPersonalExternalDepot
     */
    'Id'?: number;
    /**
     * 是否是默认显示第一位的仓库
     * @type {boolean}
     * @memberof CodingCIPersonalExternalDepot
     */
    'IsDefault'?: boolean;
    /**
     * 仓库名称
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'Name'?: string;
    /**
     * 请使用 Authorized 代替判断仓库是否关联，该仓库是否 CI 可用，如果可用返回值为 continue_integration，如果仓库类型是 CODING 那么这个值永远是continue_integration
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'OpenModule'?: string;
    /**
     * 所有者用户名
     * @type {string}
     * @memberof CodingCIPersonalExternalDepot
     */
    'OwnerName'?: string | null;
    /**
     * 源代码仓库 id （如果是 coding 跨项目代码仓库，此字段记录代码仓库的实际 id ）
     * @type {number}
     * @memberof CodingCIPersonalExternalDepot
     */
    'SourceDepotId'?: number;
}
/**
 * 获取个人仓库返回结构
 * @export
 * @interface CodingCIPersonalExternalDepotData
 */
export interface CodingCIPersonalExternalDepotData {
    /**
     * 仓库列表
     * @type {Array<CodingCIPersonalExternalDepot>}
     * @memberof CodingCIPersonalExternalDepotData
     */
    'DepotList'?: Array<CodingCIPersonalExternalDepot>;
    /**
     * 仓库类型是否被授权，如 Github 是否被授权
     * @type {boolean}
     * @memberof CodingCIPersonalExternalDepotData
     */
    'IsBound'?: boolean;
    /**
     * 所有者用户名
     * @type {string}
     * @memberof CodingCIPersonalExternalDepotData
     */
    'OwnerName'?: string | null;
}
/**
 * Depot 数据结构
 * @export
 * @interface CodingCIProjectDepot
 */
export interface CodingCIProjectDepot {
    /**
     * 外部仓库是否被关联
     * @type {boolean}
     * @memberof CodingCIProjectDepot
     */
    'Authorized'?: boolean | null;
    /**
     * 仓库 Https 地址
     * @type {string}
     * @memberof CodingCIProjectDepot
     */
    'DepotHttpsUrl'?: string | null;
    /**
     * 仓库 Ssh 地址
     * @type {string}
     * @memberof CodingCIProjectDepot
     */
    'DepotSshUrl'?: string | null;
    /**
     * 仓库类型
     * @type {string}
     * @memberof CodingCIProjectDepot
     */
    'DepotType'?: string;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof CodingCIProjectDepot
     */
    'Id'?: number;
    /**
     * 是否是默认显示第一位的仓库
     * @type {boolean}
     * @memberof CodingCIProjectDepot
     */
    'IsDefault'?: boolean;
    /**
     * 仓库名称
     * @type {string}
     * @memberof CodingCIProjectDepot
     */
    'Name'?: string;
    /**
     * 无用字段
     * @type {string}
     * @memberof CodingCIProjectDepot
     */
    'OpenModule'?: string;
}
/**
 * 用户信息
 * @export
 * @interface CodingUser
 */
export interface CodingUser {
    /**
     * 用户头像地址
     * @type {string}
     * @memberof CodingUser
     */
    'Avatar'?: string | null;
    /**
     * 用户电子邮箱地址
     * @type {string}
     * @memberof CodingUser
     */
    'Email'?: string;
    /**
     * 用户全局Key
     * @type {string}
     * @memberof CodingUser
     */
    'GlobalKey'?: string | null;
    /**
     * 用户 ID
     * @type {number}
     * @memberof CodingUser
     */
    'Id'?: number;
    /**
     * 用户名字
     * @type {string}
     * @memberof CodingUser
     */
    'Name'?: string | null;
    /**
     * 用户状态
     * @type {string}
     * @memberof CodingUser
     */
    'Status'?: string | null;
    /**
     * 团队 ID
     * @type {number}
     * @memberof CodingUser
     */
    'TeamId'?: number | null;
}
/**
 * 代码仓库的提交信息
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     * 
     * @type {Committer}
     * @memberof Commit
     */
    'Author'?: Committer;
    /**
     * 作者邮箱
     * @type {string}
     * @memberof Commit
     */
    'AuthorEmail'?: string;
    /**
     * 作者姓名
     * @type {string}
     * @memberof Commit
     */
    'AuthorName'?: string;
    /**
     * 提交时间的时间戳
     * @type {number}
     * @memberof Commit
     */
    'CommitDate'?: number;
    /**
     * 
     * @type {Committer}
     * @memberof Commit
     */
    'Committer'?: Committer;
    /**
     * 提交时间的时间戳
     * @type {number}
     * @memberof Commit
     */
    'CreatedAt'?: number;
    /**
     * 提交附带的全部信息
     * @type {string}
     * @memberof Commit
     */
    'FullMessage'?: string;
    /**
     * 父提交
     * @type {Array<string>}
     * @memberof Commit
     */
    'Parents'?: Array<string> | null;
    /**
     * 提交的sha值(commitId)
     * @type {string}
     * @memberof Commit
     */
    'Sha'?: string;
    /**
     * 提交附带的message
     * @type {string}
     * @memberof Commit
     */
    'ShortMessage'?: string;
}
/**
 * 提交评论的信息
 * @export
 * @interface CommitComment
 */
export interface CommitComment {
    /**
     * 
     * @type {CodingUser}
     * @memberof CommitComment
     */
    'Author'?: CodingUser;
    /**
     * 提交 ID
     * @type {string}
     * @memberof CommitComment
     */
    'CommitSha'?: string;
    /**
     * 评论内容
     * @type {string}
     * @memberof CommitComment
     */
    'Content'?: string;
    /**
     * 创建时间
     * @type {number}
     * @memberof CommitComment
     */
    'CreatedAt'?: number;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof CommitComment
     */
    'DepotId'?: number;
    /**
     * 提交评论 ID
     * @type {number}
     * @memberof CommitComment
     */
    'Id'?: number;
    /**
     * git diff 信息的第几行
     * @type {number}
     * @memberof CommitComment
     */
    'Index'?: number;
    /**
     * 评论的文件路径
     * @type {string}
     * @memberof CommitComment
     */
    'Path'?: string;
}
/**
 * 代码仓库的提交信息
 * @export
 * @interface CommitData
 */
export interface CommitData {
    /**
     * 提交信息
     * @type {Array<Commit>}
     * @memberof CommitData
     */
    'Commits'?: Array<Commit> | null;
    /**
     * 
     * @type {PageInfo}
     * @memberof CommitData
     */
    'Page'?: PageInfo;
}
/**
 * git 提交 文件信息
 * @export
 * @interface CommitFile
 */
export interface CommitFile {
    /**
     * 文件内容
     * @type {string}
     * @memberof CommitFile
     */
    'Content'?: string;
    /**
     * ENCODING_RAW：不对文件编码；ENCODING_BASE64：传入的文件内容使用 base64 编码
     * @type {string}
     * @memberof CommitFile
     */
    'ContentEncoding': string;
    /**
     * 新建文件、重命名的文件路径(仓库中没有的文件路径名称)，可以用于创建一个新路径新文件(传入NewPath)，或者给一个文件路径修改名称(需要传入Path、NewPath，WantRename传true)
     * @type {string}
     * @memberof CommitFile
     */
    'NewPath'?: string;
    /**
     * 文件路径(仓库中存在的路径名称)，对该路径下的文件内容进行修改(传入Path)
     * @type {string}
     * @memberof CommitFile
     */
    'Path': string;
    /**
     * 是否删除
     * @type {boolean}
     * @memberof CommitFile
     */
    'WantDelete': boolean;
    /**
     * 是否重命名
     * @type {boolean}
     * @memberof CommitFile
     */
    'WantRename': boolean;
}
/**
 * 仓库文件每一行提交详细信息
 * @export
 * @interface CommitInfo
 */
export interface CommitInfo {
    /**
     * 提交日期
     * @type {number}
     * @memberof CommitInfo
     */
    'CommitDate'?: number | null;
    /**
     * 提交信息
     * @type {string}
     * @memberof CommitInfo
     */
    'CommitSha'?: string | null;
    /**
     * 
     * @type {CodingUser}
     * @memberof CommitInfo
     */
    'Committer'?: CodingUser;
    /**
     * 行数
     * @type {number}
     * @memberof CommitInfo
     */
    'LineNumber'?: number | null;
}
/**
 * 用于描述请求的Note值
 * @export
 * @interface CommitNote
 */
export interface CommitNote {
    /**
     * 请求的sha值
     * @type {string}
     * @memberof CommitNote
     */
    'CommitSha'?: string;
    /**
     * note的具体值
     * @type {string}
     * @memberof CommitNote
     */
    'NoteContent'?: string;
}
/**
 * 提交ref信息
 * @export
 * @interface CommitRef
 */
export interface CommitRef {
    /**
     * 分支明称/标签名称
     * @type {string}
     * @memberof CommitRef
     */
    'Name'?: string;
    /**
     * 分支/标签
     * @type {string}
     * @memberof CommitRef
     */
    'Type'?: string;
}
/**
 * 提交用户信息
 * @export
 * @interface Committer
 */
export interface Committer {
    /**
     * 提交者的e-mail地址
     * @type {string}
     * @memberof Committer
     */
    'Email'?: string;
    /**
     * 提交者的姓名
     * @type {string}
     * @memberof Committer
     */
    'Name'?: string;
}
/**
 * 模版
 * @export
 * @interface ConfigTemplate
 */
export interface ConfigTemplate {
    /**
     * 配置方案Code 
     * @type {number}
     * @memberof ConfigTemplate
     */
    'Code'?: number | null;
    /**
     * 配置方案协作类型，包括 SCRUM 和 CLASSIC 
     * @type {string}
     * @memberof ConfigTemplate
     */
    'CooperateMode'?: string | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof ConfigTemplate
     */
    'CreatedAt'?: number | null;
    /**
     * 配置方案描述 
     * @type {string}
     * @memberof ConfigTemplate
     */
    'Description'?: string | null;
    /**
     * 配置方案ID
     * @type {number}
     * @memberof ConfigTemplate
     */
    'Id'?: number | null;
    /**
     * 是否是草稿配置方案 
     * @type {boolean}
     * @memberof ConfigTemplate
     */
    'IsDraft'?: boolean | null;
    /**
     * 是否是系统配置方案 
     * @type {boolean}
     * @memberof ConfigTemplate
     */
    'IsSystem'?: boolean | null;
    /**
     * 配置方案名字 
     * @type {string}
     * @memberof ConfigTemplate
     */
    'Name'?: string | null;
    /**
     * 配置方案名字，取值和CooperateMode字段一样 
     * @type {string}
     * @memberof ConfigTemplate
     */
    'NameType'?: string | null;
    /**
     * 关联项目id 
     * @type {number}
     * @memberof ConfigTemplate
     */
    'RelatedProjects'?: number | null;
    /**
     * 配置方案类型，和入参的TemplateType取值一样 
     * @type {string}
     * @memberof ConfigTemplate
     */
    'Scope'?: string | null;
    /**
     * 团队ID
     * @type {number}
     * @memberof ConfigTemplate
     */
    'TeamId'?: number | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof ConfigTemplate
     */
    'UpdatedAt'?: number | null;
}
/**
 * git 贡献者详情
 * @export
 * @interface Contributor
 */
export interface Contributor {
    /**
     * 提交次数
     * @type {number}
     * @memberof Contributor
     */
    'Commits'?: number | null;
    /**
     * 邮箱
     * @type {string}
     * @memberof Contributor
     */
    'Email'?: string | null;
    /**
     * 名字
     * @type {string}
     * @memberof Contributor
     */
    'Name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateArtifactCredit200Response
 */
export interface CreateArtifactCredit200Response {
    /**
     * 
     * @type {CreateArtifactCredit200ResponseResponse}
     * @memberof CreateArtifactCredit200Response
     */
    'Response'?: CreateArtifactCredit200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateArtifactCredit200ResponseResponse
 */
export interface CreateArtifactCredit200ResponseResponse {
    /**
     * 授信清单ID
     * @type {string}
     * @memberof CreateArtifactCredit200ResponseResponse
     */
    'ArtifactCreditId'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateArtifactCredit200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateArtifactCreditRequest
 */
export interface CreateArtifactCreditRequest {
    /**
     * 授信清单适用范围
     * @type {Array<ArtifactsOpenApiCreateArtifactCreditsRangeData>}
     * @memberof CreateArtifactCreditRequest
     */
    'Ranges'?: Array<ArtifactsOpenApiCreateArtifactCreditsRangeData>;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof CreateArtifactCreditRequest
     */
    'Enabled'?: boolean;
    /**
     * 授信规则
     * @type {Array<ArtifactsOpenApiArtifactCreditsRuleData>}
     * @memberof CreateArtifactCreditRequest
     */
    'Rules'?: Array<ArtifactsOpenApiArtifactCreditsRuleData>;
    /**
     * 授信清单名称
     * @type {string}
     * @memberof CreateArtifactCreditRequest
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface CreateArtifactRepository200Response
 */
export interface CreateArtifactRepository200Response {
    /**
     * 
     * @type {CreateArtifactRepository200ResponseResponse}
     * @memberof CreateArtifactRepository200Response
     */
    'Response'?: CreateArtifactRepository200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateArtifactRepository200ResponseResponse
 */
export interface CreateArtifactRepository200ResponseResponse {
    /**
     * 创建成功的仓库 ID
     * @type {number}
     * @memberof CreateArtifactRepository200ResponseResponse
     */
    'Id'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateArtifactRepository200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateArtifactRepositoryRequest
 */
export interface CreateArtifactRepositoryRequest {
    /**
     * 仓库权限范围:1-项目内;2-团队内;3-公开，默认：1-项目内
     * @type {number}
     * @memberof CreateArtifactRepositoryRequest
     */
    'AccessLevel'?: number;
    /**
     * 是否开启代理，仅支持当 Type 为 3-maven;4-npm; 5-PyPI;7-composer;10-cocoapods 时可为 true，默认：false
     * @type {boolean}
     * @memberof CreateArtifactRepositoryRequest
     */
    'AllowProxy'?: boolean;
    /**
     * 仓库描述信息
     * @type {string}
     * @memberof CreateArtifactRepositoryRequest
     */
    'Description'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof CreateArtifactRepositoryRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof CreateArtifactRepositoryRequest
     */
    'RepositoryName'?: string;
    /**
     * 仓库类型:1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm
     * @type {number}
     * @memberof CreateArtifactRepositoryRequest
     */
    'Type'?: number;
}
/**
 * 
 * @export
 * @interface CreateAttachmentPrepareSignUrl200Response
 */
export interface CreateAttachmentPrepareSignUrl200Response {
    /**
     * 
     * @type {CreateAttachmentPrepareSignUrl200ResponseResponse}
     * @memberof CreateAttachmentPrepareSignUrl200Response
     */
    'Response'?: CreateAttachmentPrepareSignUrl200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateAttachmentPrepareSignUrl200ResponseResponse
 */
export interface CreateAttachmentPrepareSignUrl200ResponseResponse {
    /**
     * 
     * @type {AttachmentPrepareData}
     * @memberof CreateAttachmentPrepareSignUrl200ResponseResponse
     */
    'Data'?: AttachmentPrepareData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateAttachmentPrepareSignUrl200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateAttachmentPrepareSignUrlRequest
 */
export interface CreateAttachmentPrepareSignUrlRequest {
    /**
     * 文件名
     * @type {string}
     * @memberof CreateAttachmentPrepareSignUrlRequest
     */
    'FileName'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateAttachmentPrepareSignUrlRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateBinaryFiles200Response
 */
export interface CreateBinaryFiles200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof CreateBinaryFiles200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateBinaryFilesRequest
 */
export interface CreateBinaryFilesRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateBinaryFilesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateBinaryFilesRequest
     */
    'DepotPath'?: string;
    /**
     * 目标分支名，如果想上传至源分支，值与源分支名一致
     * @type {string}
     * @memberof CreateBinaryFilesRequest
     */
    'DestRef'?: string;
    /**
     * 文件信息，其中Path需带上文件名，例如：/data/ReadMe.md。  Content为文件字节流进行Base64编码后的字符串。
     * @type {Array<GitFile>}
     * @memberof CreateBinaryFilesRequest
     */
    'GitFiles'?: Array<GitFile>;
    /**
     * 源分支最后一次提交sha
     * @type {string}
     * @memberof CreateBinaryFilesRequest
     */
    'LastCommitSha'?: string;
    /**
     * 提交信息
     * @type {string}
     * @memberof CreateBinaryFilesRequest
     */
    'Message'?: string;
    /**
     * 源分支名
     * @type {string}
     * @memberof CreateBinaryFilesRequest
     */
    'SrcRef'?: string;
}
/**
 * 
 * @export
 * @interface CreateBranchProtectionMemberRequest
 */
export interface CreateBranchProtectionMemberRequest {
    /**
     * 是否允许直接推送
     * @type {boolean}
     * @memberof CreateBranchProtectionMemberRequest
     */
    'AllowPush'?: boolean;
    /**
     * 保护分支规则id
     * @type {number}
     * @memberof CreateBranchProtectionMemberRequest
     */
    'BranchProtectionId'?: number;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateBranchProtectionMemberRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateBranchProtectionMemberRequest
     */
    'DepotPath'?: string;
    /**
     * 用户globalkey
     * @type {string}
     * @memberof CreateBranchProtectionMemberRequest
     */
    'UserGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface CreateBranchProtectionRequest
 */
export interface CreateBranchProtectionRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateBranchProtectionRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateBranchProtectionRequest
     */
    'DepotPath'?: string;
    /**
     * 保护规则
     * @type {string}
     * @memberof CreateBranchProtectionRequest
     */
    'Rule'?: string;
}
/**
 * 
 * @export
 * @interface CreateCaseResultRequest
 */
export interface CreateCaseResultRequest {
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof CreateCaseResultRequest
     */
    'CaseId'?: number;
    /**
     * 每一步的测试结果（步骤用例时需要本参数）
     * @type {Array<string>}
     * @memberof CreateCaseResultRequest
     */
    'CustomStepStatus'?: Array<string>;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateCaseResultRequest
     */
    'ProjectName'?: string;
    /**
     * 测试计划 ID
     * @type {number}
     * @memberof CreateCaseResultRequest
     */
    'RunId'?: number;
    /**
     * 该任务的测试结果，可选值：UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
     * @type {string}
     * @memberof CreateCaseResultRequest
     */
    'Status'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdCloudAccount200Response
 */
export interface CreateCdCloudAccount200Response {
    /**
     * 
     * @type {CreateCdCloudAccount200ResponseResponse}
     * @memberof CreateCdCloudAccount200Response
     */
    'Response'?: CreateCdCloudAccount200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCdCloudAccount200ResponseResponse
 */
export interface CreateCdCloudAccount200ResponseResponse {
    /**
     * 
     * @type {CreateCdCloudAccountResponseData}
     * @memberof CreateCdCloudAccount200ResponseResponse
     */
    'Data'?: CreateCdCloudAccountResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCdCloudAccount200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdCloudAccountRequest
 */
export interface CreateCdCloudAccountRequest {
    /**
     * 云账号类型（可选值：KUBERNETES、TENCENT）
     * @type {string}
     * @memberof CreateCdCloudAccountRequest
     */
    'CloudProvider'?: string;
    /**
     * 
     * @type {CloudAccountCredential}
     * @memberof CreateCdCloudAccountRequest
     */
    'Credential'?: CloudAccountCredential;
    /**
     * 云账号名称
     * @type {string}
     * @memberof CreateCdCloudAccountRequest
     */
    'Name'?: string;
}
/**
 * CreateCdCloudAccountResponseData 结构
 * @export
 * @interface CreateCdCloudAccountResponseData
 */
export interface CreateCdCloudAccountResponseData {
    /**
     * 
     * @type {CloudAccount}
     * @memberof CreateCdCloudAccountResponseData
     */
    'CloudAccount'?: CloudAccount;
}
/**
 * 
 * @export
 * @interface CreateCdHostServerGroup200Response
 */
export interface CreateCdHostServerGroup200Response {
    /**
     * 
     * @type {CreateCdHostServerGroup200ResponseResponse}
     * @memberof CreateCdHostServerGroup200Response
     */
    'Response'?: CreateCdHostServerGroup200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCdHostServerGroup200ResponseResponse
 */
export interface CreateCdHostServerGroup200ResponseResponse {
    /**
     * 
     * @type {CreateCdHostServerGroupResponseData}
     * @memberof CreateCdHostServerGroup200ResponseResponse
     */
    'Data'?: CreateCdHostServerGroupResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCdHostServerGroup200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdHostServerGroupRequest
 */
export interface CreateCdHostServerGroupRequest {
    /**
     * 堡垒机 ID
     * @type {number}
     * @memberof CreateCdHostServerGroupRequest
     */
    'AgentMachineId'?: number;
    /**
     * SSH 认证方式（可选值：PUBLIC_KEY、PASSWORD）
     * @type {string}
     * @memberof CreateCdHostServerGroupRequest
     */
    'AuthMethod'?: string;
    /**
     * 主机组名称
     * @type {string}
     * @memberof CreateCdHostServerGroupRequest
     */
    'DisplayName'?: string;
    /**
     * 实例 IP 列表
     * @type {Array<string>}
     * @memberof CreateCdHostServerGroupRequest
     */
    'Ips'?: Array<string>;
    /**
     * 主机组标签
     * @type {Array<HostServerGroupLabel>}
     * @memberof CreateCdHostServerGroupRequest
     */
    'Labels'?: Array<HostServerGroupLabel>;
    /**
     * SSH 密码
     * @type {string}
     * @memberof CreateCdHostServerGroupRequest
     */
    'Password'?: string;
    /**
     * SSH 端口
     * @type {number}
     * @memberof CreateCdHostServerGroupRequest
     */
    'Port'?: number;
    /**
     * SSH 用户名
     * @type {string}
     * @memberof CreateCdHostServerGroupRequest
     */
    'UserName'?: string;
}
/**
 * CreateCdHostServerGroupResponseData 结构
 * @export
 * @interface CreateCdHostServerGroupResponseData
 */
export interface CreateCdHostServerGroupResponseData {
    /**
     * 
     * @type {HostServerGroup}
     * @memberof CreateCdHostServerGroupResponseData
     */
    'HostServerGroup'?: HostServerGroup;
}
/**
 * 
 * @export
 * @interface CreateCdPipeline200Response
 */
export interface CreateCdPipeline200Response {
    /**
     * 
     * @type {CreateCdPipeline200ResponseResponse}
     * @memberof CreateCdPipeline200Response
     */
    'Response'?: CreateCdPipeline200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCdPipeline200ResponseResponse
 */
export interface CreateCdPipeline200ResponseResponse {
    /**
     * 
     * @type {CreateCdPipelineResponseData}
     * @memberof CreateCdPipeline200ResponseResponse
     */
    'Data'?: CreateCdPipelineResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCdPipeline200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdPipelineRequest
 */
export interface CreateCdPipelineRequest {
    /**
     * 部署流程 JSON 配置（注意：stages 的 refId 和 requisiteStageRefIds 字段必传）
     * @type {string}
     * @memberof CreateCdPipelineRequest
     */
    'PipelineJsonContent'?: string;
}
/**
 * CreateCdPipelineResponseData 结构
 * @export
 * @interface CreateCdPipelineResponseData
 */
export interface CreateCdPipelineResponseData {
    /**
     * 任务执行记录 ID
     * @type {string}
     * @memberof CreateCdPipelineResponseData
     */
    'TaskExecutionId'?: string;
    /**
     * 任务执行记录引用
     * @type {string}
     * @memberof CreateCdPipelineResponseData
     */
    'TaskExecutionRef'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdTask200Response
 */
export interface CreateCdTask200Response {
    /**
     * 
     * @type {CreateCdTask200ResponseResponse}
     * @memberof CreateCdTask200Response
     */
    'Response'?: CreateCdTask200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCdTask200ResponseResponse
 */
export interface CreateCdTask200ResponseResponse {
    /**
     * 
     * @type {CreateCdTaskResponseData}
     * @memberof CreateCdTask200ResponseResponse
     */
    'Data'?: CreateCdTaskResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCdTask200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCdTaskRequest
 */
export interface CreateCdTaskRequest {
    /**
     * 任务 JSON 配置
     * @type {string}
     * @memberof CreateCdTaskRequest
     */
    'TaskJsonContent'?: string;
}
/**
 * CreateCdTaskResponseData 结构
 * @export
 * @interface CreateCdTaskResponseData
 */
export interface CreateCdTaskResponseData {
    /**
     * 任务执行记录 ID
     * @type {string}
     * @memberof CreateCdTaskResponseData
     */
    'TaskExecutionId'?: string;
    /**
     * 任务执行记录引用
     * @type {string}
     * @memberof CreateCdTaskResponseData
     */
    'TaskExecutionRef'?: string;
}
/**
 * 
 * @export
 * @interface CreateCodingCIJob200Response
 */
export interface CreateCodingCIJob200Response {
    /**
     * 
     * @type {CreateCodingCIJob200ResponseResponse}
     * @memberof CreateCodingCIJob200Response
     */
    'Response'?: CreateCodingCIJob200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCodingCIJob200ResponseResponse
 */
export interface CreateCodingCIJob200ResponseResponse {
    /**
     * 
     * @type {CreateCodingCIJobData}
     * @memberof CreateCodingCIJob200ResponseResponse
     */
    'Data'?: CreateCodingCIJobData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCodingCIJob200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCodingCIJobByTeamTemplate200Response
 */
export interface CreateCodingCIJobByTeamTemplate200Response {
    /**
     * 
     * @type {CreateCodingCIJobByTeamTemplate200ResponseResponse}
     * @memberof CreateCodingCIJobByTeamTemplate200Response
     */
    'Response'?: CreateCodingCIJobByTeamTemplate200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateCodingCIJobByTeamTemplate200ResponseResponse
 */
export interface CreateCodingCIJobByTeamTemplate200ResponseResponse {
    /**
     * 
     * @type {JobCreateJobData}
     * @memberof CreateCodingCIJobByTeamTemplate200ResponseResponse
     */
    'Data'?: JobCreateJobData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateCodingCIJobByTeamTemplate200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateCodingCIJobByTeamTemplateRequest
 */
export interface CreateCodingCIJobByTeamTemplateRequest {
    /**
     * 描述信息
     * @type {number}
     * @memberof CreateCodingCIJobByTeamTemplateRequest
     */
    'DepotId'?: number;
    /**
     * 仓库类型
     * @type {string}
     * @memberof CreateCodingCIJobByTeamTemplateRequest
     */
    'DepotType'?: CreateCodingCIJobByTeamTemplateRequestDepotTypeEnum;
    /**
     * 构建计划名称
     * @type {string}
     * @memberof CreateCodingCIJobByTeamTemplateRequest
     */
    'JobName'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof CreateCodingCIJobByTeamTemplateRequest
     */
    'ProjectId'?: number;
    /**
     * 团队构建模版 ID
     * @type {number}
     * @memberof CreateCodingCIJobByTeamTemplateRequest
     */
    'TemplateId'?: number;
}

export const CreateCodingCIJobByTeamTemplateRequestDepotTypeEnum = {
    Coding: 'CODING',
    Tgit: 'TGIT',
    Github: 'GITHUB',
    Gitlab: 'GITLAB',
    GitlabPrivate: 'GITLAB_PRIVATE',
    Gitee: 'GITEE',
    None: 'NONE',
    CodingOtherProj: 'CODING_OTHER_PROJ',
    CommonGitRepo: 'COMMON_GIT_REPO'
} as const;

export type CreateCodingCIJobByTeamTemplateRequestDepotTypeEnum = typeof CreateCodingCIJobByTeamTemplateRequestDepotTypeEnum[keyof typeof CreateCodingCIJobByTeamTemplateRequestDepotTypeEnum];

/**
 * 创建构建计划返回值
 * @export
 * @interface CreateCodingCIJobData
 */
export interface CreateCodingCIJobData {
    /**
     * 构建计划 Id
     * @type {number}
     * @memberof CreateCodingCIJobData
     */
    'Id': number;
}
/**
 * 
 * @export
 * @interface CreateCodingCIJobRequest
 */
export interface CreateCodingCIJobRequest {
    /**
     * 不管构建成功还是失败总是通知的用户
     * @type {Array<number>}
     * @memberof CreateCodingCIJobRequest
     */
    'AlwaysUserIdList'?: Array<number>;
    /**
     * 自动取消相同 MR
     * @type {boolean}
     * @memberof CreateCodingCIJobRequest
     */
    'AutoCancelSameMergeRequest'?: boolean;
    /**
     * 自动取消相同版本
     * @type {boolean}
     * @memberof CreateCodingCIJobRequest
     */
    'AutoCancelSameRevision'?: boolean;
    /**
     * hookType 为 CUSTOME 时须指定
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'BranchRegex'?: string;
    /**
     * hookType 为 DEFAULT 时须指定
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'BranchSelector'?: string;
    /**
     * 仅构建失败时要通知的用户
     * @type {Array<number>}
     * @memberof CreateCodingCIJobRequest
     */
    'BuildFailUserIdList'?: Array<number>;
    /**
     * 任务缓存目录配置
     * @type {Array<CodingCIJobCachePath>}
     * @memberof CreateCodingCIJobRequest
     */
    'CachePathList'?: Array<CodingCIJobCachePath>;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof CreateCodingCIJobRequest
     */
    'DepotId'?: number;
    /**
     * 仓库类型 CODING_OTHER_PROJ,CODING,TGIT,GITHUB,GITLAB,GITLAB_PRIVATE,GITEE,COMMON_GIT_REPO,NONE
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'DepotType'?: string;
    /**
     * 环境变量配置
     * @type {Array<CIJobEnv>}
     * @memberof CreateCodingCIJobRequest
     */
    'EnvList'?: Array<CIJobEnv>;
    /**
     * 执行方式 CVM | STATIC | AGENT
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'ExecuteIn'?: string;
    /**
     * 自定义构建节点池 ID，ExecuteIn 为 AGENT 必填
     * @type {number}
     * @memberof CreateCodingCIJobRequest
     */
    'ExecutedAgentPoolId'?: number;
    /**
     * 代码更新触发匹配规则 DEFAULT,TAG,BRANCH,CUSTOM
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'HookType'?: string;
    /**
     * STATIC，SCM 从代码库读取
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'JenkinsFileFromType'?: string;
    /**
     * JenkinsFileFromType 为 SCM 必填
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'JenkinsFilePath'?: string;
    /**
     * JenkinsFileFromType 为 STATIC 必填
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'JenkinsFileStaticContent'?: string;
    /**
     * 构建计划来源 TKE TCB
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'JobFromType'?: string;
    /**
     * 构建计划名称
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'Name'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof CreateCodingCIJobRequest
     */
    'ProjectId'?: number;
    /**
     * 针对 CRON triggerMethod 的 schedule 规则配置, 暂只用于添加
     * @type {Array<CodingCIJobSchedule>}
     * @memberof CreateCodingCIJobRequest
     */
    'ScheduleList'?: Array<CodingCIJobSchedule>;
    /**
     * REF_CHANGE 代码更新触发      CRON = 1 定时触发      MR_CHANGE  MR变动触发
     * @type {Array<string>}
     * @memberof CreateCodingCIJobRequest
     */
    'TriggerMethodList'?: Array<string>;
    /**
     * 构建结果通知触发者机制  ALWAYS -总是通知;  BUILD_FAIL -仅构建失败时通知;
     * @type {string}
     * @memberof CreateCodingCIJobRequest
     */
    'TriggerRemind'?: string;
}
/**
 * 
 * @export
 * @interface CreateCodingProject200Response
 */
export interface CreateCodingProject200Response {
    /**
     * 
     * @type {CreateProjectWithTemplate200ResponseResponse}
     * @memberof CreateCodingProject200Response
     */
    'Response'?: CreateProjectWithTemplate200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateCodingProjectRequest
 */
export interface CreateCodingProjectRequest {
    /**
     * 项目描述
     * @type {string}
     * @memberof CreateCodingProjectRequest
     */
    'Description'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateCodingProjectRequest
     */
    'DisplayName'?: string;
    /**
     * 项目图标
     * @type {string}
     * @memberof CreateCodingProjectRequest
     */
    'Icon'?: string;
    /**
     * 项目标识
     * @type {string}
     * @memberof CreateCodingProjectRequest
     */
    'Name'?: string;
    /**
     * 项目模版 CODE_HOST 代码托管项目， PROJECT_MANAGE 项目管理项目， DEV_OPS DevOps项目， DEMO_BEGIN 范例项目
     * @type {string}
     * @memberof CreateCodingProjectRequest
     */
    'ProjectTemplate'?: CreateCodingProjectRequestProjectTemplateEnum;
    /**
     * 0： 不公开 1：公开源代码
     * @type {number}
     * @memberof CreateCodingProjectRequest
     */
    'Shared'?: number;
}

export const CreateCodingProjectRequestProjectTemplateEnum = {
    DevOps: 'DEV_OPS',
    DemoBegin: 'DEMO_BEGIN',
    ChoiceDemand: 'CHOICE_DEMAND',
    ProjectManage: 'PROJECT_MANAGE',
    CodeHost: 'CODE_HOST'
} as const;

export type CreateCodingProjectRequestProjectTemplateEnum = typeof CreateCodingProjectRequestProjectTemplateEnum[keyof typeof CreateCodingProjectRequestProjectTemplateEnum];

/**
 * 
 * @export
 * @interface CreateDepartment200Response
 */
export interface CreateDepartment200Response {
    /**
     * 
     * @type {ModifyDepartment200ResponseResponse}
     * @memberof CreateDepartment200Response
     */
    'Response'?: ModifyDepartment200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateDepartmentRequest
 */
export interface CreateDepartmentRequest {
    /**
     * 部门名
     * @type {string}
     * @memberof CreateDepartmentRequest
     */
    'Name'?: string;
    /**
     * 父部门ID
     * @type {number}
     * @memberof CreateDepartmentRequest
     */
    'ParentId'?: number;
}
/**
 * 
 * @export
 * @interface CreateDepotByTemplate200Response
 */
export interface CreateDepotByTemplate200Response {
    /**
     * 
     * @type {ModifyDepotName200ResponseResponse}
     * @memberof CreateDepotByTemplate200Response
     */
    'Response'?: ModifyDepotName200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateDepotByTemplateRequest
 */
export interface CreateDepotByTemplateRequest {
    /**
     * 仓库名
     * @type {string}
     * @memberof CreateDepotByTemplateRequest
     */
    'DepotName'?: string;
    /**
     * 仓库描述
     * @type {string}
     * @memberof CreateDepotByTemplateRequest
     */
    'Description'?: string;
    /**
     * 项目Id
     * @type {number}
     * @memberof CreateDepotByTemplateRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库模板。目前支持：Spring, Ruby on Rails，Ruby Sinatra，Node.js，Android，Python，Hexo，Jekyll。对应模板参数分别为：SPRING,ROR,SINATRA,NODEJS,ANDROID,FLASK,CLOUD_API_HEXO,CLOUD_API_JEKYLL。如果设置了自定义模版，可以传入自定义模版的仓库Id
     * @type {string}
     * @memberof CreateDepotByTemplateRequest
     */
    'Template'?: string;
}
/**
 * 
 * @export
 * @interface CreateDepotFilePushRuleRequest
 */
export interface CreateDepotFilePushRuleRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateDepotFilePushRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 拒绝所有人推送
     * @type {boolean}
     * @memberof CreateDepotFilePushRuleRequest
     */
    'IsDenyForAllUser'?: boolean;
    /**
     * 文件路径
     * @type {string}
     * @memberof CreateDepotFilePushRuleRequest
     */
    'Pattern'?: string;
}
/**
 * 
 * @export
 * @interface CreateFile200Response
 */
export interface CreateFile200Response {
    /**
     * 
     * @type {CreateFile200ResponseResponse}
     * @memberof CreateFile200Response
     */
    'Response'?: CreateFile200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateFile200ResponseResponse
 */
export interface CreateFile200ResponseResponse {
    /**
     * 
     * @type {ApiFileFile}
     * @memberof CreateFile200ResponseResponse
     */
    'Data'?: ApiFileFile;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateFile200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateFileRequest
 */
export interface CreateFileRequest {
    /**
     * 获取预签名URL接口返回的 AuthToken
     * @type {string}
     * @memberof CreateFileRequest
     */
    'AuthToken'?: string;
    /**
     * 获取预签名URL接口返回的 StorageKey
     * @type {string}
     * @memberof CreateFileRequest
     */
    'StorageKey'?: string;
}
/**
 * 
 * @export
 * @interface CreateFolder200Response
 */
export interface CreateFolder200Response {
    /**
     * 
     * @type {CreateFolder200ResponseResponse}
     * @memberof CreateFolder200Response
     */
    'Response'?: CreateFolder200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateFolder200ResponseResponse
 */
export interface CreateFolder200ResponseResponse {
    /**
     * 
     * @type {ApiFileFolder}
     * @memberof CreateFolder200ResponseResponse
     */
    'Data'?: ApiFileFolder;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateFolder200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateFolderRequest
 */
export interface CreateFolderRequest {
    /**
     * 文件夹名
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'FoldName'?: string;
    /**
     * 父文件夹ID
     * @type {number}
     * @memberof CreateFolderRequest
     */
    'ParentId'?: number;
    /**
     * 项目名
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitBranchRequest
 */
export interface CreateGitBranchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof CreateGitBranchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateGitBranchRequest
     */
    'DepotPath'?: string;
    /**
     * 分支备注
     * @type {string}
     * @memberof CreateGitBranchRequest
     */
    'Note'?: string;
    /**
     * 创建来源的分支名称或者commitId
     * @type {string}
     * @memberof CreateGitBranchRequest
     */
    'StartPoint'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitCommit200Response
 */
export interface CreateGitCommit200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof CreateGitCommit200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateGitCommitComment200Response
 */
export interface CreateGitCommitComment200Response {
    /**
     * 
     * @type {CreateGitCommitComment200ResponseResponse}
     * @memberof CreateGitCommitComment200Response
     */
    'Response'?: CreateGitCommitComment200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateGitCommitComment200ResponseResponse
 */
export interface CreateGitCommitComment200ResponseResponse {
    /**
     * 
     * @type {CommitComment}
     * @memberof CreateGitCommitComment200ResponseResponse
     */
    'Comment'?: CommitComment;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateGitCommitComment200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitCommitCommentRequest
 */
export interface CreateGitCommitCommentRequest {
    /**
     * 评论的内容
     * @type {string}
     * @memberof CreateGitCommitCommentRequest
     */
    'Content'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitCommitCommentRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateGitCommitCommentRequest
     */
    'DepotPath'?: string;
    /**
     * diff信息中的第几行
     * @type {number}
     * @memberof CreateGitCommitCommentRequest
     */
    'Index'?: number;
    /**
     * 文件路径
     * @type {string}
     * @memberof CreateGitCommitCommentRequest
     */
    'Path'?: string;
    /**
     * 提交id
     * @type {string}
     * @memberof CreateGitCommitCommentRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitCommitNoteRequest
 */
export interface CreateGitCommitNoteRequest {
    /**
     * 提交信息
     * @type {string}
     * @memberof CreateGitCommitNoteRequest
     */
    'CommitMessage'?: string;
    /**
     * 提交的 Sha
     * @type {string}
     * @memberof CreateGitCommitNoteRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitCommitNoteRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateGitCommitNoteRequest
     */
    'DepotPath'?: string;
    /**
     * 注释的详情信息
     * @type {string}
     * @memberof CreateGitCommitNoteRequest
     */
    'Note'?: string;
    /**
     * 注释分支 ref。建议默认不填
     * @type {string}
     * @memberof CreateGitCommitNoteRequest
     */
    'NotesRef'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitCommitRequest
 */
export interface CreateGitCommitRequest {
    /**
     * 文件列表
     * @type {Array<CommitFile>}
     * @memberof CreateGitCommitRequest
     */
    'CommitFiles'?: Array<CommitFile>;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateGitCommitRequest
     */
    'DepotPath'?: string;
    /**
     * 最后次提交 Sha
     * @type {string}
     * @memberof CreateGitCommitRequest
     */
    'LastCommitSha'?: string;
    /**
     * 提交文本
     * @type {string}
     * @memberof CreateGitCommitRequest
     */
    'Message'?: string;
    /**
     * 新分支（如果不修改分支名称，不需要传值）
     * @type {string}
     * @memberof CreateGitCommitRequest
     */
    'NewRef'?: string;
    /**
     * 基于改动的分支
     * @type {string}
     * @memberof CreateGitCommitRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitDeployKeyRequest
 */
export interface CreateGitDeployKeyRequest {
    /**
     * 是否授予写入权限
     * @type {boolean}
     * @memberof CreateGitDeployKeyRequest
     */
    'AllowWrite'?: boolean;
    /**
     * SSH key
     * @type {string}
     * @memberof CreateGitDeployKeyRequest
     */
    'Content'?: string;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof CreateGitDeployKeyRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateGitDeployKeyRequest
     */
    'DepotPath'?: string;
    /**
     * 过期时间，不填则为永不过期
     * @type {string}
     * @memberof CreateGitDeployKeyRequest
     */
    'ExpirationDate'?: string;
    /**
     * 部署公钥标题
     * @type {string}
     * @memberof CreateGitDeployKeyRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitDepot200Response
 */
export interface CreateGitDepot200Response {
    /**
     * 
     * @type {CreateGitDepot200ResponseResponse}
     * @memberof CreateGitDepot200Response
     */
    'Response'?: CreateGitDepot200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateGitDepot200ResponseResponse
 */
export interface CreateGitDepot200ResponseResponse {
    /**
     * 创建的仓库id
     * @type {number}
     * @memberof CreateGitDepot200ResponseResponse
     */
    'DepotId'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateGitDepot200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitDepotRequest
 */
export interface CreateGitDepotRequest {
    /**
     * 仓库名称
     * @type {string}
     * @memberof CreateGitDepotRequest
     */
    'DepotName'?: string;
    /**
     * 仓库的描述信息
     * @type {string}
     * @memberof CreateGitDepotRequest
     */
    'Description'?: string;
    /**
     * 项目id
     * @type {number}
     * @memberof CreateGitDepotRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库是否允许公开访问
     * @type {boolean}
     * @memberof CreateGitDepotRequest
     */
    'Shared'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateGitFiles200Response
 */
export interface CreateGitFiles200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof CreateGitFiles200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateGitFilesRequest
 */
export interface CreateGitFilesRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof CreateGitFilesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateGitFilesRequest
     */
    'DepotPath'?: string;
    /**
     * 新增的文件
     * @type {Array<GitFile>}
     * @memberof CreateGitFilesRequest
     */
    'GitFiles'?: Array<GitFile>;
    /**
     * 最后次提交 Sha
     * @type {string}
     * @memberof CreateGitFilesRequest
     */
    'LastCommitSha'?: string;
    /**
     * 提交文本
     * @type {string}
     * @memberof CreateGitFilesRequest
     */
    'Message'?: string;
    /**
     * 新分支
     * @type {string}
     * @memberof CreateGitFilesRequest
     */
    'NewRef'?: string;
    /**
     * 基于改动的分支
     * @type {string}
     * @memberof CreateGitFilesRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitMergeReq200Response
 */
export interface CreateGitMergeReq200Response {
    /**
     * 
     * @type {CreateGitMergeReq200ResponseResponse}
     * @memberof CreateGitMergeReq200Response
     */
    'Response'?: CreateGitMergeReq200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateGitMergeReq200ResponseResponse
 */
export interface CreateGitMergeReq200ResponseResponse {
    /**
     * 
     * @type {MergeInfo}
     * @memberof CreateGitMergeReq200ResponseResponse
     */
    'MergeInfo'?: MergeInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateGitMergeReq200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitMergeReqRequest
 */
export interface CreateGitMergeReqRequest {
    /**
     * 合并请求内容
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'Content'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitMergeReqRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径与depotId选择其一就可以
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'DepotPath'?: string;
    /**
     * 目标分支
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'DestBranch'?: string;
    /**
     * 评审者
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'Reviewers'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'SrcBranch'?: string;
    /**
     * 合并请求title
     * @type {string}
     * @memberof CreateGitMergeReqRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitMergeRequest200Response
 */
export interface CreateGitMergeRequest200Response {
    /**
     * 
     * @type {CreateGitMergeRequest200ResponseResponse}
     * @memberof CreateGitMergeRequest200Response
     */
    'Response'?: CreateGitMergeRequest200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateGitMergeRequest200ResponseResponse
 */
export interface CreateGitMergeRequest200ResponseResponse {
    /**
     * 
     * @type {GitMergeRequest}
     * @memberof CreateGitMergeRequest200ResponseResponse
     */
    'Request'?: GitMergeRequest;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateGitMergeRequest200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitMergeRequestRequest
 */
export interface CreateGitMergeRequestRequest {
    /**
     * 描述内容
     * @type {string}
     * @memberof CreateGitMergeRequestRequest
     */
    'Content'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof CreateGitMergeRequestRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一  
     * @type {string}
     * @memberof CreateGitMergeRequestRequest
     */
    'DepotPath'?: string;
    /**
     * 目标分支名
     * @type {string}
     * @memberof CreateGitMergeRequestRequest
     */
    'DestBranch'?: string;
    /**
     * 源分支名
     * @type {string}
     * @memberof CreateGitMergeRequestRequest
     */
    'SrcBranch'?: string;
    /**
     * 标题
     * @type {string}
     * @memberof CreateGitMergeRequestRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitProtectedTagRuleRequest
 */
export interface CreateGitProtectedTagRuleRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof CreateGitProtectedTagRuleRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof CreateGitProtectedTagRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 保护规则
     * @type {string}
     * @memberof CreateGitProtectedTagRuleRequest
     */
    'Rule'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitProtectedTagRulesRequest
 */
export interface CreateGitProtectedTagRulesRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof CreateGitProtectedTagRulesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateGitProtectedTagRulesRequest
     */
    'DepotPath'?: string;
    /**
     * 保护规则列表
     * @type {Array<string>}
     * @memberof CreateGitProtectedTagRulesRequest
     */
    'Rule'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateGitReleaseRequest
 */
export interface CreateGitReleaseRequest {
    /**
     * 提交 Sha 值
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitReleaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'DepotPath'?: string;
    /**
     * 版本描述信息
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'Description'?: string;
    /**
     * 是否为预发布版本
     * @type {boolean}
     * @memberof CreateGitReleaseRequest
     */
    'Pre'?: boolean;
    /**
     * 创建来源的分支名称或者commitId
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'TagName'?: string;
    /**
     * 目标提交 Sha 值
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'TargetCommitBranch'?: string;
    /**
     * 版本标题
     * @type {string}
     * @memberof CreateGitReleaseRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitTag200Response
 */
export interface CreateGitTag200Response {
    /**
     * 
     * @type {CreateGitTag200ResponseResponse}
     * @memberof CreateGitTag200Response
     */
    'Response'?: CreateGitTag200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateGitTag200ResponseResponse
 */
export interface CreateGitTag200ResponseResponse {
    /**
     * 
     * @type {GitTag}
     * @memberof CreateGitTag200ResponseResponse
     */
    'GitTag'?: GitTag;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateGitTag200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateGitTagRequest
 */
export interface CreateGitTagRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateGitTagRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateGitTagRequest
     */
    'DepotPath'?: string;
    /**
     * tag创建信息
     * @type {string}
     * @memberof CreateGitTagRequest
     */
    'Message'?: string;
    /**
     * 创建来源的分支或commitId
     * @type {string}
     * @memberof CreateGitTagRequest
     */
    'StartPoint'?: string;
    /**
     * tag名称
     * @type {string}
     * @memberof CreateGitTagRequest
     */
    'TagName'?: string;
}
/**
 * 
 * @export
 * @interface CreateIssue200Response
 */
export interface CreateIssue200Response {
    /**
     * 
     * @type {ModifyIssue200ResponseResponse}
     * @memberof CreateIssue200Response
     */
    'Response'?: ModifyIssue200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateIssueBlockRequest
 */
export interface CreateIssueBlockRequest {
    /**
     * 前置事项 Code
     * @type {number}
     * @memberof CreateIssueBlockRequest
     */
    'BlockIssueCode'?: number;
    /**
     * 事项 Code
     * @type {number}
     * @memberof CreateIssueBlockRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIssueBlockRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateIssueCommentRequest
 */
export interface CreateIssueCommentRequest {
    /**
     * 评论内容
     * @type {string}
     * @memberof CreateIssueCommentRequest
     */
    'Content'?: string;
    /**
     * 事项 Code
     * @type {number}
     * @memberof CreateIssueCommentRequest
     */
    'IssueCode'?: number;
    /**
     * 父评论ID
     * @type {number}
     * @memberof CreateIssueCommentRequest
     */
    'ParentId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIssueCommentRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateIssueModule200Response
 */
export interface CreateIssueModule200Response {
    /**
     * 
     * @type {CreateIssueModule200ResponseResponse}
     * @memberof CreateIssueModule200Response
     */
    'Response'?: CreateIssueModule200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateIssueModule200ResponseResponse
 */
export interface CreateIssueModule200ResponseResponse {
    /**
     * 
     * @type {IssueModule}
     * @memberof CreateIssueModule200ResponseResponse
     */
    'IssueModule'?: IssueModule;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateIssueModule200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateIssueModuleRequest
 */
export interface CreateIssueModuleRequest {
    /**
     * 模块名称
     * @type {string}
     * @memberof CreateIssueModuleRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIssueModuleRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateIssueRequest
 */
export interface CreateIssueRequest {
    /**
     * 处理人 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'AssigneeId'?: number;
    /**
     * 自定义属性值列表
     * @type {Array<IssueCustomFieldForm>}
     * @memberof CreateIssueRequest
     */
    'CustomFieldValues'?: Array<IssueCustomFieldForm>;
    /**
     * 缺陷类型 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'DefectTypeId'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'Description'?: string;
    /**
     * 截止日期，格式：2021-01-01
     * @type {object}
     * @memberof CreateIssueRequest
     */
    'DueDate'?: object;
    /**
     * 史诗 Code，Type 为 EPIC 或 SUB_TASK时，不传该值
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'EpicCode'?: number;
    /**
     * 附件的文件 Id 列表
     * @type {Array<number>}
     * @memberof CreateIssueRequest
     */
    'FileIds'?: Array<number>;
    /**
     * 事项类型 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'IssueTypeId'?: number;
    /**
     * 迭代 Code，Type 为 EPIC 或 SUB_TASK时，忽略该值
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'IterationCode'?: number;
    /**
     * 标签 Id 列表
     * @type {Array<number>}
     * @memberof CreateIssueRequest
     */
    'LabelIds'?: Array<number>;
    /**
     * 事项名称
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'Name'?: string;
    /**
     * 父事项 Code  敏捷模式：Type 为 SUB_TASK 时必须指定  经典模式：Type 为 MISSION、REQUIREMENT 时可指定
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'ParentCode'?: number;
    /**
     * 紧急程度  \"0\" - 低  \"1\" - 中  \"2\" - 高  \"3\" - 紧急
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'Priority'?: string;
    /**
     * 项目模块 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'ProjectModuleId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'ProjectName'?: string;
    /**
     * 版本code列表
     * @type {Array<number>}
     * @memberof CreateIssueRequest
     */
    'ReleaseCodes'?: Array<number>;
    /**
     * 需求类型 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'RequirementTypeId'?: number;
    /**
     * 开始日期，格式：2021-01-01
     * @type {object}
     * @memberof CreateIssueRequest
     */
    'StartDate'?: object;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'StatusId'?: number;
    /**
     * 故事点，例如：0.5、1
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'StoryPoint'?: string;
    /**
     * 排序目标位置的事项 code  可不填，排在底位
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'TargetSortCode'?: number;
    /**
     * 第三方链接列表
     * @type {Array<IssueThirdLinkForm>}
     * @memberof CreateIssueRequest
     */
    'ThirdLinks'?: Array<IssueThirdLinkForm>;
    /**
     * 事项类型  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗  SUB_TASK - 子任务
     * @type {string}
     * @memberof CreateIssueRequest
     */
    'Type'?: string;
    /**
     * 关注人 Id 列表
     * @type {Array<number>}
     * @memberof CreateIssueRequest
     */
    'WatcherIds'?: Array<number>;
    /**
     * 工时（小时数）
     * @type {number}
     * @memberof CreateIssueRequest
     */
    'WorkingHours'?: number;
}
/**
 * 
 * @export
 * @interface CreateIssueWorkHoursRequest
 */
export interface CreateIssueWorkHoursRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof CreateIssueWorkHoursRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIssueWorkHoursRequest
     */
    'ProjectName'?: string;
    /**
     * 剩余工时
     * @type {number}
     * @memberof CreateIssueWorkHoursRequest
     */
    'RemainingHour'?: number;
    /**
     * 使用工时
     * @type {number}
     * @memberof CreateIssueWorkHoursRequest
     */
    'SpendHour'?: number;
    /**
     * 开始时间戳
     * @type {number}
     * @memberof CreateIssueWorkHoursRequest
     */
    'StartAt'?: number;
    /**
     * 工作描述
     * @type {string}
     * @memberof CreateIssueWorkHoursRequest
     */
    'WorkingDesc'?: string;
}
/**
 * 
 * @export
 * @interface CreateIteration200Response
 */
export interface CreateIteration200Response {
    /**
     * 
     * @type {ModifyIteration200ResponseResponse}
     * @memberof CreateIteration200Response
     */
    'Response'?: ModifyIteration200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateIterationRequest
 */
export interface CreateIterationRequest {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof CreateIterationRequest
     */
    'Assignee'?: number;
    /**
     * 结束时间，格式：2020-01-01
     * @type {object}
     * @memberof CreateIterationRequest
     */
    'EndAt'?: object;
    /**
     * 目标
     * @type {string}
     * @memberof CreateIterationRequest
     */
    'Goal'?: string;
    /**
     * 标题
     * @type {string}
     * @memberof CreateIterationRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateIterationRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间，格式：2020-01-01
     * @type {object}
     * @memberof CreateIterationRequest
     */
    'StartAt'?: object;
}
/**
 * 
 * @export
 * @interface CreateMemberSshKey200Response
 */
export interface CreateMemberSshKey200Response {
    /**
     * 
     * @type {CreateMemberSshKey200ResponseResponse}
     * @memberof CreateMemberSshKey200Response
     */
    'Response'?: CreateMemberSshKey200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateMemberSshKey200ResponseResponse
 */
export interface CreateMemberSshKey200ResponseResponse {
    /**
     * 
     * @type {SshKeyInfo}
     * @memberof CreateMemberSshKey200ResponseResponse
     */
    'SshKeyInfo'?: SshKeyInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateMemberSshKey200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateMemberSshKeyRequest
 */
export interface CreateMemberSshKeyRequest {
    /**
     * 公钥内容
     * @type {string}
     * @memberof CreateMemberSshKeyRequest
     */
    'Content'?: string;
    /**
     * 过期时间，不填为永不过期 9999-12-31
     * @type {string}
     * @memberof CreateMemberSshKeyRequest
     */
    'ExpirationDate'?: string;
    /**
     * 成员 Id
     * @type {number}
     * @memberof CreateMemberSshKeyRequest
     */
    'MemberUserId'?: number;
    /**
     * 导入的 ssh key 标识名
     * @type {string}
     * @memberof CreateMemberSshKeyRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateMergeRequestNote200Response
 */
export interface CreateMergeRequestNote200Response {
    /**
     * 
     * @type {CreateMergeRequestNote200ResponseResponse}
     * @memberof CreateMergeRequestNote200Response
     */
    'Response'?: CreateMergeRequestNote200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateMergeRequestNote200ResponseResponse
 */
export interface CreateMergeRequestNote200ResponseResponse {
    /**
     * 
     * @type {MergeRequestNote}
     * @memberof CreateMergeRequestNote200ResponseResponse
     */
    'Note'?: MergeRequestNote;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateMergeRequestNote200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateMergeRequestNoteRequest
 */
export interface CreateMergeRequestNoteRequest {
    /**
     * 行评论内容
     * @type {string}
     * @memberof CreateMergeRequestNoteRequest
     */
    'Content'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateMergeRequestNoteRequest
     */
    'DepotPath'?: string;
    /**
     * 
     * @type {MergeRequestDiffNoteForm}
     * @memberof CreateMergeRequestNoteRequest
     */
    'Form'?: MergeRequestDiffNoteForm;
    /**
     * 合并请求的Iid
     * @type {number}
     * @memberof CreateMergeRequestNoteRequest
     */
    'MergeId'?: number;
    /**
     * 行评论的父亲Id
     * @type {number}
     * @memberof CreateMergeRequestNoteRequest
     */
    'ParentId'?: number;
}
/**
 * 
 * @export
 * @interface CreateMergeRequestReviewer200Response
 */
export interface CreateMergeRequestReviewer200Response {
    /**
     * 
     * @type {CreateMergeRequestReviewer200ResponseResponse}
     * @memberof CreateMergeRequestReviewer200Response
     */
    'Response'?: CreateMergeRequestReviewer200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateMergeRequestReviewer200ResponseResponse
 */
export interface CreateMergeRequestReviewer200ResponseResponse {
    /**
     * 评审者信息
     * @type {Array<CodingUser>}
     * @memberof CreateMergeRequestReviewer200ResponseResponse
     */
    'Reviewers'?: Array<CodingUser>;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateMergeRequestReviewer200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateMergeRequestReviewerRequest
 */
export interface CreateMergeRequestReviewerRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof CreateMergeRequestReviewerRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof CreateMergeRequestReviewerRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof CreateMergeRequestReviewerRequest
     */
    'MergeId'?: number;
    /**
     * 评审者
     * @type {string}
     * @memberof CreateMergeRequestReviewerRequest
     */
    'ReviewerGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface CreatePolicyRequest
 */
export interface CreatePolicyRequest {
    /**
     * 显示名称
     * @type {string}
     * @memberof CreatePolicyRequest
     */
    'Alias'?: string;
    /**
     * 描述
     * @type {string}
     * @memberof CreatePolicyRequest
     */
    'Description'?: string;
    /**
     * 名称
     * @type {string}
     * @memberof CreatePolicyRequest
     */
    'Name'?: string;
    /**
     * 
     * @type {PolicyDocument}
     * @memberof CreatePolicyRequest
     */
    'PolicyDocument'?: PolicyDocument;
    /**
     * 权限组类型：IDENTITY | RESOURCE
     * @type {string}
     * @memberof CreatePolicyRequest
     */
    'PolicyType'?: string;
    /**
     * 适用的资源类型
     * @type {Array<string>}
     * @memberof CreatePolicyRequest
     */
    'ResourceType'?: CreatePolicyRequestResourceTypeEnum;
}

export const CreatePolicyRequestResourceTypeEnum = {
} as const;

export type CreatePolicyRequestResourceTypeEnum = typeof CreatePolicyRequestResourceTypeEnum[keyof typeof CreatePolicyRequestResourceTypeEnum];

/**
 * 
 * @export
 * @interface CreateProgram200Response
 */
export interface CreateProgram200Response {
    /**
     * 
     * @type {CreateProgram200ResponseResponse}
     * @memberof CreateProgram200Response
     */
    'Response'?: CreateProgram200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateProgram200ResponseResponse
 */
export interface CreateProgram200ResponseResponse {
    /**
     * 
     * @type {ProgramProgram}
     * @memberof CreateProgram200ResponseResponse
     */
    'Data'?: ProgramProgram;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateProgram200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProgramMemberPolicy200Response
 */
export interface CreateProgramMemberPolicy200Response {
    /**
     * 
     * @type {CreateProgramMemberPolicy200ResponseResponse}
     * @memberof CreateProgramMemberPolicy200Response
     */
    'Response'?: CreateProgramMemberPolicy200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateProgramMemberPolicy200ResponseResponse
 */
export interface CreateProgramMemberPolicy200ResponseResponse {
    /**
     * 
     * @type {Array<ProgramProgramMemberPolicy>}
     * @memberof CreateProgramMemberPolicy200ResponseResponse
     */
    'Data'?: Array<ProgramProgramMemberPolicy>;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateProgramMemberPolicy200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProgramMemberPolicyRequest
 */
export interface CreateProgramMemberPolicyRequest {
    /**
     * 权限策略，默认策略名或者策略 ID
     * @type {Array<string>}
     * @memberof CreateProgramMemberPolicyRequest
     */
    'Policies'?: Array<string>;
    /**
     * 身份 ID
     * @type {string}
     * @memberof CreateProgramMemberPolicyRequest
     */
    'PrincipalId'?: string;
    /**
     * 身份类型
     * @type {string}
     * @memberof CreateProgramMemberPolicyRequest
     */
    'PrincipalType'?: CreateProgramMemberPolicyRequestPrincipalTypeEnum;
    /**
     * 项目集 ID
     * @type {number}
     * @memberof CreateProgramMemberPolicyRequest
     */
    'ProgramId'?: number;
}

export const CreateProgramMemberPolicyRequestPrincipalTypeEnum = {
    User: 'USER',
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT'
} as const;

export type CreateProgramMemberPolicyRequestPrincipalTypeEnum = typeof CreateProgramMemberPolicyRequestPrincipalTypeEnum[keyof typeof CreateProgramMemberPolicyRequestPrincipalTypeEnum];

/**
 * 
 * @export
 * @interface CreateProgramProjects200Response
 */
export interface CreateProgramProjects200Response {
    /**
     * 
     * @type {CreateProgramProjects200ResponseResponse}
     * @memberof CreateProgramProjects200Response
     */
    'Response'?: CreateProgramProjects200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateProgramProjects200ResponseResponse
 */
export interface CreateProgramProjects200ResponseResponse {
    /**
     * 
     * @type {Array<ProgramProgram>}
     * @memberof CreateProgramProjects200ResponseResponse
     */
    'Data'?: Array<ProgramProgram>;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateProgramProjects200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProgramProjectsRequest
 */
export interface CreateProgramProjectsRequest {
    /**
     * 项目集 ID
     * @type {number}
     * @memberof CreateProgramProjectsRequest
     */
    'ProgramId'?: number;
    /**
     * 项目 ID
     * @type {Array<number>}
     * @memberof CreateProgramProjectsRequest
     */
    'ProjectId'?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateProgramRequest
 */
export interface CreateProgramRequest {
    /**
     * 描述信息
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'Description'?: string;
    /**
     * 展示名
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'DisplayName'?: string;
    /**
     * 截止时间
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'EndDate'?: string;
    /**
     * 项目集名
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'Name'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'StartDate'?: string;
    /**
     * 已有工作流项目集 Id
     * @type {string}
     * @memberof CreateProgramRequest
     */
    'WorkflowProgramId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectAnnouncement200Response
 */
export interface CreateProjectAnnouncement200Response {
    /**
     * 
     * @type {CreateProjectAnnouncement200ResponseResponse}
     * @memberof CreateProjectAnnouncement200Response
     */
    'Response'?: CreateProjectAnnouncement200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateProjectAnnouncement200ResponseResponse
 */
export interface CreateProjectAnnouncement200ResponseResponse {
    /**
     * 
     * @type {ProjectAnnouncementProjectAnnouncement}
     * @memberof CreateProjectAnnouncement200ResponseResponse
     */
    'ProjectAnnouncement'?: ProjectAnnouncementProjectAnnouncement;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateProjectAnnouncement200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectAnnouncementRequest
 */
export interface CreateProjectAnnouncementRequest {
    /**
     * 项目名
     * @type {string}
     * @memberof CreateProjectAnnouncementRequest
     */
    'ProjectName'?: string;
    /**
     * 公告内容
     * @type {string}
     * @memberof CreateProjectAnnouncementRequest
     */
    'Content'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectLabelRequest
 */
export interface CreateProjectLabelRequest {
    /**
     * 项目ID
     * @type {number}
     * @memberof CreateProjectLabelRequest
     */
    'ProjectId'?: number;
    /**
     * 标签名
     * @type {string}
     * @memberof CreateProjectLabelRequest
     */
    'Name'?: string;
    /**
     * 颜色
     * @type {string}
     * @memberof CreateProjectLabelRequest
     */
    'Color'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectMemberPrincipalRequest
 */
export interface CreateProjectMemberPrincipalRequest {
    /**
     * 成员主体信息
     * @type {Array<PrincipalAdd>}
     * @memberof CreateProjectMemberPrincipalRequest
     */
    'Principals'?: Array<PrincipalAdd>;
    /**
     * 项目Id
     * @type {number}
     * @memberof CreateProjectMemberPrincipalRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface CreateProjectWithTemplate200Response
 */
export interface CreateProjectWithTemplate200Response {
    /**
     * 
     * @type {CreateProjectWithTemplate200ResponseResponse}
     * @memberof CreateProjectWithTemplate200Response
     */
    'Response'?: CreateProjectWithTemplate200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateProjectWithTemplate200ResponseResponse
 */
export interface CreateProjectWithTemplate200ResponseResponse {
    /**
     * 项目Id
     * @type {number}
     * @memberof CreateProjectWithTemplate200ResponseResponse
     */
    'ProjectId'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateProjectWithTemplate200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectWithTemplateRequest
 */
export interface CreateProjectWithTemplateRequest {
    /**
     * 项目描述
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Description'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'DisplayName'?: string;
    /**
     * 项目图标
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Icon'?: string;
    /**
     * 隐藏项目在 CODING 入口不可见  true 不可见|false 可见
     * @type {boolean}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Invisible'?: boolean;
    /**
     * 标签(TKE、TCB、SLS、QUICKSTART、APIGW)
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Label'?: CreateProjectWithTemplateRequestLabelEnum;
    /**
     * 项目标识
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Name'?: string;
    /**
     * 项目模版 CODE_HOST 代码托管项目， PROJECT_MANAGE 项目管理项目， DEV_OPS DevOps项目， DEMO_BEGIN 范例项目
     * @type {string}
     * @memberof CreateProjectWithTemplateRequest
     */
    'ProjectTemplate'?: CreateProjectWithTemplateRequestProjectTemplateEnum;
    /**
     * 0： 不公开 1：公开源代码
     * @type {number}
     * @memberof CreateProjectWithTemplateRequest
     */
    'Shared'?: number;
}

export const CreateProjectWithTemplateRequestLabelEnum = {
    Tke: 'TKE',
    Tcb: 'TCB',
    Sls: 'SLS',
    Quickstart: 'QUICKSTART',
    Apigw: 'APIGW'
} as const;

export type CreateProjectWithTemplateRequestLabelEnum = typeof CreateProjectWithTemplateRequestLabelEnum[keyof typeof CreateProjectWithTemplateRequestLabelEnum];
export const CreateProjectWithTemplateRequestProjectTemplateEnum = {
    DevOps: 'DEV_OPS',
    DemoBegin: 'DEMO_BEGIN',
    ChoiceDemand: 'CHOICE_DEMAND',
    ProjectManage: 'PROJECT_MANAGE',
    CodeHost: 'CODE_HOST'
} as const;

export type CreateProjectWithTemplateRequestProjectTemplateEnum = typeof CreateProjectWithTemplateRequestProjectTemplateEnum[keyof typeof CreateProjectWithTemplateRequestProjectTemplateEnum];

/**
 * 
 * @export
 * @interface CreateReadOnlyRefRequest
 */
export interface CreateReadOnlyRefRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof CreateReadOnlyRefRequest
     */
    'DepotPath'?: string;
    /**
     * 分支名称
     * @type {string}
     * @memberof CreateReadOnlyRefRequest
     */
    'RefName'?: string;
}
/**
 * 
 * @export
 * @interface CreateReleaseRequest
 */
export interface CreateReleaseRequest {
    /**
     * 版本处理人ID
     * @type {number}
     * @memberof CreateReleaseRequest
     */
    'Assignee'?: number;
    /**
     * 版本描述
     * @type {string}
     * @memberof CreateReleaseRequest
     */
    'Description'?: string;
    /**
     * 关联迭代code列表
     * @type {Array<number>}
     * @memberof CreateReleaseRequest
     */
    'IterationCodes'?: Array<number>;
    /**
     * 标签ID列表
     * @type {Array<number>}
     * @memberof CreateReleaseRequest
     */
    'LabelIds'?: Array<number>;
    /**
     * 版本名称
     * @type {string}
     * @memberof CreateReleaseRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateReleaseRequest
     */
    'ProjectName'?: string;
    /**
     * 版本发布日期
     * @type {string}
     * @memberof CreateReleaseRequest
     */
    'ReleaseDate'?: string;
    /**
     * 版本开始时间
     * @type {string}
     * @memberof CreateReleaseRequest
     */
    'StartDate'?: string;
}
/**
 * 
 * @export
 * @interface CreateReport200Response
 */
export interface CreateReport200Response {
    /**
     * 
     * @type {CreateReport200ResponseResponse}
     * @memberof CreateReport200Response
     */
    'Response'?: CreateReport200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateReport200ResponseResponse
 */
export interface CreateReport200ResponseResponse {
    /**
     * 
     * @type {ReportLittleData}
     * @memberof CreateReport200ResponseResponse
     */
    'Data'?: ReportLittleData;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateReport200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateReportRequest
 */
export interface CreateReportRequest {
    /**
     * 附件 ID 数组：来自“生成附件预上传信息”接口
     * @type {Array<number>}
     * @memberof CreateReportRequest
     */
    'AttachmentIds'?: Array<number>;
    /**
     * 测试报告标题
     * @type {string}
     * @memberof CreateReportRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateReportRequest
     */
    'ProjectName'?: string;
    /**
     * 测试计划 ID 数组
     * @type {Array<number>}
     * @memberof CreateReportRequest
     */
    'RunIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface CreateRequirementDefectRelationRequest
 */
export interface CreateRequirementDefectRelationRequest {
    /**
     * 缺陷 Code
     * @type {number}
     * @memberof CreateRequirementDefectRelationRequest
     */
    'DefectCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateRequirementDefectRelationRequest
     */
    'ProjectName'?: string;
    /**
     * 需求 Code
     * @type {number}
     * @memberof CreateRequirementDefectRelationRequest
     */
    'RequirementCode'?: number;
}
/**
 * 
 * @export
 * @interface CreateServiceHook200Response
 */
export interface CreateServiceHook200Response {
    /**
     * 
     * @type {ModifyServiceHook200ResponseResponse}
     * @memberof CreateServiceHook200Response
     */
    'Response'?: ModifyServiceHook200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateServiceHookRequest
 */
export interface CreateServiceHookRequest {
    /**
     * 发送方式属性
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'ActionProperty'?: string;
    /**
     * 事件开关
     * @type {boolean}
     * @memberof CreateServiceHookRequest
     */
    'Enabled'?: boolean;
    /**
     * 事件名，取值范围：ITERATION_CREATED,ITERATION_DELETED,ITERATION_UPDATED,ISSUE_CREATED,ISSUE_DELETED,ISSUE_COMMENT_CREATED,ISSUE_STATUS_UPDATED,ISSUE_ASSIGNEE_CHANGED,ISSUE_ITERATION_CHANGED,ISSUE_RELATIONSHIP_CHANGED,ISSUE_UPDATED,GIT_PUSHED,GIT_MR_CREATED,GIT_MR_UPDATED,GIT_MR_MERGED,GIT_MR_CLOSED,ARTIFACTS_VERSION_CREATED,ARTIFACTS_VERSION_UPDATED,ARTIFACTS_VERSION_DOWNLOADED,ARTIFACTS_VERSION_DELETED,ARTIFACTS_VERSION_RELEASED,ARTIFACTS_VERSION_DOWNLOAD_FORBIDDEN,ARTIFACTS_VERSION_DOWNLOAD_ALLOWED,ARTIFACTS_VERSION_DOWNLOAD_BLOCKED,ARTIFACTS_REPO_CREATED,ARTIFACTS_REPO_UPDATED,ARTIFACTS_REPO_DELETED,CI_JOB_CREATED,CI_JOB_UPDATED,CI_JOB_DELETED,CI_JOB_STARTED,CI_JOB_FINISHED,FILE_CREATED,FILE_UPDATED,FILE_RENAMED,FILE_SHARE_UPDATED,FILE_MOVED,FILE_COPIED,FILE_MOVED_TO_RECYCLE_BIN,FILE_RESTORED_FROM_RECYCLE_BIN,FILE_DELETED,WIKI_CREATED,WIKI_UPDATED,WIKI_MOVED,WIKI_SHARE_UPDATED,WIKI_ACCESS_UPDATED,WIKI_COPIED,WIKI_MOVED_TO_RECYCLE_BIN,WIKI_RESTORED_FROM_RECYCLE_BIN,WIKI_DELETED,MEMBER_CREATED,MEMBER_DELETED,MEMBER_ROLE_UPDATED,TEST_PLAN_CREATED, TEST_PLAN_UPDATED, TEST_PLAN_FINISHED, TEST_TASK_ASSIGNED, TEST_REPORT_CREATED, FLEXIBLE_TESTX_REVIEW_CREATED, FLEXIBLE_TESTX_REVIEW_COMMENTED, FLEXIBLE_TESTX_REVIEW_UPDATED, FLEXIBLE_TESTX_REVIEW_COMPLETED, FLEXIBLE_TESTX_PLAN_CREATED, FLEXIBLE_TESTX_PLAN_TASK_ASSIGNED, FLEXIBLE_TESTX_PLAN_UPDATED, FLEXIBLE_TESTX_PLAN_FINISHED, FLEXIBLE_TESTX_REPORT_CREATED, CODE_DOG_CREATE_JOB, CODE_DOG_RESULT_NOTIFY, PLAN_CREATED, PLAN_DELETED, PLAN_COMMENT_CREATED, PLAN_STATUE_CHANGED, PLAN_ASSIGNEE_CHANGED, PLAN_UPDATED, RISK_CREATED, RISK_DELETED, RISK_COMMENT_CREATED, RISK_STATUS_CHANGED, RISK_ASSIGNEE_CHANGED, RISK_UPDATED
     * @type {Array<string>}
     * @memberof CreateServiceHookRequest
     */
    'Event'?: CreateServiceHookRequestEventEnum;
    /**
     * 过滤器属性
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'FilterProperty'?: string;
    /**
     * 备注名
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'Name'?: string;
    /**
     * 项目编号或者研发空间编号
     * @type {number}
     * @memberof CreateServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 服务名，取值范围：WebHook、WeCom、DingDing、Jenkins、FeiShu。
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'Service'?: CreateServiceHookRequestServiceEnum;
    /**
     * 发送方式，取值范围：dingding_group_chat_robot,wecom_group_chat_robot,jenkins_generic_build_job,feishu_group_chat_robot,webhook_http_post,webhook_http_get
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'ServiceAction'?: CreateServiceHookRequestServiceActionEnum;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof CreateServiceHookRequest
     */
    'TargetType'?: CreateServiceHookRequestTargetTypeEnum;
}

export const CreateServiceHookRequestEventEnum = {
} as const;

export type CreateServiceHookRequestEventEnum = typeof CreateServiceHookRequestEventEnum[keyof typeof CreateServiceHookRequestEventEnum];
export const CreateServiceHookRequestServiceEnum = {
    WebHook: 'WebHook',
    WeCom: 'WeCom',
    DingDing: 'DingDing',
    Jenkins: 'Jenkins',
    FeiShu: 'FeiShu'
} as const;

export type CreateServiceHookRequestServiceEnum = typeof CreateServiceHookRequestServiceEnum[keyof typeof CreateServiceHookRequestServiceEnum];
export const CreateServiceHookRequestServiceActionEnum = {
    DingdingGroupChatRobot: 'dingding_group_chat_robot',
    WecomGroupChatRobot: 'wecom_group_chat_robot',
    JenkinsGenericBuildJob: 'jenkins_generic_build_job',
    FeishuGroupChatRobot: 'feishu_group_chat_robot',
    WebhookHttpPost: 'webhook_http_post',
    WebhookHttpGet: 'webhook_http_get'
} as const;

export type CreateServiceHookRequestServiceActionEnum = typeof CreateServiceHookRequestServiceActionEnum[keyof typeof CreateServiceHookRequestServiceActionEnum];
export const CreateServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type CreateServiceHookRequestTargetTypeEnum = typeof CreateServiceHookRequestTargetTypeEnum[keyof typeof CreateServiceHookRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface CreateSshKey200Response
 */
export interface CreateSshKey200Response {
    /**
     * 
     * @type {CreateMemberSshKey200ResponseResponse}
     * @memberof CreateSshKey200Response
     */
    'Response'?: CreateMemberSshKey200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateSshKeyRequest
 */
export interface CreateSshKeyRequest {
    /**
     * 公钥内容
     * @type {string}
     * @memberof CreateSshKeyRequest
     */
    'Content'?: string;
    /**
     * 过期时间，不填为永不过期 9999-12-31
     * @type {string}
     * @memberof CreateSshKeyRequest
     */
    'ExpirationDate'?: string;
    /**
     * 导入的 ssh key 标识名
     * @type {string}
     * @memberof CreateSshKeyRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateTestCase200Response
 */
export interface CreateTestCase200Response {
    /**
     * 
     * @type {CreateTestCase200ResponseResponse}
     * @memberof CreateTestCase200Response
     */
    'Response'?: CreateTestCase200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateTestCase200ResponseResponse
 */
export interface CreateTestCase200ResponseResponse {
    /**
     * 
     * @type {CaseDataSpecial}
     * @memberof CreateTestCase200ResponseResponse
     */
    'Data'?: CaseDataSpecial;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateTestCase200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateTestCaseRequest
 */
export interface CreateTestCaseRequest {
    /**
     * 附件 ID 数组：来自“生成附件预上传信息”接口
     * @type {Array<number>}
     * @memberof CreateTestCaseRequest
     */
    'AttachmentIds'?: Array<number>;
    /**
     * 自定义步骤（步骤用例必填）
     * @type {Array<CustomStep>}
     * @memberof CreateTestCaseRequest
     */
    'CustomSteps'?: Array<CustomStep>;
    /**
     * 预期结果 （适用于文本用例）
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'Expected'?: string;
    /**
     * 前置步骤
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'Preconds'?: string;
    /**
     * 优先级，默认2（中），可选值：0（紧急）,1（高）,2（中）,3（低）
     * @type {number}
     * @memberof CreateTestCaseRequest
     */
    'Priority'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'ProjectName'?: string;
    /**
     * 分组ID
     * @type {number}
     * @memberof CreateTestCaseRequest
     */
    'SectionId'?: number;
    /**
     * 文本描述（适用于文本用例）
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'Steps'?: string;
    /**
     * 用例类型，可选值：STEPS(步骤用例)，TEXT(文本用例)
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'TemplateType'?: string;
    /**
     * 用例标题
     * @type {string}
     * @memberof CreateTestCaseRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface CreateTestCaseSectionRequest
 */
export interface CreateTestCaseSectionRequest {
    /**
     * 分组名称
     * @type {string}
     * @memberof CreateTestCaseSectionRequest
     */
    'Name'?: string;
    /**
     * 父级 ID，默认 0
     * @type {number}
     * @memberof CreateTestCaseSectionRequest
     */
    'ParentId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestCaseSectionRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateTestDefectRequest
 */
export interface CreateTestDefectRequest {
    /**
     * 缺陷 ID
     * @type {number}
     * @memberof CreateTestDefectRequest
     */
    'DefectId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestDefectRequest
     */
    'ProjectName'?: string;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof CreateTestDefectRequest
     */
    'TestId'?: number;
}
/**
 * 
 * @export
 * @interface CreateTestResultRequest
 */
export interface CreateTestResultRequest {
    /**
     * 每一步的测试结果（步骤用例时需要本参数）
     * @type {Array<string>}
     * @memberof CreateTestResultRequest
     */
    'CustomStepStatus'?: Array<string>;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestResultRequest
     */
    'ProjectName'?: string;
    /**
     * 该任务的测试结果，可选值：UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
     * @type {string}
     * @memberof CreateTestResultRequest
     */
    'Status'?: string;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof CreateTestResultRequest
     */
    'TestId'?: number;
}
/**
 * 
 * @export
 * @interface CreateTestResultsRequest
 */
export interface CreateTestResultsRequest {
    /**
     * 测试用例 ID 数组
     * @type {Array<number>}
     * @memberof CreateTestResultsRequest
     */
    'CaseIds'?: Array<number>;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestResultsRequest
     */
    'ProjectName'?: string;
    /**
     * 测试计划 ID
     * @type {number}
     * @memberof CreateTestResultsRequest
     */
    'RunId'?: number;
    /**
     * 测试状态：UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
     * @type {string}
     * @memberof CreateTestResultsRequest
     */
    'Status'?: string;
}
/**
 * 
 * @export
 * @interface CreateTestRunRequest
 */
export interface CreateTestRunRequest {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'AssignedToId'?: number;
    /**
     * 包含的用例 ID 列表，IncludeAll=false 必填
     * @type {Array<number>}
     * @memberof CreateTestRunRequest
     */
    'Cases'?: Array<number>;
    /**
     * 环境标识
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'ConfigEnvironmentId'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof CreateTestRunRequest
     */
    'Description'?: string;
    /**
     * 执行类型：1-手动执行 2-自动化流水线执行
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'ExecuteType'?: number;
    /**
     * 项目代码库 ID
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'GitDepotId'?: number;
    /**
     * 发布版本 ID
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'GitReleaseId'?: number;
    /**
     * 是否包含全部用例
     * @type {boolean}
     * @memberof CreateTestRunRequest
     */
    'IncludeAll'?: boolean;
    /**
     * 标题
     * @type {string}
     * @memberof CreateTestRunRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestRunRequest
     */
    'ProjectName'?: string;
    /**
     * 分组 ID
     * @type {number}
     * @memberof CreateTestRunRequest
     */
    'SectionId'?: number;
}
/**
 * 
 * @export
 * @interface CreateTestStepResultRequest
 */
export interface CreateTestStepResultRequest {
    /**
     * 该步骤的实际测试结果
     * @type {string}
     * @memberof CreateTestStepResultRequest
     */
    'Actual'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateTestStepResultRequest
     */
    'ProjectName'?: string;
    /**
     * 该任务的测试结果，可选值：UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
     * @type {string}
     * @memberof CreateTestStepResultRequest
     */
    'Status'?: string;
    /**
     * 步骤的索引顺序，起始值为 1
     * @type {number}
     * @memberof CreateTestStepResultRequest
     */
    'StepIndex'?: number;
    /**
     * 该步骤的测试结果，可选值：PASSED:通过,FAILED:失败
     * @type {string}
     * @memberof CreateTestStepResultRequest
     */
    'StepStatus'?: string;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof CreateTestStepResultRequest
     */
    'TestId'?: number;
}
/**
 * 
 * @export
 * @interface CreateUploadToken200Response
 */
export interface CreateUploadToken200Response {
    /**
     * 
     * @type {CreateUploadToken200ResponseResponse}
     * @memberof CreateUploadToken200Response
     */
    'Response'?: CreateUploadToken200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateUploadToken200ResponseResponse
 */
export interface CreateUploadToken200ResponseResponse {
    /**
     * 
     * @type {Token}
     * @memberof CreateUploadToken200ResponseResponse
     */
    'Token'?: Token;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateUploadToken200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateUploadTokenRequest
 */
export interface CreateUploadTokenRequest {
    /**
     * 文件名
     * @type {string}
     * @memberof CreateUploadTokenRequest
     */
    'FileName'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateUploadTokenRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserGroup200Response
 */
export interface CreateUserGroup200Response {
    /**
     * 
     * @type {CreateUserGroup200ResponseResponse}
     * @memberof CreateUserGroup200Response
     */
    'Response'?: CreateUserGroup200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateUserGroup200ResponseResponse
 */
export interface CreateUserGroup200ResponseResponse {
    /**
     * id
     * @type {number}
     * @memberof CreateUserGroup200ResponseResponse
     */
    'Id'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateUserGroup200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserGroupRequest
 */
export interface CreateUserGroupRequest {
    /**
     * 用户组描述
     * @type {string}
     * @memberof CreateUserGroupRequest
     */
    'Description'?: string;
    /**
     * 用户组名称
     * @type {string}
     * @memberof CreateUserGroupRequest
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserGroupUsersRequest
 */
export interface CreateUserGroupUsersRequest {
    /**
     * 用户用户组id列表
     * @type {Array<UserGroupUserInfos>}
     * @memberof CreateUserGroupUsersRequest
     */
    'UserGroupUserInfos'?: Array<UserGroupUserInfos>;
}
/**
 * 
 * @export
 * @interface CreateWiki200Response
 */
export interface CreateWiki200Response {
    /**
     * 
     * @type {ModifyWiki200ResponseResponse}
     * @memberof CreateWiki200Response
     */
    'Response'?: ModifyWiki200ResponseResponse;
}
/**
 * 
 * @export
 * @interface CreateWikiByZip200Response
 */
export interface CreateWikiByZip200Response {
    /**
     * 
     * @type {CreateWikiByZip200ResponseResponse}
     * @memberof CreateWikiByZip200Response
     */
    'Response'?: CreateWikiByZip200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface CreateWikiByZip200ResponseResponse
 */
export interface CreateWikiByZip200ResponseResponse {
    /**
     * zip上传wiki 的任务id
     * @type {string}
     * @memberof CreateWikiByZip200ResponseResponse
     */
    'JobId'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof CreateWikiByZip200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface CreateWikiByZipRequest
 */
export interface CreateWikiByZipRequest {
    /**
     * 验证文件的token
     * @type {string}
     * @memberof CreateWikiByZipRequest
     */
    'AuthToken'?: string;
    /**
     * 文件名
     * @type {string}
     * @memberof CreateWikiByZipRequest
     */
    'FileName'?: string;
    /**
     * 上传文件的uuid名称 b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png
     * @type {string}
     * @memberof CreateWikiByZipRequest
     */
    'Key'?: string;
    /**
     * 父级iid
     * @type {number}
     * @memberof CreateWikiByZipRequest
     */
    'ParentIid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateWikiByZipRequest
     */
    'ProjectName'?: string;
    /**
     * 获取token的时间
     * @type {number}
     * @memberof CreateWikiByZipRequest
     */
    'Time'?: number;
}
/**
 * 
 * @export
 * @interface CreateWikiRequest
 */
export interface CreateWikiRequest {
    /**
     * Wiki内容
     * @type {string}
     * @memberof CreateWikiRequest
     */
    'Content'?: string;
    /**
     * 备注
     * @type {string}
     * @memberof CreateWikiRequest
     */
    'Msg'?: string;
    /**
     * 父级iid
     * @type {number}
     * @memberof CreateWikiRequest
     */
    'ParentIid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof CreateWikiRequest
     */
    'ProjectName'?: string;
    /**
     * Wiki标题
     * @type {string}
     * @memberof CreateWikiRequest
     */
    'Title'?: string;
}
/**
 * 凭据结构
 * @export
 * @interface Credential
 */
export interface Credential {
    /**
     * 凭据唯一 ID
     * @type {string}
     * @memberof Credential
     */
    'CredentialId'?: string;
    /**
     * 凭据名称
     * @type {string}
     * @memberof Credential
     */
    'Name'?: string;
}
/**
 * 当前用户信息
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 头像地址
     * @type {string}
     * @memberof CurrentUser
     */
    'Avatar'?: string | null;
    /**
     * 邮箱
     * @type {string}
     * @memberof CurrentUser
     */
    'Email'?: string | null;
    /**
     * 邮箱是否已验证
     * @type {number}
     * @memberof CurrentUser
     */
    'EmailValidation'?: number | null;
    /**
     * 用户唯一标志
     * @type {string}
     * @memberof CurrentUser
     */
    'GlobalKey'?: string | null;
    /**
     * 无用头像
     * @type {string}
     * @memberof CurrentUser
     */
    'Gravatar'?: string | null;
    /**
     * 用户 ID
     * @type {number}
     * @memberof CurrentUser
     */
    'Id'?: number;
    /**
     * 姓名
     * @type {string}
     * @memberof CurrentUser
     */
    'Name'?: string | null;
    /**
     * 姓名拼音
     * @type {string}
     * @memberof CurrentUser
     */
    'NamePinYin'?: string | null;
    /**
     * 联系电话
     * @type {string}
     * @memberof CurrentUser
     */
    'Phone'?: string | null;
    /**
     * 手机号地区
     * @type {string}
     * @memberof CurrentUser
     */
    'PhoneRegionCode'?: string | null;
    /**
     * 手机是否已验证
     * @type {number}
     * @memberof CurrentUser
     */
    'PhoneValidation'?: number | null;
    /**
     * 区号
     * @type {string}
     * @memberof CurrentUser
     */
    'Region'?: string | null;
    /**
     * 状态(新用户/已激活)
     * @type {number}
     * @memberof CurrentUser
     */
    'Status'?: number | null;
    /**
     * 团队 ID
     * @type {number}
     * @memberof CurrentUser
     */
    'TeamId'?: number | null;
    /**
     * 企微id
     * @type {string}
     * @memberof CurrentUser
     */
    'WeComId'?: string | null;
}
/**
 * 事项自定义属性变更日志
 * @export
 * @interface CustomFieldChangeLog
 */
export interface CustomFieldChangeLog {
    /**
     * 动作类型 
     * @type {string}
     * @memberof CustomFieldChangeLog
     */
    'ActionType'?: string | null;
    /**
     * 创建人ID 
     * @type {number}
     * @memberof CustomFieldChangeLog
     */
    'Creator'?: number | null;
    /**
     * 自定义属性ID 
     * @type {number}
     * @memberof CustomFieldChangeLog
     */
    'FieldId'?: number | null;
    /**
     * 自定义属性名字 
     * @type {string}
     * @memberof CustomFieldChangeLog
     */
    'FieldName'?: string | null;
    /**
     * 自定义属性类型 
     * @type {string}
     * @memberof CustomFieldChangeLog
     */
    'FieldType'?: string | null;
    /**
     * 自定义属性的值 
     * @type {string}
     * @memberof CustomFieldChangeLog
     */
    'FieldValue'?: string | null;
    /**
     * 事项id（不是页面上的ID，是数据库中的唯一ID）
     * @type {number}
     * @memberof CustomFieldChangeLog
     */
    'IssueId'?: number | null;
    /**
     * 更新时间戳 
     * @type {number}
     * @memberof CustomFieldChangeLog
     */
    'UpdatedAt'?: number | null;
}
/**
 * 自定义属性列表
 * @export
 * @interface CustomFields
 */
export interface CustomFields {
    /**
     * 自定义属性 Id
     * @type {number}
     * @memberof CustomFields
     */
    'Id'?: number;
    /**
     * 自定义属性名称
     * @type {string}
     * @memberof CustomFields
     */
    'Name'?: string;
    /**
     * 自定义属性值
     * @type {string}
     * @memberof CustomFields
     */
    'ValueString'?: string;
}
/**
 * 自定义步骤（步骤用例必填）
 * @export
 * @interface CustomStep
 */
export interface CustomStep {
    /**
     * 步骤
     * @type {string}
     * @memberof CustomStep
     */
    'Content': string;
    /**
     * 预期
     * @type {string}
     * @memberof CustomStep
     */
    'Expected': string;
}
/**
 * 缺陷类型
 * @export
 * @interface DefectType
 */
export interface DefectType {
    /**
     * 图标地址
     * @type {string}
     * @memberof DefectType
     */
    'IconUrl'?: string;
    /**
     * 缺陷类型 Id
     * @type {number}
     * @memberof DefectType
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof DefectType
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface DeleteAllUsersOnGroupRequest
 */
export interface DeleteAllUsersOnGroupRequest {
    /**
     * 用户组id
     * @type {number}
     * @memberof DeleteAllUsersOnGroupRequest
     */
    'GroupId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteArtifactPropertiesRequest
 */
export interface DeleteArtifactPropertiesRequest {
    /**
     * 包名
     * @type {string}
     * @memberof DeleteArtifactPropertiesRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof DeleteArtifactPropertiesRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DeleteArtifactPropertiesRequest
     */
    'ProjectId'?: number;
    /**
     * 属性名称列表（ 以 ‘coding.’ 作为属性名称开头的属性，将不可删除）
     * @type {Array<string>}
     * @memberof DeleteArtifactPropertiesRequest
     */
    'PropertyNameSet'?: Array<string>;
    /**
     * 仓库名
     * @type {string}
     * @memberof DeleteArtifactPropertiesRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DeleteBranchProtectionMemberRequest
 */
export interface DeleteBranchProtectionMemberRequest {
    /**
     * 保护分支规则id
     * @type {number}
     * @memberof DeleteBranchProtectionMemberRequest
     */
    'BranchProtectionId'?: number;
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteBranchProtectionMemberRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteBranchProtectionMemberRequest
     */
    'DepotPath'?: string;
    /**
     * 用户globalkey
     * @type {string}
     * @memberof DeleteBranchProtectionMemberRequest
     */
    'UserGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface DeleteBranchProtectionRequest
 */
export interface DeleteBranchProtectionRequest {
    /**
     * 保护分支 Id
     * @type {number}
     * @memberof DeleteBranchProtectionRequest
     */
    'BranchProtectionId'?: number;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DeleteBranchProtectionRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteBranchProtectionRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DeleteCdCloudAccountRequest
 */
export interface DeleteCdCloudAccountRequest {
    /**
     * 云账号 ID
     * @type {number}
     * @memberof DeleteCdCloudAccountRequest
     */
    'Id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteCdHostServerGroup200Response
 */
export interface DeleteCdHostServerGroup200Response {
    /**
     * 
     * @type {DeleteCdHostServerGroup200ResponseResponse}
     * @memberof DeleteCdHostServerGroup200Response
     */
    'Response'?: DeleteCdHostServerGroup200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DeleteCdHostServerGroup200ResponseResponse
 */
export interface DeleteCdHostServerGroup200ResponseResponse {
    /**
     * 请求id
     * @type {string}
     * @memberof DeleteCdHostServerGroup200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DeleteCdHostServerGroupRequest
 */
export interface DeleteCdHostServerGroupRequest {
    /**
     * 主机组 ID
     * @type {number}
     * @memberof DeleteCdHostServerGroupRequest
     */
    'Id'?: number;
}
/**
 * 
 * @export
 * @interface DeleteCdPipelineRequest
 */
export interface DeleteCdPipelineRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof DeleteCdPipelineRequest
     */
    'Application'?: string;
    /**
     * 部署流程名称
     * @type {string}
     * @memberof DeleteCdPipelineRequest
     */
    'PipelineName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteCodingCIJobRequest
 */
export interface DeleteCodingCIJobRequest {
    /**
     * 构建计划 ID
     * @type {number}
     * @memberof DeleteCodingCIJobRequest
     */
    'JobId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteDepartmentRequest
 */
export interface DeleteDepartmentRequest {
    /**
     * 部门ID
     * @type {number}
     * @memberof DeleteDepartmentRequest
     */
    'DepartmentId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteDepotFilePushRule200Response
 */
export interface DeleteDepotFilePushRule200Response {
    /**
     * 
     * @type {ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse}
     * @memberof DeleteDepotFilePushRule200Response
     */
    'Response'?: ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DeleteDepotFilePushRuleDenyPrivilege200Response
 */
export interface DeleteDepotFilePushRuleDenyPrivilege200Response {
    /**
     * 
     * @type {ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse}
     * @memberof DeleteDepotFilePushRuleDenyPrivilege200Response
     */
    'Response'?: ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DeleteDepotFilePushRuleDenyPrivilegeRequest
 */
export interface DeleteDepotFilePushRuleDenyPrivilegeRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'DepotPath'?: string;
    /**
     * 文件推送规则 ID
     * @type {number}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'FilePushRuleId'?: number;
    /**
     * 特权者是角色（IsUser和IsRole有且只能有一个为true）
     * @type {boolean}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'IsRole'?: boolean;
    /**
     * 特权者是用户（IsUser和IsRole有且只能有一个为true）
     * @type {boolean}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'IsUser'?: boolean;
    /**
     * 角色 ID
     * @type {number}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'RoleId'?: number;
    /**
     * 用户全局 key
     * @type {string}
     * @memberof DeleteDepotFilePushRuleDenyPrivilegeRequest
     */
    'UserGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface DeleteDepotFilePushRuleRequest
 */
export interface DeleteDepotFilePushRuleRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteDepotFilePushRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 文件推送规则 ID
     * @type {number}
     * @memberof DeleteDepotFilePushRuleRequest
     */
    'FilePushRuleId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteGitBranchRequest
 */
export interface DeleteGitBranchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DeleteGitBranchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DeleteGitBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitDeployKeyRequest
 */
export interface DeleteGitDeployKeyRequest {
    /**
     * SSH Key Id
     * @type {number}
     * @memberof DeleteGitDeployKeyRequest
     */
    'DeployKeyId'?: number;
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitDeployKeyRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteGitDeployKeyRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitDepotRequest
 */
export interface DeleteGitDepotRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitDepotRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DeleteGitDepotRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitFiles200Response
 */
export interface DeleteGitFiles200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof DeleteGitFiles200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DeleteGitFilesRequest
 */
export interface DeleteGitFilesRequest {
    /**
     * 提交信息
     * @type {string}
     * @memberof DeleteGitFilesRequest
     */
    'CommitMessage'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitFilesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DeleteGitFilesRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径列表
     * @type {Array<string>}
     * @memberof DeleteGitFilesRequest
     */
    'Paths'?: Array<string>;
    /**
     * 分支名
     * @type {string}
     * @memberof DeleteGitFilesRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitMergedBranchesRequest
 */
export interface DeleteGitMergedBranchesRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DeleteGitMergedBranchesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DeleteGitMergedBranchesRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitProtectedTagRuleRequest
 */
export interface DeleteGitProtectedTagRuleRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DeleteGitProtectedTagRuleRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteGitProtectedTagRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 保护规则
     * @type {string}
     * @memberof DeleteGitProtectedTagRuleRequest
     */
    'Rule'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitReleaseRequest
 */
export interface DeleteGitReleaseRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitReleaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteGitReleaseRequest
     */
    'DepotPath'?: string;
    /**
     * 描述
     * @type {string}
     * @memberof DeleteGitReleaseRequest
     */
    'TagName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteGitTagRequest
 */
export interface DeleteGitTagRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DeleteGitTagRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteGitTagRequest
     */
    'DepotPath'?: string;
    /**
     * tag名称
     * @type {string}
     * @memberof DeleteGitTagRequest
     */
    'TagName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteIssueBlockRequest
 */
export interface DeleteIssueBlockRequest {
    /**
     * 前置事项 Code
     * @type {number}
     * @memberof DeleteIssueBlockRequest
     */
    'BlockIssueCode'?: number;
    /**
     * 事项 Code
     * @type {number}
     * @memberof DeleteIssueBlockRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteIssueBlockRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteIssueModuleRequest
 */
export interface DeleteIssueModuleRequest {
    /**
     * 模块ID
     * @type {number}
     * @memberof DeleteIssueModuleRequest
     */
    'ModuleId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteIssueModuleRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteIssueRequest
 */
export interface DeleteIssueRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DeleteIssueRequest
     */
    'IssueCode'?: number;
    /**
     * 事项类型，可不填
     * @type {string}
     * @memberof DeleteIssueRequest
     */
    'IssueType'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteIssueRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteIssueWorkHoursRequest
 */
export interface DeleteIssueWorkHoursRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DeleteIssueWorkHoursRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteIssueWorkHoursRequest
     */
    'ProjectName'?: string;
    /**
     * 是否将该工时日志的使用工时归还到剩余工时，默认：false
     * @type {boolean}
     * @memberof DeleteIssueWorkHoursRequest
     */
    'RollbackRemainingHours'?: boolean;
    /**
     * 工时日志 Id
     * @type {number}
     * @memberof DeleteIssueWorkHoursRequest
     */
    'WorkHourLogId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteIterationRequest
 */
export interface DeleteIterationRequest {
    /**
     * 迭代编号
     * @type {number}
     * @memberof DeleteIterationRequest
     */
    'IterationCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteIterationRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteMemberSshKeyRequest
 */
export interface DeleteMemberSshKeyRequest {
    /**
     * 成员 Id
     * @type {number}
     * @memberof DeleteMemberSshKeyRequest
     */
    'MemberUserId'?: number;
    /**
     * ssh id
     * @type {number}
     * @memberof DeleteMemberSshKeyRequest
     */
    'SshKeyId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteMergeRequestNote200Response
 */
export interface DeleteMergeRequestNote200Response {
    /**
     * 
     * @type {CreateMergeRequestNote200ResponseResponse}
     * @memberof DeleteMergeRequestNote200Response
     */
    'Response'?: CreateMergeRequestNote200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DeleteMergeRequestNoteRequest
 */
export interface DeleteMergeRequestNoteRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DeleteMergeRequestNoteRequest
     */
    'DepotPath'?: string;
    /**
     * 行评论Id
     * @type {number}
     * @memberof DeleteMergeRequestNoteRequest
     */
    'LineNoteId'?: number;
    /**
     * 合并请求的Iid
     * @type {number}
     * @memberof DeleteMergeRequestNoteRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteMergeRequestReviewer200Response
 */
export interface DeleteMergeRequestReviewer200Response {
    /**
     * 
     * @type {DeleteMergeRequestReviewer200ResponseResponse}
     * @memberof DeleteMergeRequestReviewer200Response
     */
    'Response'?: DeleteMergeRequestReviewer200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DeleteMergeRequestReviewer200ResponseResponse
 */
export interface DeleteMergeRequestReviewer200ResponseResponse {
    /**
     * 创建合并请求的信息
     * @type {Array<CodingUser>}
     * @memberof DeleteMergeRequestReviewer200ResponseResponse
     */
    'Reviewers'?: Array<CodingUser>;
    /**
     * 请求id
     * @type {string}
     * @memberof DeleteMergeRequestReviewer200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DeleteMergeRequestReviewerRequest
 */
export interface DeleteMergeRequestReviewerRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DeleteMergeRequestReviewerRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DeleteMergeRequestReviewerRequest
     */
    'DepotPath'?: string;
    /**
     * iid
     * @type {number}
     * @memberof DeleteMergeRequestReviewerRequest
     */
    'MergeId'?: number;
    /**
     * 评审者的GK
     * @type {string}
     * @memberof DeleteMergeRequestReviewerRequest
     */
    'ReviewerGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface DeleteOneProjectRequest
 */
export interface DeleteOneProjectRequest {
    /**
     * 项目Id
     * @type {number}
     * @memberof DeleteOneProjectRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DeletePoliciesById200Response
 */
export interface DeletePoliciesById200Response {
    /**
     * 
     * @type {DeletePoliciesById200ResponseResponse}
     * @memberof DeletePoliciesById200Response
     */
    'Response'?: DeletePoliciesById200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DeletePoliciesById200ResponseResponse
 */
export interface DeletePoliciesById200ResponseResponse {
    /**
     * 成功删除的权限组 ID
     * @type {Array<number>}
     * @memberof DeletePoliciesById200ResponseResponse
     */
    'DeletedPolicyId'?: Array<number> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DeletePoliciesById200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DeletePoliciesByIdRequest
 */
export interface DeletePoliciesByIdRequest {
    /**
     * 权限组 ID
     * @type {Array<number>}
     * @memberof DeletePoliciesByIdRequest
     */
    'Id'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteProgramMemberPolicy200Response
 */
export interface DeleteProgramMemberPolicy200Response {
    /**
     * 
     * @type {DeleteProgramMemberPolicy200ResponseResponse}
     * @memberof DeleteProgramMemberPolicy200Response
     */
    'Response'?: DeleteProgramMemberPolicy200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DeleteProgramMemberPolicy200ResponseResponse
 */
export interface DeleteProgramMemberPolicy200ResponseResponse {
    /**
     * 
     * @type {Array<ProgramProgramMemberPolicy>}
     * @memberof DeleteProgramMemberPolicy200ResponseResponse
     */
    'Data'?: Array<ProgramProgramMemberPolicy>;
    /**
     * 请求id
     * @type {string}
     * @memberof DeleteProgramMemberPolicy200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DeleteProgramMemberPolicyRequest
 */
export interface DeleteProgramMemberPolicyRequest {
    /**
     * 权限策略，默认策略名或者策略 ID
     * @type {Array<string>}
     * @memberof DeleteProgramMemberPolicyRequest
     */
    'Policies'?: Array<string>;
    /**
     * 身份 ID
     * @type {string}
     * @memberof DeleteProgramMemberPolicyRequest
     */
    'PrincipalId'?: string;
    /**
     * 身份类型
     * @type {string}
     * @memberof DeleteProgramMemberPolicyRequest
     */
    'PrincipalType'?: DeleteProgramMemberPolicyRequestPrincipalTypeEnum;
    /**
     * 项目集 ID
     * @type {number}
     * @memberof DeleteProgramMemberPolicyRequest
     */
    'ProgramId'?: number;
}

export const DeleteProgramMemberPolicyRequestPrincipalTypeEnum = {
    User: 'USER',
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT'
} as const;

export type DeleteProgramMemberPolicyRequestPrincipalTypeEnum = typeof DeleteProgramMemberPolicyRequestPrincipalTypeEnum[keyof typeof DeleteProgramMemberPolicyRequestPrincipalTypeEnum];

/**
 * 
 * @export
 * @interface DeleteProjectAnnouncementRequest
 */
export interface DeleteProjectAnnouncementRequest {
    /**
     * 项目名
     * @type {string}
     * @memberof DeleteProjectAnnouncementRequest
     */
    'ProjectName'?: string;
    /**
     * 要删除的公告ID列表
     * @type {Array<number>}
     * @memberof DeleteProjectAnnouncementRequest
     */
    'Id'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteProjectLabel200Response
 */
export interface DeleteProjectLabel200Response {
    /**
     * 
     * @type {EnabledServiceHook200ResponseResponse}
     * @memberof DeleteProjectLabel200Response
     */
    'Response'?: EnabledServiceHook200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DeleteProjectLabelRequest
 */
export interface DeleteProjectLabelRequest {
    /**
     * 项目ID
     * @type {number}
     * @memberof DeleteProjectLabelRequest
     */
    'ProjectId'?: number;
    /**
     * 标签Id
     * @type {number}
     * @memberof DeleteProjectLabelRequest
     */
    'LabelId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteProjectMemberPrincipalRequest
 */
export interface DeleteProjectMemberPrincipalRequest {
    /**
     * 成员主体信息
     * @type {Array<PrincipalDel>}
     * @memberof DeleteProjectMemberPrincipalRequest
     */
    'Principals'?: Array<PrincipalDel>;
    /**
     * 项目Id
     * @type {number}
     * @memberof DeleteProjectMemberPrincipalRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteReleaseRequest
 */
export interface DeleteReleaseRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteReleaseRequest
     */
    'ProjectName'?: string;
    /**
     * 版本code
     * @type {number}
     * @memberof DeleteReleaseRequest
     */
    'ReleaseCode'?: number;
}
/**
 * 
 * @export
 * @interface DeleteReportRequest
 */
export interface DeleteReportRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteReportRequest
     */
    'ProjectName'?: string;
    /**
     * 测试报告 ID
     * @type {number}
     * @memberof DeleteReportRequest
     */
    'ReportId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteServiceHookRequest
 */
export interface DeleteServiceHookRequest {
    /**
     * Service Hook 编号
     * @type {Array<string>}
     * @memberof DeleteServiceHookRequest
     */
    'Id'?: Array<string>;
    /**
     * 项目编号或者研发空间编号
     * @type {number}
     * @memberof DeleteServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof DeleteServiceHookRequest
     */
    'TargetType'?: DeleteServiceHookRequestTargetTypeEnum;
}

export const DeleteServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type DeleteServiceHookRequestTargetTypeEnum = typeof DeleteServiceHookRequestTargetTypeEnum[keyof typeof DeleteServiceHookRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface DeleteSshKeyRequest
 */
export interface DeleteSshKeyRequest {
    /**
     * ssh id
     * @type {number}
     * @memberof DeleteSshKeyRequest
     */
    'SshKeyId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteTeamLevelDepotSpecRequest
 */
export interface DeleteTeamLevelDepotSpecRequest {
    /**
     * 仓库规范名字
     * @type {string}
     * @memberof DeleteTeamLevelDepotSpecRequest
     */
    'DepotSpecName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTeamMemberRequest
 */
export interface DeleteTeamMemberRequest {
    /**
     * 用户Id
     * @type {number}
     * @memberof DeleteTeamMemberRequest
     */
    'UserId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteTestCaseRequest
 */
export interface DeleteTestCaseRequest {
    /**
     * 用例 ID
     * @type {number}
     * @memberof DeleteTestCaseRequest
     */
    'CaseId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteTestCaseRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTestCaseSectionRequest
 */
export interface DeleteTestCaseSectionRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteTestCaseSectionRequest
     */
    'ProjectName'?: string;
    /**
     * 分组 ID
     * @type {number}
     * @memberof DeleteTestCaseSectionRequest
     */
    'SectionId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteTestRunRequest
 */
export interface DeleteTestRunRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteTestRunRequest
     */
    'ProjectName'?: string;
    /**
     * 计划 ID
     * @type {number}
     * @memberof DeleteTestRunRequest
     */
    'RunId'?: number;
}
/**
 * 
 * @export
 * @interface DeleteUserGroupByIdsRequest
 */
export interface DeleteUserGroupByIdsRequest {
    /**
     * 用户组id列表
     * @type {Array<number>}
     * @memberof DeleteUserGroupByIdsRequest
     */
    'GroupIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteUserGroupUsersRequest
 */
export interface DeleteUserGroupUsersRequest {
    /**
     * 用户组用户信息
     * @type {Array<UserGroupUserInfos>}
     * @memberof DeleteUserGroupUsersRequest
     */
    'UserGroupUserInfos'?: Array<UserGroupUserInfos>;
}
/**
 * 
 * @export
 * @interface DeleteWikiRequest
 */
export interface DeleteWikiRequest {
    /**
     * wiki编号
     * @type {number}
     * @memberof DeleteWikiRequest
     */
    'Iid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DeleteWikiRequest
     */
    'ProjectName'?: string;
}
/**
 * 部门信息
 * @export
 * @interface DepartmentDepartmentData
 */
export interface DepartmentDepartmentData {
    /**
     * 创建人ID
     * @type {number}
     * @memberof DepartmentDepartmentData
     */
    'CreatorId': number;
    /**
     * 部门ID
     * @type {number}
     * @memberof DepartmentDepartmentData
     */
    'Id': number;
    /**
     * 部门名
     * @type {string}
     * @memberof DepartmentDepartmentData
     */
    'Name': string;
    /**
     * 父级部门ID
     * @type {number}
     * @memberof DepartmentDepartmentData
     */
    'ParentId': number;
    /**
     * 排序值
     * @type {number}
     * @memberof DepartmentDepartmentData
     */
    'Sort': number;
    /**
     * 团队ID
     * @type {number}
     * @memberof DepartmentDepartmentData
     */
    'TeamId': number;
}
/**
 * 关联的 部门等信息
 * @export
 * @interface DepartmentDepartmentMemberRef
 */
export interface DepartmentDepartmentMemberRef {
    /**
     * 是否部门负责人
     * @type {boolean}
     * @memberof DepartmentDepartmentMemberRef
     */
    'Assignee': boolean;
    /**
     * 部门ID
     * @type {number}
     * @memberof DepartmentDepartmentMemberRef
     */
    'DepartmentId': number;
    /**
     * 部门成员ID
     * @type {number}
     * @memberof DepartmentDepartmentMemberRef
     */
    'DepartmentMemberId': number;
    /**
     * 部门名
     * @type {string}
     * @memberof DepartmentDepartmentMemberRef
     */
    'DepartmentName': string;
    /**
     * 部门描述ID
     * @type {string}
     * @memberof DepartmentDepartmentMemberRef
     */
    'DescribeId': string;
    /**
     * 是否是当前查询部门的直接成员
     * @type {boolean}
     * @memberof DepartmentDepartmentMemberRef
     */
    'Pointer': boolean;
    /**
     * 部门用户的refId
     * @type {number}
     * @memberof DepartmentDepartmentMemberRef
     */
    'RefId': number;
}
/**
 * 部门成员信息
 * @export
 * @interface DepartmentDepartmentMembersData
 */
export interface DepartmentDepartmentMembersData {
    /**
     * 是否授权 实际表示已加入或已被授权，如果要表示 已授权未加入(allowed && userId>0)
     * @type {boolean}
     * @memberof DepartmentDepartmentMembersData
     */
    'Allowed': boolean;
    /**
     * 头像
     * @type {string}
     * @memberof DepartmentDepartmentMembersData
     */
    'Avatar': string;
    /**
     * 是否被锁定
     * @type {boolean}
     * @memberof DepartmentDepartmentMembersData
     */
    'Locked': boolean;
    /**
     * 成员名
     * @type {string}
     * @memberof DepartmentDepartmentMembersData
     */
    'Name': string;
    /**
     * 是否部门所有者
     * @type {boolean}
     * @memberof DepartmentDepartmentMembersData
     */
    'Owner': boolean;
    /**
     * 部门用户的refId
     * @type {number}
     * @memberof DepartmentDepartmentMembersData
     */
    'RefId': number;
    /**
     * 关联的 部门等信息
     * @type {Array<DepartmentDepartmentMemberRef>}
     * @memberof DepartmentDepartmentMembersData
     */
    'Refs': Array<DepartmentDepartmentMemberRef>;
    /**
     * 三方头像
     * @type {string}
     * @memberof DepartmentDepartmentMembersData
     */
    'ThirdPartyAvatar': string;
    /**
     * 三方名
     * @type {string}
     * @memberof DepartmentDepartmentMembersData
     */
    'ThirdPartyName': string;
    /**
     * 用户GK
     * @type {string}
     * @memberof DepartmentDepartmentMembersData
     */
    'UserGlobalKey': string;
    /**
     * 用户ID
     * @type {number}
     * @memberof DepartmentDepartmentMembersData
     */
    'UserId': number;
    /**
     * 用户状态 0不活跃，1活跃，-1被锁定，-2锁定登录，-3退出团队
     * @type {number}
     * @memberof DepartmentDepartmentMembersData
     */
    'UserStatus': DepartmentDepartmentMembersDataUserStatusEnum;
}

export const DepartmentDepartmentMembersDataUserStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_MINUS_1: -1,
    NUMBER_MINUS_2: -2,
    NUMBER_MINUS_3: -3
} as const;

export type DepartmentDepartmentMembersDataUserStatusEnum = typeof DepartmentDepartmentMembersDataUserStatusEnum[keyof typeof DepartmentDepartmentMembersDataUserStatusEnum];

/**
 * 
 * @export
 * @interface DepartmentDepartmentTreeData
 */
export interface DepartmentDepartmentTreeData {
    /**
     * 子部门信息
     * @type {Array<DepartmentDepartmentTreeData>}
     * @memberof DepartmentDepartmentTreeData
     */
    'Children': Array<DepartmentDepartmentTreeData>;
    /**
     * 创建人ID
     * @type {number}
     * @memberof DepartmentDepartmentTreeData
     */
    'CreatorId': number;
    /**
     * 部门描述ID
     * @type {string}
     * @memberof DepartmentDepartmentTreeData
     */
    'DescribeId': string;
    /**
     * 部门ID
     * @type {number}
     * @memberof DepartmentDepartmentTreeData
     */
    'Id': number;
    /**
     * 部门名
     * @type {string}
     * @memberof DepartmentDepartmentTreeData
     */
    'Name': string;
    /**
     * 父级部门ID
     * @type {number}
     * @memberof DepartmentDepartmentTreeData
     */
    'ParentId': number;
    /**
     * 排序值
     * @type {number}
     * @memberof DepartmentDepartmentTreeData
     */
    'Sort': number;
    /**
     * 团队ID
     * @type {number}
     * @memberof DepartmentDepartmentTreeData
     */
    'TeamId': number;
}
/**
 * 部门成员分页数据
 * @export
 * @interface DepartmentDescribeDepartmentMemberPageList
 */
export interface DepartmentDescribeDepartmentMemberPageList {
    /**
     * 部门成员
     * @type {Array<DepartmentDepartmentMembersData>}
     * @memberof DepartmentDescribeDepartmentMemberPageList
     */
    'DepartmentMembers': Array<DepartmentDepartmentMembersData>;
    /**
     * 页数
     * @type {number}
     * @memberof DepartmentDescribeDepartmentMemberPageList
     */
    'PageNumber': number;
    /**
     * 每页数量
     * @type {number}
     * @memberof DepartmentDescribeDepartmentMemberPageList
     */
    'PageSize': number;
    /**
     * 总数
     * @type {number}
     * @memberof DepartmentDescribeDepartmentMemberPageList
     */
    'TotalCount': number;
}
/**
 * 部署公钥信息
 * @export
 * @interface DeployKeyInfo
 */
export interface DeployKeyInfo {
    /**
     * 是否授予写入权限
     * @type {boolean}
     * @memberof DeployKeyInfo
     */
    'AllowWrite'?: boolean | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof DeployKeyInfo
     */
    'CreatedAt'?: number | null;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DeployKeyInfo
     */
    'DepotId'?: number | null;
    /**
     * 过期时间
     * @type {string}
     * @memberof DeployKeyInfo
     */
    'ExpirationDate'?: string | null;
    /**
     * key 指纹
     * @type {string}
     * @memberof DeployKeyInfo
     */
    'FingerPrint'?: string | null;
    /**
     * 是否过期
     * @type {boolean}
     * @memberof DeployKeyInfo
     */
    'HasExpired'?: boolean | null;
    /**
     * SSH Key Id
     * @type {number}
     * @memberof DeployKeyInfo
     */
    'KeyId'?: number | null;
    /**
     * 所属者名字
     * @type {string}
     * @memberof DeployKeyInfo
     */
    'OwnerName'?: string | null;
    /**
     * key 标题
     * @type {string}
     * @memberof DeployKeyInfo
     */
    'Title'?: string | null;
}
/**
 * 仓库规范的分支类型
 * @export
 * @interface DepotBranchType
 */
export interface DepotBranchType {
    /**
     * 分支类型的描述
     * @type {string}
     * @memberof DepotBranchType
     */
    'Description'?: string | null;
    /**
     * 分支类型名字
     * @type {string}
     * @memberof DepotBranchType
     */
    'Name'?: string | null;
    /**
     * 分支类型的规则
     * @type {string}
     * @memberof DepotBranchType
     */
    'Rule'?: string | null;
}
/**
 * 仓库规范的分支类型入参
 * @export
 * @interface DepotBranchTypeParam
 */
export interface DepotBranchTypeParam {
    /**
     * 分支类型描述信息
     * @type {string}
     * @memberof DepotBranchTypeParam
     */
    'Description'?: string;
    /**
     * 分支类型名字
     * @type {string}
     * @memberof DepotBranchTypeParam
     */
    'Name': string;
    /**
     * 分支类型规则
     * @type {string}
     * @memberof DepotBranchTypeParam
     */
    'Rule': string;
}
/**
 * 仓库信息列表
 * @export
 * @interface DepotData
 */
export interface DepotData {
    /**
     * 仓库信息列表
     * @type {Array<DepotInfo>}
     * @memberof DepotData
     */
    'Depots'?: Array<DepotInfo>;
    /**
     * 
     * @type {PageInfo}
     * @memberof DepotData
     */
    'Page'?: PageInfo;
}
/**
 * 仓库提交详情
 * @export
 * @interface DepotDetailData
 */
export interface DepotDetailData {
    /**
     * 仓库信息列表
     * @type {Array<CodingCIDepotDetail>}
     * @memberof DepotDetailData
     */
    'DepotDetailList'?: Array<CodingCIDepotDetail>;
}
/**
 * 仓库信息
 * @export
 * @interface DepotInfo
 */
export interface DepotInfo {
    /**
     * 创建时间
     * @type {number}
     * @memberof DepotInfo
     */
    'CreatedAt'?: number;
    /**
     * 默认分支
     * @type {string}
     * @memberof DepotInfo
     */
    'DefaultBranch'?: string | null;
    /**
     * 仓库描述
     * @type {string}
     * @memberof DepotInfo
     */
    'Description'?: string;
    /**
     * 项目组Id
     * @type {number}
     * @memberof DepotInfo
     */
    'GroupId'?: number | null;
    /**
     * 项目名称
     * @type {string}
     * @memberof DepotInfo
     */
    'GroupName'?: string | null;
    /**
     * 项目类型
     * @type {string}
     * @memberof DepotInfo
     */
    'GroupType'?: string | null;
    /**
     * 仓库的https地址
     * @type {string}
     * @memberof DepotInfo
     */
    'HttpsUrl'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DepotInfo
     */
    'Id'?: number;
    /**
     * 最终push时间
     * @type {number}
     * @memberof DepotInfo
     */
    'LastPushAt'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof DepotInfo
     */
    'Name'?: string;
    /**
     * 项目Id
     * @type {number}
     * @memberof DepotInfo
     */
    'ProjectId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DepotInfo
     */
    'ProjectName'?: string;
    /**
     * 仓库类型,具体值为git或者svn
     * @type {string}
     * @memberof DepotInfo
     */
    'RepoType'?: string;
    /**
     * 仓库的ssh地址
     * @type {string}
     * @memberof DepotInfo
     */
    'SshUrl'?: string;
    /**
     * 仓库类型,具体值为git或者svn
     * @type {string}
     * @memberof DepotInfo
     */
    'VcsType'?: string;
    /**
     * 仓库webURL
     * @type {string}
     * @memberof DepotInfo
     */
    'WebUrl'?: string;
    /**
     * 仓库是否开源
     * @type {boolean}
     * @memberof DepotInfo
     */
    'IsShared'?: boolean;
}
/**
 * 仓库规范的合并方向规则
 * @export
 * @interface DepotMergeRequestRule
 */
export interface DepotMergeRequestRule {
    /**
     * 源分支类型名字
     * @type {string}
     * @memberof DepotMergeRequestRule
     */
    'SourceBranchTypeName'?: string | null;
    /**
     * 源分支类型规则
     * @type {string}
     * @memberof DepotMergeRequestRule
     */
    'SourceBranchTypeRule'?: string | null;
    /**
     * 目标分支类型名字
     * @type {string}
     * @memberof DepotMergeRequestRule
     */
    'TargetBranchTypeName'?: string | null;
    /**
     * 目标分支类型规则
     * @type {string}
     * @memberof DepotMergeRequestRule
     */
    'TargetBranchTypeRule'?: string | null;
}
/**
 * 仓库规范的合并方向规则入参
 * @export
 * @interface DepotMergeRequestRuleParam
 */
export interface DepotMergeRequestRuleParam {
    /**
     * 源分支类型名称
     * @type {string}
     * @memberof DepotMergeRequestRuleParam
     */
    'SourceBranchTypeName': string;
    /**
     * 目标分支类型名称
     * @type {string}
     * @memberof DepotMergeRequestRuleParam
     */
    'TargetBranchTypeName': string;
}
/**
 * 仓库推送规则信息
 * @export
 * @interface DepotPushSetting
 */
export interface DepotPushSetting {
    /**
     * 检查 Git 提交的提交者 (Committer) 和提交作者 (Author) 必须是已验证的邮箱。
     * @type {boolean}
     * @memberof DepotPushSetting
     */
    'CheckCommitAuthor'?: boolean | null;
    /**
     * Git 提交信息的格式校验
     * @type {string}
     * @memberof DepotPushSetting
     */
    'CommitMessageMustMatchRegex'?: string | null;
    /**
     * 禁止强制推送 (Force Push)
     * @type {boolean}
     * @memberof DepotPushSetting
     */
    'DenyForcePush'?: boolean | null;
    /**
     * 禁止推送的文件（文件类型用换行符隔开）
     * @type {string}
     * @memberof DepotPushSetting
     */
    'PushDenyFile'?: string | null;
    /**
     * 开启单次提交的文件总大小限制，Git LFS 文件除外（单位MB）
     * @type {string}
     * @memberof DepotPushSetting
     */
    'PushFileSize'?: string | null;
}
/**
 * 仓库规范
 * @export
 * @interface DepotSpec
 */
export interface DepotSpec {
    /**
     * 仓库规范描述信息
     * @type {string}
     * @memberof DepotSpec
     */
    'Description'?: string;
    /**
     * 仓库规范名字
     * @type {string}
     * @memberof DepotSpec
     */
    'Name'?: string;
    /**
     * 仓库规范类型 system:系统级别，team：团队级别
     * @type {string}
     * @memberof DepotSpec
     */
    'Type'?: string;
}
/**
 * 仓库规范 - 新增、修改仓库级别规范的参数
 * @export
 * @interface DepotSpecDepotLevelParam
 */
export interface DepotSpecDepotLevelParam {
    /**
     * 允许创建规定分支类型以外的分支
     * @type {boolean}
     * @memberof DepotSpecDepotLevelParam
     */
    'AllowPushWildRef'?: boolean;
    /**
     * 分支类型列表
     * @type {Array<DepotBranchTypeParam>}
     * @memberof DepotSpecDepotLevelParam
     */
    'DepotBranchTypeList'?: Array<DepotBranchTypeParam>;
    /**
     * 合并方向规则列表
     * @type {Array<DepotMergeRequestRuleParam>}
     * @memberof DepotSpecDepotLevelParam
     */
    'DepotMergeRequestRuleList'?: Array<DepotMergeRequestRuleParam>;
}
/**
 * 分支规范详细信息
 * @export
 * @interface DepotSpecDetail
 */
export interface DepotSpecDetail {
    /**
     * 允许创建规定分支类型以外的分支
     * @type {boolean}
     * @memberof DepotSpecDetail
     */
    'AllowPushWildRef'?: boolean | null;
    /**
     * 分支类型列表
     * @type {Array<DepotBranchType>}
     * @memberof DepotSpecDetail
     */
    'DepotBranchTypeList'?: Array<DepotBranchType> | null;
    /**
     * 合并方向规则列表
     * @type {Array<DepotMergeRequestRule>}
     * @memberof DepotSpecDetail
     */
    'DepotMergeRequestRuleList'?: Array<DepotMergeRequestRule> | null;
    /**
     * 仓库规范描述信息
     * @type {string}
     * @memberof DepotSpecDetail
     */
    'Description'?: string | null;
    /**
     * 仓库规范名字
     * @type {string}
     * @memberof DepotSpecDetail
     */
    'Name'?: string | null;
    /**
     * system：系统级别的规范；team：团队级别的规范
     * @type {string}
     * @memberof DepotSpecDetail
     */
    'Type'?: string | null;
    /**
     * 使用的是系统/团队级别的仓库规范（这个字段只在使用仓库路径查询时有用）
     * @type {boolean}
     * @memberof DepotSpecDetail
     */
    'UseExistingSolution'?: boolean | null;
}
/**
 * 仓库规范 - 新增团队规范的参数
 * @export
 * @interface DepotSpecTeamLevelParam
 */
export interface DepotSpecTeamLevelParam {
    /**
     * 允许创建规定分支类型以外的分支
     * @type {boolean}
     * @memberof DepotSpecTeamLevelParam
     */
    'AllowPushWildRef': boolean;
    /**
     * 分支类型列表
     * @type {Array<DepotBranchTypeParam>}
     * @memberof DepotSpecTeamLevelParam
     */
    'DepotBranchTypeList'?: Array<DepotBranchTypeParam>;
    /**
     * 合并方向规则列表
     * @type {Array<DepotMergeRequestRuleParam>}
     * @memberof DepotSpecTeamLevelParam
     */
    'DepotMergeRequestRuleList'?: Array<DepotMergeRequestRuleParam>;
    /**
     * 仓库规范描述
     * @type {string}
     * @memberof DepotSpecTeamLevelParam
     */
    'Description'?: string;
    /**
     * 规范的名字唯一，当名字是已有规范的名字时，为修改；当名字不是已有规范名字时为新增
     * @type {string}
     * @memberof DepotSpecTeamLevelParam
     */
    'Name': string;
    /**
     * 当需要修改已有规范的名字时，需要填写新名字
     * @type {string}
     * @memberof DepotSpecTeamLevelParam
     */
    'ReName'?: string;
}
/**
 * 仓库返回user信息
 * @export
 * @interface DepotUser
 */
export interface DepotUser {
    /**
     * 用户头像
     * @type {string}
     * @memberof DepotUser
     */
    'Avatar'?: string | null;
    /**
     * 邮箱
     * @type {string}
     * @memberof DepotUser
     */
    'Email'?: string;
    /**
     * 用户GlobalKey
     * @type {string}
     * @memberof DepotUser
     */
    'GlobalKey'?: string | null;
    /**
     * 用户id
     * @type {number}
     * @memberof DepotUser
     */
    'Id'?: number | null;
    /**
     * 姓名
     * @type {string}
     * @memberof DepotUser
     */
    'Name'?: string;
    /**
     * 用户状态
     * @type {string}
     * @memberof DepotUser
     */
    'Status'?: string | null;
    /**
     * 团队id
     * @type {number}
     * @memberof DepotUser
     */
    'TeamId'?: number | null;
}
/**
 * 
 * @export
 * @interface DescribeAgentSecret200Response
 */
export interface DescribeAgentSecret200Response {
    /**
     * 
     * @type {DescribeAgentSecret200ResponseResponse}
     * @memberof DescribeAgentSecret200Response
     */
    'Response'?: DescribeAgentSecret200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeAgentSecret200ResponseResponse
 */
export interface DescribeAgentSecret200ResponseResponse {
    /**
     * 
     * @type {AgentMachineSecret}
     * @memberof DescribeAgentSecret200ResponseResponse
     */
    'Data'?: AgentMachineSecret;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeAgentSecret200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeAllMergeRequestNotes200Response
 */
export interface DescribeAllMergeRequestNotes200Response {
    /**
     * 
     * @type {DescribeAllMergeRequestNotes200ResponseResponse}
     * @memberof DescribeAllMergeRequestNotes200Response
     */
    'Response'?: DescribeAllMergeRequestNotes200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeAllMergeRequestNotes200ResponseResponse
 */
export interface DescribeAllMergeRequestNotes200ResponseResponse {
    /**
     * 行评论内容
     * @type {Array<MergeRequestNoteList>}
     * @memberof DescribeAllMergeRequestNotes200ResponseResponse
     */
    'Notes'?: Array<MergeRequestNoteList>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeAllMergeRequestNotes200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeAllMergeRequestNotesRequest
 */
export interface DescribeAllMergeRequestNotesRequest {
    /**
     * 创建结束时间
     * @type {string}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'CreatedAtEndDate'?: string;
    /**
     * 创建开始时间
     * @type {string}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'CreatedAtStartDate'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求的Iid列表
     * @type {Array<number>}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'MergeIds'?: Array<number>;
    /**
     * 合并请求的状态列表
     * @type {Array<string>}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'MrStatuses'?: Array<string>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'PageNumber'?: number;
    /**
     * 页数量
     * @type {number}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'PageSize'?: number;
    /**
     * 合并请求的发起者列表
     * @type {Array<number>}
     * @memberof DescribeAllMergeRequestNotesRequest
     */
    'ReporterIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DescribeAllProjectLabels200Response
 */
export interface DescribeAllProjectLabels200Response {
    /**
     * 
     * @type {DescribeAllProjectLabels200ResponseResponse}
     * @memberof DescribeAllProjectLabels200Response
     */
    'Response'?: DescribeAllProjectLabels200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeAllProjectLabels200ResponseResponse
 */
export interface DescribeAllProjectLabels200ResponseResponse {
    /**
     * 标签列表
     * @type {Array<ProjectLabelLabels>}
     * @memberof DescribeAllProjectLabels200ResponseResponse
     */
    'Labels'?: Array<ProjectLabelLabels>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeAllProjectLabels200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeAllProjectLabelsRequest
 */
export interface DescribeAllProjectLabelsRequest {
    /**
     * 项目ID
     * @type {number}
     * @memberof DescribeAllProjectLabelsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeAllProjectsIssueWorkLogList200Response
 */
export interface DescribeAllProjectsIssueWorkLogList200Response {
    /**
     * 
     * @type {DescribeIssueWorkLogList200ResponseResponse}
     * @memberof DescribeAllProjectsIssueWorkLogList200Response
     */
    'Response'?: DescribeIssueWorkLogList200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeAllProjectsIssueWorkLogListRequest
 */
export interface DescribeAllProjectsIssueWorkLogListRequest {
    /**
     * 结束时间
     * @type {number}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'EndAt'?: number;
    /**
     * 每页数量，默认 20，最大1000
     * @type {number}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'Limit'?: number;
    /**
     * 偏移量，默认 0
     * @type {number}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'Offset'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间
     * @type {number}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'StartAt'?: number;
    /**
     * 用户 ID
     * @type {number}
     * @memberof DescribeAllProjectsIssueWorkLogListRequest
     */
    'UserId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeArtifactChecksums200Response
 */
export interface DescribeArtifactChecksums200Response {
    /**
     * 
     * @type {DescribeArtifactChecksums200ResponseResponse}
     * @memberof DescribeArtifactChecksums200Response
     */
    'Response'?: DescribeArtifactChecksums200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactChecksums200ResponseResponse
 */
export interface DescribeArtifactChecksums200ResponseResponse {
    /**
     * 制品Checksum列表
     * @type {Array<ArtifactChecksum>}
     * @memberof DescribeArtifactChecksums200ResponseResponse
     */
    'InstanceSet'?: Array<ArtifactChecksum>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactChecksums200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactChecksumsRequest
 */
export interface DescribeArtifactChecksumsRequest {
    /**
     * 包名
     * @type {string}
     * @memberof DescribeArtifactChecksumsRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof DescribeArtifactChecksumsRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactChecksumsRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeArtifactChecksumsRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactCredit200Response
 */
export interface DescribeArtifactCredit200Response {
    /**
     * 
     * @type {DescribeArtifactCredit200ResponseResponse}
     * @memberof DescribeArtifactCredit200Response
     */
    'Response'?: DescribeArtifactCredit200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactCredit200ResponseResponse
 */
export interface DescribeArtifactCredit200ResponseResponse {
    /**
     * 
     * @type {ArtifactsOpenApiArtifactCreditsData}
     * @memberof DescribeArtifactCredit200ResponseResponse
     */
    'ArtifactCredit'?: ArtifactsOpenApiArtifactCreditsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactCredit200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactCreditList200Response
 */
export interface DescribeArtifactCreditList200Response {
    /**
     * 
     * @type {DescribeArtifactCreditList200ResponseResponse}
     * @memberof DescribeArtifactCreditList200Response
     */
    'Response'?: DescribeArtifactCreditList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactCreditList200ResponseResponse
 */
export interface DescribeArtifactCreditList200ResponseResponse {
    /**
     * 授信清单列表
     * @type {Array<ArtifactsOpenApiArtifactCreditsData>}
     * @memberof DescribeArtifactCreditList200ResponseResponse
     */
    'InstanceSet'?: Array<ArtifactsOpenApiArtifactCreditsData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactCreditList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactCreditRequest
 */
export interface DescribeArtifactCreditRequest {
    /**
     * 授信清单ID
     * @type {number}
     * @memberof DescribeArtifactCreditRequest
     */
    'ArtifactCreditId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeArtifactFileDownloadUrl200Response
 */
export interface DescribeArtifactFileDownloadUrl200Response {
    /**
     * 
     * @type {DescribeArtifactFileDownloadUrl200ResponseResponse}
     * @memberof DescribeArtifactFileDownloadUrl200Response
     */
    'Response'?: DescribeArtifactFileDownloadUrl200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactFileDownloadUrl200ResponseResponse
 */
export interface DescribeArtifactFileDownloadUrl200ResponseResponse {
    /**
     * 临时下载链接
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrl200ResponseResponse
     */
    'Url'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrl200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactFileDownloadUrlRequest
 */
export interface DescribeArtifactFileDownloadUrlRequest {
    /**
     * 文件名称
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'FileName'?: string;
    /**
     * 包名
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'Repository'?: string;
    /**
     * 下载链接超时时间（单位：秒），默认：300
     * @type {number}
     * @memberof DescribeArtifactFileDownloadUrlRequest
     */
    'Timeout'?: number;
}
/**
 * 
 * @export
 * @interface DescribeArtifactPackageList200Response
 */
export interface DescribeArtifactPackageList200Response {
    /**
     * 
     * @type {DescribeArtifactPackageList200ResponseResponse}
     * @memberof DescribeArtifactPackageList200Response
     */
    'Response'?: DescribeArtifactPackageList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactPackageList200ResponseResponse
 */
export interface DescribeArtifactPackageList200ResponseResponse {
    /**
     * 
     * @type {ArtifactPackagePageBean}
     * @memberof DescribeArtifactPackageList200ResponseResponse
     */
    'Data'?: ArtifactPackagePageBean;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactPackageList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactPackageListRequest
 */
export interface DescribeArtifactPackageListRequest {
    /**
     * 包名前缀
     * @type {string}
     * @memberof DescribeArtifactPackageListRequest
     */
    'PackagePrefix'?: string;
    /**
     * 页码，默认：1
     * @type {number}
     * @memberof DescribeArtifactPackageListRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量，默认：10
     * @type {number}
     * @memberof DescribeArtifactPackageListRequest
     */
    'PageSize'?: number;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactPackageListRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof DescribeArtifactPackageListRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactProperties200Response
 */
export interface DescribeArtifactProperties200Response {
    /**
     * 
     * @type {DescribeArtifactProperties200ResponseResponse}
     * @memberof DescribeArtifactProperties200Response
     */
    'Response'?: DescribeArtifactProperties200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactProperties200ResponseResponse
 */
export interface DescribeArtifactProperties200ResponseResponse {
    /**
     * 制品属性列表
     * @type {Array<ArtifactProperty>}
     * @memberof DescribeArtifactProperties200ResponseResponse
     */
    'InstanceSet'?: Array<ArtifactProperty>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactProperties200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactRepositoryFileList200Response
 */
export interface DescribeArtifactRepositoryFileList200Response {
    /**
     * 
     * @type {DescribeArtifactRepositoryFileList200ResponseResponse}
     * @memberof DescribeArtifactRepositoryFileList200Response
     */
    'Response'?: DescribeArtifactRepositoryFileList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactRepositoryFileList200ResponseResponse
 */
export interface DescribeArtifactRepositoryFileList200ResponseResponse {
    /**
     * 
     * @type {ArtifactRepositoryFileListData}
     * @memberof DescribeArtifactRepositoryFileList200ResponseResponse
     */
    'Data'?: ArtifactRepositoryFileListData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactRepositoryFileList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactRepositoryFileListRequest
 */
export interface DescribeArtifactRepositoryFileListRequest {
    /**
     * 指定的制品
     * @type {Array<SpecifiedArtifact>}
     * @memberof DescribeArtifactRepositoryFileListRequest
     */
    'Artifacts'?: Array<SpecifiedArtifact>;
    /**
     * 翻页符。每次 list 操作会返回 ContinuationToken，在下一次 list 传入该值，即可接续上次 list 内容进行 list，最后一页该字段为空
     * @type {string}
     * @memberof DescribeArtifactRepositoryFileListRequest
     */
    'ContinuationToken'?: string;
    /**
     * 每页展示条数
     * @type {number}
     * @memberof DescribeArtifactRepositoryFileListRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeArtifactRepositoryFileListRequest
     */
    'Project'?: string;
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeArtifactRepositoryFileListRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactRepositoryList200Response
 */
export interface DescribeArtifactRepositoryList200Response {
    /**
     * 
     * @type {DescribeArtifactRepositoryList200ResponseResponse}
     * @memberof DescribeArtifactRepositoryList200Response
     */
    'Response'?: DescribeArtifactRepositoryList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactRepositoryList200ResponseResponse
 */
export interface DescribeArtifactRepositoryList200ResponseResponse {
    /**
     * 
     * @type {ArtifactRepositoryPageBean}
     * @memberof DescribeArtifactRepositoryList200ResponseResponse
     */
    'Data'?: ArtifactRepositoryPageBean;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactRepositoryList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactRepositoryListRequest
 */
export interface DescribeArtifactRepositoryListRequest {
    /**
     * 页码，默认：1
     * @type {number}
     * @memberof DescribeArtifactRepositoryListRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量，默认：10
     * @type {number}
     * @memberof DescribeArtifactRepositoryListRequest
     */
    'PageSize'?: number;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactRepositoryListRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库类型:1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm
     * @type {number}
     * @memberof DescribeArtifactRepositoryListRequest
     */
    'Type'?: number;
}
/**
 * 
 * @export
 * @interface DescribeArtifactVersionFileList200Response
 */
export interface DescribeArtifactVersionFileList200Response {
    /**
     * 
     * @type {DescribeArtifactVersionFileList200ResponseResponse}
     * @memberof DescribeArtifactVersionFileList200Response
     */
    'Response'?: DescribeArtifactVersionFileList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactVersionFileList200ResponseResponse
 */
export interface DescribeArtifactVersionFileList200ResponseResponse {
    /**
     * 文件列表
     * @type {Array<ArtifactVersionFileBean>}
     * @memberof DescribeArtifactVersionFileList200ResponseResponse
     */
    'InstanceSet'?: Array<ArtifactVersionFileBean>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactVersionFileList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactVersionFileListRequest
 */
export interface DescribeArtifactVersionFileListRequest {
    /**
     * 
     * @type {Maven}
     * @memberof DescribeArtifactVersionFileListRequest
     */
    'Maven'?: Maven;
    /**
     * 包名
     * @type {string}
     * @memberof DescribeArtifactVersionFileListRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof DescribeArtifactVersionFileListRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactVersionFileListRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeArtifactVersionFileListRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactVersionList200Response
 */
export interface DescribeArtifactVersionList200Response {
    /**
     * 
     * @type {DescribeArtifactVersionList200ResponseResponse}
     * @memberof DescribeArtifactVersionList200Response
     */
    'Response'?: DescribeArtifactVersionList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeArtifactVersionList200ResponseResponse
 */
export interface DescribeArtifactVersionList200ResponseResponse {
    /**
     * 
     * @type {ArtifactVersionPageBean}
     * @memberof DescribeArtifactVersionList200ResponseResponse
     */
    'Data'?: ArtifactVersionPageBean;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeArtifactVersionList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeArtifactVersionListRequest
 */
export interface DescribeArtifactVersionListRequest {
    /**
     * 包名称
     * @type {string}
     * @memberof DescribeArtifactVersionListRequest
     */
    'Package'?: string;
    /**
     * 页码，默认：1
     * @type {number}
     * @memberof DescribeArtifactVersionListRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量，默认：10
     * @type {number}
     * @memberof DescribeArtifactVersionListRequest
     */
    'PageSize'?: number;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeArtifactVersionListRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof DescribeArtifactVersionListRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface DescribeAvailablePoliciesOnResource200Response
 */
export interface DescribeAvailablePoliciesOnResource200Response {
    /**
     * 
     * @type {DescribeAvailablePoliciesOnResource200ResponseResponse}
     * @memberof DescribeAvailablePoliciesOnResource200Response
     */
    'Response'?: DescribeAvailablePoliciesOnResource200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeAvailablePoliciesOnResource200ResponseResponse
 */
export interface DescribeAvailablePoliciesOnResource200ResponseResponse {
    /**
     * 
     * @type {DescribeAvailablePoliciesOnResponsePageData}
     * @memberof DescribeAvailablePoliciesOnResource200ResponseResponse
     */
    'Data'?: DescribeAvailablePoliciesOnResponsePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeAvailablePoliciesOnResource200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeAvailablePoliciesOnResourceRequest
 */
export interface DescribeAvailablePoliciesOnResourceRequest {
    /**
     * 
     * @type {DescribeAvailablePoliciesOnResourceRequestFilter}
     * @memberof DescribeAvailablePoliciesOnResourceRequest
     */
    'Filter'?: DescribeAvailablePoliciesOnResourceRequestFilter;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeAvailablePoliciesOnResourceRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeAvailablePoliciesOnResourceRequest
     */
    'PageSize'?: number;
    /**
     * 
     * @type {ResourceInfoOfPolicyScope}
     * @memberof DescribeAvailablePoliciesOnResourceRequest
     */
    'Resource'?: ResourceInfoOfPolicyScope;
}
/**
 * 查询指定资源可用的 policy 列表的查询条件
 * @export
 * @interface DescribeAvailablePoliciesOnResourceRequestFilter
 */
export interface DescribeAvailablePoliciesOnResourceRequestFilter {
    /**
     * 权限组显示名称，模糊匹配
     * @type {string}
     * @memberof DescribeAvailablePoliciesOnResourceRequestFilter
     */
    'PolicyAlias'?: string;
    /**
     * 可见范围（默认 true），all：全部；true：用户可见；false：界面不可见（逻辑权限组）
     * @type {string}
     * @memberof DescribeAvailablePoliciesOnResourceRequestFilter
     */
    'Visible'?: string;
}
/**
 * 查询指定资源可用的权限组列表的分页数据
 * @export
 * @interface DescribeAvailablePoliciesOnResponsePageData
 */
export interface DescribeAvailablePoliciesOnResponsePageData {
    /**
     * 页码
     * @type {number}
     * @memberof DescribeAvailablePoliciesOnResponsePageData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeAvailablePoliciesOnResponsePageData
     */
    'PageSize'?: number;
    /**
     * 权限组列表
     * @type {Array<PolicyInfo>}
     * @memberof DescribeAvailablePoliciesOnResponsePageData
     */
    'PolicyList'?: Array<PolicyInfo> | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeAvailablePoliciesOnResponsePageData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface DescribeBlockIssueList200Response
 */
export interface DescribeBlockIssueList200Response {
    /**
     * 
     * @type {DescribeBlockIssueList200ResponseResponse}
     * @memberof DescribeBlockIssueList200Response
     */
    'Response'?: DescribeBlockIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeBlockIssueList200ResponseResponse
 */
export interface DescribeBlockIssueList200ResponseResponse {
    /**
     * 后置事项列表
     * @type {Array<IssueSimpleData>}
     * @memberof DescribeBlockIssueList200ResponseResponse
     */
    'Issues'?: Array<IssueSimpleData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeBlockIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBlockIssueListRequest
 */
export interface DescribeBlockIssueListRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DescribeBlockIssueListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeBlockIssueListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBlockedByIssueList200Response
 */
export interface DescribeBlockedByIssueList200Response {
    /**
     * 
     * @type {DescribeBlockedByIssueList200ResponseResponse}
     * @memberof DescribeBlockedByIssueList200Response
     */
    'Response'?: DescribeBlockedByIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeBlockedByIssueList200ResponseResponse
 */
export interface DescribeBlockedByIssueList200ResponseResponse {
    /**
     * 前置事项列表
     * @type {Array<IssueSimpleData>}
     * @memberof DescribeBlockedByIssueList200ResponseResponse
     */
    'Issues'?: Array<IssueSimpleData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeBlockedByIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBlockedByIssueListRequest
 */
export interface DescribeBlockedByIssueListRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DescribeBlockedByIssueListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeBlockedByIssueListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtection200Response
 */
export interface DescribeBranchProtection200Response {
    /**
     * 
     * @type {ModifyBranchProtection200ResponseResponse}
     * @memberof DescribeBranchProtection200Response
     */
    'Response'?: ModifyBranchProtection200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtectionMembers200Response
 */
export interface DescribeBranchProtectionMembers200Response {
    /**
     * 
     * @type {DescribeBranchProtectionMembers200ResponseResponse}
     * @memberof DescribeBranchProtectionMembers200Response
     */
    'Response'?: DescribeBranchProtectionMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeBranchProtectionMembers200ResponseResponse
 */
export interface DescribeBranchProtectionMembers200ResponseResponse {
    /**
     * 保护分支规则管理员列表
     * @type {Array<BranchProtectionMember>}
     * @memberof DescribeBranchProtectionMembers200ResponseResponse
     */
    'Members'?: Array<BranchProtectionMember>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeBranchProtectionMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtectionMembersRequest
 */
export interface DescribeBranchProtectionMembersRequest {
    /**
     * 保护分支规则id
     * @type {number}
     * @memberof DescribeBranchProtectionMembersRequest
     */
    'BranchProtectionId'?: number;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeBranchProtectionMembersRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepptPath二选一即可
     * @type {string}
     * @memberof DescribeBranchProtectionMembersRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtectionRequest
 */
export interface DescribeBranchProtectionRequest {
    /**
     * 保护分支规则id
     * @type {number}
     * @memberof DescribeBranchProtectionRequest
     */
    'BranchProtectionId'?: number;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeBranchProtectionRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeBranchProtectionRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtections200Response
 */
export interface DescribeBranchProtections200Response {
    /**
     * 
     * @type {DescribeBranchProtections200ResponseResponse}
     * @memberof DescribeBranchProtections200Response
     */
    'Response'?: DescribeBranchProtections200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeBranchProtections200ResponseResponse
 */
export interface DescribeBranchProtections200ResponseResponse {
    /**
     * 保护分支规则列表
     * @type {Array<BranchProtection>}
     * @memberof DescribeBranchProtections200ResponseResponse
     */
    'BranchProtections'?: Array<BranchProtection>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeBranchProtections200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeBranchProtectionsRequest
 */
export interface DescribeBranchProtectionsRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeBranchProtectionsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeBranchProtectionsRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCanMerge200Response
 */
export interface DescribeCanMerge200Response {
    /**
     * 
     * @type {DescribeCanMerge200ResponseResponse}
     * @memberof DescribeCanMerge200Response
     */
    'Response'?: DescribeCanMerge200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCanMerge200ResponseResponse
 */
export interface DescribeCanMerge200ResponseResponse {
    /**
     * NOT_MERGEABLE(不允许合并),ALREADY_MERGED(完全一样的两个分支),MERGEABLE(可合并),FAILED(比较失败)
     * @type {string}
     * @memberof DescribeCanMerge200ResponseResponse
     */
    'MergeStatus'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCanMerge200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCanMergeRequest
 */
export interface DescribeCanMergeRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeCanMergeRequest
     */
    'DepotId'?: number;
    /**
     * 源分支
     * @type {string}
     * @memberof DescribeCanMergeRequest
     */
    'Source'?: string;
    /**
     * 目标分支
     * @type {string}
     * @memberof DescribeCanMergeRequest
     */
    'Target'?: string;
    /**
     * 仓库路径,与仓库Id二选一即可
     * @type {string}
     * @memberof DescribeCanMergeRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdAgentMachines200Response
 */
export interface DescribeCdAgentMachines200Response {
    /**
     * 
     * @type {DescribeCdAgentMachines200ResponseResponse}
     * @memberof DescribeCdAgentMachines200Response
     */
    'Response'?: DescribeCdAgentMachines200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdAgentMachines200ResponseResponse
 */
export interface DescribeCdAgentMachines200ResponseResponse {
    /**
     * 
     * @type {DescribeCdAgentMachinesResponseData}
     * @memberof DescribeCdAgentMachines200ResponseResponse
     */
    'Data'?: DescribeCdAgentMachinesResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdAgentMachines200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdAgentMachinesRequest
 */
export interface DescribeCdAgentMachinesRequest {
    /**
     * 检索关键字
     * @type {string}
     * @memberof DescribeCdAgentMachinesRequest
     */
    'Keyword'?: string;
    /**
     * 页码（默认为 1）
     * @type {number}
     * @memberof DescribeCdAgentMachinesRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数（默认为 10，最大值为 500）
     * @type {number}
     * @memberof DescribeCdAgentMachinesRequest
     */
    'PageSize'?: number;
}
/**
 * DescribeCdAgentMachinesResponseData 结构
 * @export
 * @interface DescribeCdAgentMachinesResponseData
 */
export interface DescribeCdAgentMachinesResponseData {
    /**
     * 堡垒机列表
     * @type {Array<AgentMachine>}
     * @memberof DescribeCdAgentMachinesResponseData
     */
    'AgentMachines'?: Array<AgentMachine>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeCdAgentMachinesResponseData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeCdAgentMachinesResponseData
     */
    'PageSize'?: number;
    /**
     * 总共页数
     * @type {number}
     * @memberof DescribeCdAgentMachinesResponseData
     */
    'TotalPage'?: number;
    /**
     * 总共条数
     * @type {number}
     * @memberof DescribeCdAgentMachinesResponseData
     */
    'TotalRow'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCdApplication200Response
 */
export interface DescribeCdApplication200Response {
    /**
     * 
     * @type {DescribeCdApplication200ResponseResponse}
     * @memberof DescribeCdApplication200Response
     */
    'Response'?: DescribeCdApplication200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdApplication200ResponseResponse
 */
export interface DescribeCdApplication200ResponseResponse {
    /**
     * 
     * @type {DescribeCdApplicationResponseData}
     * @memberof DescribeCdApplication200ResponseResponse
     */
    'Data'?: DescribeCdApplicationResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdApplication200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdApplicationRequest
 */
export interface DescribeCdApplicationRequest {
    /**
     * 应用名称
     * @type {string}
     * @memberof DescribeCdApplicationRequest
     */
    'Application'?: string;
}
/**
 * DescribeCdApplicationResponseData 结构
 * @export
 * @interface DescribeCdApplicationResponseData
 */
export interface DescribeCdApplicationResponseData {
    /**
     * 应用 JSON 配置
     * @type {string}
     * @memberof DescribeCdApplicationResponseData
     */
    'ApplicationJsonContent'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdApplications200Response
 */
export interface DescribeCdApplications200Response {
    /**
     * 
     * @type {DescribeCdApplications200ResponseResponse}
     * @memberof DescribeCdApplications200Response
     */
    'Response'?: DescribeCdApplications200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdApplications200ResponseResponse
 */
export interface DescribeCdApplications200ResponseResponse {
    /**
     * 
     * @type {DescribeCdApplicationsResponseData}
     * @memberof DescribeCdApplications200ResponseResponse
     */
    'Data'?: DescribeCdApplicationsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdApplications200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdApplicationsByProject200Response
 */
export interface DescribeCdApplicationsByProject200Response {
    /**
     * 
     * @type {DescribeCdApplicationsByProject200ResponseResponse}
     * @memberof DescribeCdApplicationsByProject200Response
     */
    'Response'?: DescribeCdApplicationsByProject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdApplicationsByProject200ResponseResponse
 */
export interface DescribeCdApplicationsByProject200ResponseResponse {
    /**
     * 
     * @type {DescribeCdApplicationsByProjectResponseData}
     * @memberof DescribeCdApplicationsByProject200ResponseResponse
     */
    'Data'?: DescribeCdApplicationsByProjectResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdApplicationsByProject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * DescribeCdApplicationsByProjectResponseData 结构
 * @export
 * @interface DescribeCdApplicationsByProjectResponseData
 */
export interface DescribeCdApplicationsByProjectResponseData {
    /**
     * CD 应用列表
     * @type {Array<CdApplication>}
     * @memberof DescribeCdApplicationsByProjectResponseData
     */
    'Applications'?: Array<CdApplication>;
}
/**
 * DescribeCdApplicationsResponseData 结构
 * @export
 * @interface DescribeCdApplicationsResponseData
 */
export interface DescribeCdApplicationsResponseData {
    /**
     * CD 应用列表
     * @type {Array<CdApplication>}
     * @memberof DescribeCdApplicationsResponseData
     */
    'Applications'?: Array<CdApplication>;
}
/**
 * 
 * @export
 * @interface DescribeCdCloudAccounts200Response
 */
export interface DescribeCdCloudAccounts200Response {
    /**
     * 
     * @type {DescribeCdCloudAccounts200ResponseResponse}
     * @memberof DescribeCdCloudAccounts200Response
     */
    'Response'?: DescribeCdCloudAccounts200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdCloudAccounts200ResponseResponse
 */
export interface DescribeCdCloudAccounts200ResponseResponse {
    /**
     * 
     * @type {DescribeCdCloudAccountsResponseData}
     * @memberof DescribeCdCloudAccounts200ResponseResponse
     */
    'Data'?: DescribeCdCloudAccountsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdCloudAccounts200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdCloudAccountsRequest
 */
export interface DescribeCdCloudAccountsRequest {
    /**
     * 检索关键字
     * @type {string}
     * @memberof DescribeCdCloudAccountsRequest
     */
    'Keyword'?: string;
    /**
     * 页码（默认为 1）
     * @type {number}
     * @memberof DescribeCdCloudAccountsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数（默认为 10，最大值为 500）
     * @type {number}
     * @memberof DescribeCdCloudAccountsRequest
     */
    'PageSize'?: number;
}
/**
 * DescribeCdCloudAccountsResponseData 结构
 * @export
 * @interface DescribeCdCloudAccountsResponseData
 */
export interface DescribeCdCloudAccountsResponseData {
    /**
     * 云账号列表
     * @type {Array<CloudAccount>}
     * @memberof DescribeCdCloudAccountsResponseData
     */
    'CloudAccounts'?: Array<CloudAccount>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeCdCloudAccountsResponseData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {string}
     * @memberof DescribeCdCloudAccountsResponseData
     */
    'PageSize'?: string;
    /**
     * 总共页数
     * @type {string}
     * @memberof DescribeCdCloudAccountsResponseData
     */
    'TotalPage'?: string;
    /**
     *  总共条数
     * @type {string}
     * @memberof DescribeCdCloudAccountsResponseData
     */
    'TotalRow'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployCountByApplications200Response
 */
export interface DescribeCdDeployCountByApplications200Response {
    /**
     * 
     * @type {DescribeCdDeployCountByApplications200ResponseResponse}
     * @memberof DescribeCdDeployCountByApplications200Response
     */
    'Response'?: DescribeCdDeployCountByApplications200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployCountByApplications200ResponseResponse
 */
export interface DescribeCdDeployCountByApplications200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployCountByApplicationsResponseData}
     * @memberof DescribeCdDeployCountByApplications200ResponseResponse
     */
    'Data'?: DescribeCdDeployCountByApplicationsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployCountByApplications200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployCountByApplicationsRequest
 */
export interface DescribeCdDeployCountByApplicationsRequest {
    /**
     * 应用名列表
     * @type {Array<string>}
     * @memberof DescribeCdDeployCountByApplicationsRequest
     */
    'Application'?: Array<string>;
    /**
     * 结束时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployCountByApplicationsRequest
     */
    'EndAt'?: string;
    /**
     * 开始时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployCountByApplicationsRequest
     */
    'StartAt'?: string;
}
/**
 * DescribeCdDeployCountByApplicationsResponseData 结构
 * @export
 * @interface DescribeCdDeployCountByApplicationsResponseData
 */
export interface DescribeCdDeployCountByApplicationsResponseData {
    /**
     * 各应用发布次数详情
     * @type {Array<CdDeployCountDetail>}
     * @memberof DescribeCdDeployCountByApplicationsResponseData
     */
    'Details'?: Array<CdDeployCountDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployCountByApplicationsResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployCountByApplicationsResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployCount}
     * @memberof DescribeCdDeployCountByApplicationsResponseData
     */
    'Total'?: CdDeployCount;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployCountByProject200Response
 */
export interface DescribeCdDeployCountByProject200Response {
    /**
     * 
     * @type {DescribeCdDeployCountByProject200ResponseResponse}
     * @memberof DescribeCdDeployCountByProject200Response
     */
    'Response'?: DescribeCdDeployCountByProject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployCountByProject200ResponseResponse
 */
export interface DescribeCdDeployCountByProject200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployCountByProjectResponseData}
     * @memberof DescribeCdDeployCountByProject200ResponseResponse
     */
    'Data'?: DescribeCdDeployCountByProjectResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployCountByProject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * DescribeCdDeployCountByProjectResponseData 结构
 * @export
 * @interface DescribeCdDeployCountByProjectResponseData
 */
export interface DescribeCdDeployCountByProjectResponseData {
    /**
     * 各应用发布次数详情
     * @type {Array<CdDeployCountDetail>}
     * @memberof DescribeCdDeployCountByProjectResponseData
     */
    'Details'?: Array<CdDeployCountDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployCountByProjectResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployCountByProjectResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployCount}
     * @memberof DescribeCdDeployCountByProjectResponseData
     */
    'Total'?: CdDeployCount;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTimeByApplications200Response
 */
export interface DescribeCdDeployTimeByApplications200Response {
    /**
     * 
     * @type {DescribeCdDeployTimeByApplications200ResponseResponse}
     * @memberof DescribeCdDeployTimeByApplications200Response
     */
    'Response'?: DescribeCdDeployTimeByApplications200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployTimeByApplications200ResponseResponse
 */
export interface DescribeCdDeployTimeByApplications200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployTimeByApplicationsResponseData}
     * @memberof DescribeCdDeployTimeByApplications200ResponseResponse
     */
    'Data'?: DescribeCdDeployTimeByApplicationsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployTimeByApplications200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTimeByApplicationsRequest
 */
export interface DescribeCdDeployTimeByApplicationsRequest {
    /**
     * 应用名列表
     * @type {Array<string>}
     * @memberof DescribeCdDeployTimeByApplicationsRequest
     */
    'Application'?: Array<string>;
    /**
     * 结束时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTimeByApplicationsRequest
     */
    'EndAt'?: string;
    /**
     * 开始时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTimeByApplicationsRequest
     */
    'StartAt'?: string;
}
/**
 * DescribeCdDeployTimeByApplicationsResponseData 结构
 * @export
 * @interface DescribeCdDeployTimeByApplicationsResponseData
 */
export interface DescribeCdDeployTimeByApplicationsResponseData {
    /**
     * 各应用发布时长详情
     * @type {Array<CdDeployTimeDetail>}
     * @memberof DescribeCdDeployTimeByApplicationsResponseData
     */
    'Details'?: Array<CdDeployTimeDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployTimeByApplicationsResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployTimeByApplicationsResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployTime}
     * @memberof DescribeCdDeployTimeByApplicationsResponseData
     */
    'Total'?: CdDeployTime;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTimeByProject200Response
 */
export interface DescribeCdDeployTimeByProject200Response {
    /**
     * 
     * @type {DescribeCdDeployTimeByProject200ResponseResponse}
     * @memberof DescribeCdDeployTimeByProject200Response
     */
    'Response'?: DescribeCdDeployTimeByProject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployTimeByProject200ResponseResponse
 */
export interface DescribeCdDeployTimeByProject200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployTimeByProjectResponseData}
     * @memberof DescribeCdDeployTimeByProject200ResponseResponse
     */
    'Data'?: DescribeCdDeployTimeByProjectResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployTimeByProject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTimeByProjectRequest
 */
export interface DescribeCdDeployTimeByProjectRequest {
    /**
     * 结束时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTimeByProjectRequest
     */
    'EndAt'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeCdDeployTimeByProjectRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTimeByProjectRequest
     */
    'StartAt'?: string;
}
/**
 * DescribeCdDeployTimeByProjectResponseData 结构
 * @export
 * @interface DescribeCdDeployTimeByProjectResponseData
 */
export interface DescribeCdDeployTimeByProjectResponseData {
    /**
     * 各应用发布时长详情
     * @type {Array<CdDeployTimeDetail>}
     * @memberof DescribeCdDeployTimeByProjectResponseData
     */
    'Details'?: Array<CdDeployTimeDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployTimeByProjectResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployTimeByProjectResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployTime}
     * @memberof DescribeCdDeployTimeByProjectResponseData
     */
    'Total'?: CdDeployTime;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTrendByApplications200Response
 */
export interface DescribeCdDeployTrendByApplications200Response {
    /**
     * 
     * @type {DescribeCdDeployTrendByApplications200ResponseResponse}
     * @memberof DescribeCdDeployTrendByApplications200Response
     */
    'Response'?: DescribeCdDeployTrendByApplications200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployTrendByApplications200ResponseResponse
 */
export interface DescribeCdDeployTrendByApplications200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployTrendByApplicationsResponseData}
     * @memberof DescribeCdDeployTrendByApplications200ResponseResponse
     */
    'Data'?: DescribeCdDeployTrendByApplicationsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployTrendByApplications200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTrendByApplicationsRequest
 */
export interface DescribeCdDeployTrendByApplicationsRequest {
    /**
     * 应用名列表
     * @type {Array<string>}
     * @memberof DescribeCdDeployTrendByApplicationsRequest
     */
    'Application'?: Array<string>;
    /**
     * 结束时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTrendByApplicationsRequest
     */
    'EndAt'?: string;
    /**
     * 开始时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTrendByApplicationsRequest
     */
    'StartAt'?: string;
}
/**
 * DescribeCdDeployTrendByApplicationsResponseData 结构
 * @export
 * @interface DescribeCdDeployTrendByApplicationsResponseData
 */
export interface DescribeCdDeployTrendByApplicationsResponseData {
    /**
     * 各应用发布趋势详情
     * @type {Array<CdDeployTrendDetail>}
     * @memberof DescribeCdDeployTrendByApplicationsResponseData
     */
    'Details'?: Array<CdDeployTrendDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployTrendByApplicationsResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployTrendByApplicationsResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployTrendTotal}
     * @memberof DescribeCdDeployTrendByApplicationsResponseData
     */
    'Total'?: CdDeployTrendTotal;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTrendByProject200Response
 */
export interface DescribeCdDeployTrendByProject200Response {
    /**
     * 
     * @type {DescribeCdDeployTrendByProject200ResponseResponse}
     * @memberof DescribeCdDeployTrendByProject200Response
     */
    'Response'?: DescribeCdDeployTrendByProject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdDeployTrendByProject200ResponseResponse
 */
export interface DescribeCdDeployTrendByProject200ResponseResponse {
    /**
     * 
     * @type {DescribeCdDeployTrendByProjectResponseData}
     * @memberof DescribeCdDeployTrendByProject200ResponseResponse
     */
    'Data'?: DescribeCdDeployTrendByProjectResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdDeployTrendByProject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdDeployTrendByProjectRequest
 */
export interface DescribeCdDeployTrendByProjectRequest {
    /**
     * 结束时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTrendByProjectRequest
     */
    'EndAt'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeCdDeployTrendByProjectRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间（格式：yyyy-MM-dd HH:mm:ss）
     * @type {string}
     * @memberof DescribeCdDeployTrendByProjectRequest
     */
    'StartAt'?: string;
}
/**
 * DescribeCdDeployTrendByProjectResponseData 结构
 * @export
 * @interface DescribeCdDeployTrendByProjectResponseData
 */
export interface DescribeCdDeployTrendByProjectResponseData {
    /**
     * 各应用发布趋势详情
     * @type {Array<CdDeployTrendDetail>}
     * @memberof DescribeCdDeployTrendByProjectResponseData
     */
    'Details'?: Array<CdDeployTrendDetail>;
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCdDeployTrendByProjectResponseData
     */
    'EndDate'?: string;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCdDeployTrendByProjectResponseData
     */
    'StartDate'?: string;
    /**
     * 
     * @type {CdDeployTrendTotal}
     * @memberof DescribeCdDeployTrendByProjectResponseData
     */
    'Total'?: CdDeployTrendTotal;
}
/**
 * 
 * @export
 * @interface DescribeCdHostServerGroup200Response
 */
export interface DescribeCdHostServerGroup200Response {
    /**
     * 
     * @type {DescribeCdHostServerGroup200ResponseResponse}
     * @memberof DescribeCdHostServerGroup200Response
     */
    'Response'?: DescribeCdHostServerGroup200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdHostServerGroup200ResponseResponse
 */
export interface DescribeCdHostServerGroup200ResponseResponse {
    /**
     * 
     * @type {DescribeCdHostServerGroupResponseData}
     * @memberof DescribeCdHostServerGroup200ResponseResponse
     */
    'Data'?: DescribeCdHostServerGroupResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdHostServerGroup200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdHostServerGroupRequest
 */
export interface DescribeCdHostServerGroupRequest {
    /**
     * 主机组 ID
     * @type {number}
     * @memberof DescribeCdHostServerGroupRequest
     */
    'Id'?: number;
}
/**
 * DescribeCdHostServerGroupResponseData 结构
 * @export
 * @interface DescribeCdHostServerGroupResponseData
 */
export interface DescribeCdHostServerGroupResponseData {
    /**
     * 
     * @type {HostServerGroupDetail}
     * @memberof DescribeCdHostServerGroupResponseData
     */
    'HostServerGroup'?: HostServerGroupDetail;
}
/**
 * 
 * @export
 * @interface DescribeCdHostServerGroups200Response
 */
export interface DescribeCdHostServerGroups200Response {
    /**
     * 
     * @type {DescribeCdHostServerGroups200ResponseResponse}
     * @memberof DescribeCdHostServerGroups200Response
     */
    'Response'?: DescribeCdHostServerGroups200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdHostServerGroups200ResponseResponse
 */
export interface DescribeCdHostServerGroups200ResponseResponse {
    /**
     * 
     * @type {DescribeCdHostServerGroupsResponseData}
     * @memberof DescribeCdHostServerGroups200ResponseResponse
     */
    'Data'?: DescribeCdHostServerGroupsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdHostServerGroups200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdHostServerGroupsRequest
 */
export interface DescribeCdHostServerGroupsRequest {
    /**
     * 检索关键字
     * @type {string}
     * @memberof DescribeCdHostServerGroupsRequest
     */
    'Keyword'?: string;
    /**
     * 页码（默认为 1）
     * @type {number}
     * @memberof DescribeCdHostServerGroupsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数（默认为 10，最大值为 500）
     * @type {number}
     * @memberof DescribeCdHostServerGroupsRequest
     */
    'PageSize'?: number;
}
/**
 * DescribeCdHostServerGroupsResponseData 结构
 * @export
 * @interface DescribeCdHostServerGroupsResponseData
 */
export interface DescribeCdHostServerGroupsResponseData {
    /**
     * 主机组列表
     * @type {Array<HostServerGroup>}
     * @memberof DescribeCdHostServerGroupsResponseData
     */
    'HostServerGroups'?: Array<HostServerGroup>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeCdHostServerGroupsResponseData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeCdHostServerGroupsResponseData
     */
    'PageSize'?: number;
    /**
     * 总共页数
     * @type {number}
     * @memberof DescribeCdHostServerGroupsResponseData
     */
    'TotalPage'?: number;
    /**
     * 总共条数
     * @type {number}
     * @memberof DescribeCdHostServerGroupsResponseData
     */
    'TotalRow'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCdPipeline200Response
 */
export interface DescribeCdPipeline200Response {
    /**
     * 
     * @type {DescribeCdPipeline200ResponseResponse}
     * @memberof DescribeCdPipeline200Response
     */
    'Response'?: DescribeCdPipeline200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdPipeline200ResponseResponse
 */
export interface DescribeCdPipeline200ResponseResponse {
    /**
     * 
     * @type {DescribeCdPipelineResponseData}
     * @memberof DescribeCdPipeline200ResponseResponse
     */
    'Data'?: DescribeCdPipelineResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdPipeline200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdPipelineConfig200Response
 */
export interface DescribeCdPipelineConfig200Response {
    /**
     * 
     * @type {DescribeCdPipelineConfig200ResponseResponse}
     * @memberof DescribeCdPipelineConfig200Response
     */
    'Response'?: DescribeCdPipelineConfig200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdPipelineConfig200ResponseResponse
 */
export interface DescribeCdPipelineConfig200ResponseResponse {
    /**
     * 
     * @type {DescribeCdPipelineConfigResponseData}
     * @memberof DescribeCdPipelineConfig200ResponseResponse
     */
    'Data'?: DescribeCdPipelineConfigResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdPipelineConfig200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdPipelineConfigRequest
 */
export interface DescribeCdPipelineConfigRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof DescribeCdPipelineConfigRequest
     */
    'Application'?: string;
    /**
     * 部署流程名称
     * @type {string}
     * @memberof DescribeCdPipelineConfigRequest
     */
    'PipelineName'?: string;
}
/**
 * DescribeCdPipelineConfigResponseData 结构
 * @export
 * @interface DescribeCdPipelineConfigResponseData
 */
export interface DescribeCdPipelineConfigResponseData {
    /**
     * 
     * @type {PipelineConfig}
     * @memberof DescribeCdPipelineConfigResponseData
     */
    'PipelineConfig'?: PipelineConfig;
}
/**
 * 
 * @export
 * @interface DescribeCdPipelineConfigs200Response
 */
export interface DescribeCdPipelineConfigs200Response {
    /**
     * 
     * @type {DescribeCdPipelineConfigs200ResponseResponse}
     * @memberof DescribeCdPipelineConfigs200Response
     */
    'Response'?: DescribeCdPipelineConfigs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdPipelineConfigs200ResponseResponse
 */
export interface DescribeCdPipelineConfigs200ResponseResponse {
    /**
     * 
     * @type {DescribeCdPipelineConfigsResponseData}
     * @memberof DescribeCdPipelineConfigs200ResponseResponse
     */
    'Data'?: DescribeCdPipelineConfigsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdPipelineConfigs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdPipelineConfigsRequest
 */
export interface DescribeCdPipelineConfigsRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof DescribeCdPipelineConfigsRequest
     */
    'Application'?: string;
}
/**
 * DescribeCdPipelineConfigsResponseData 结构
 * @export
 * @interface DescribeCdPipelineConfigsResponseData
 */
export interface DescribeCdPipelineConfigsResponseData {
    /**
     * 部署流程 JSON 配置列表
     * @type {Array<PipelineConfig>}
     * @memberof DescribeCdPipelineConfigsResponseData
     */
    'PipelineConfigs'?: Array<PipelineConfig>;
}
/**
 * 
 * @export
 * @interface DescribeCdPipelineRequest
 */
export interface DescribeCdPipelineRequest {
    /**
     * 部署流程执行记录 ID
     * @type {string}
     * @memberof DescribeCdPipelineRequest
     */
    'PipelineExecutionId'?: string;
}
/**
 * DescribeCdPipelineResponseData 结构
 * @export
 * @interface DescribeCdPipelineResponseData
 */
export interface DescribeCdPipelineResponseData {
    /**
     * 应用名
     * @type {string}
     * @memberof DescribeCdPipelineResponseData
     */
    'Application'?: string;
    /**
     * 部署流程 ID
     * @type {string}
     * @memberof DescribeCdPipelineResponseData
     */
    'PipelineConfigId'?: string;
    /**
     * 部署流程执行记录 JSON
     * @type {string}
     * @memberof DescribeCdPipelineResponseData
     */
    'PipelineExecutionJsonContent'?: string;
    /**
     * 部署流程执行状态
     * @type {string}
     * @memberof DescribeCdPipelineResponseData
     */
    'PipelineExecutionStatus'?: string;
    /**
     * 部署流程名称
     * @type {string}
     * @memberof DescribeCdPipelineResponseData
     */
    'PipelineName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdTask200Response
 */
export interface DescribeCdTask200Response {
    /**
     * 
     * @type {DescribeCdTask200ResponseResponse}
     * @memberof DescribeCdTask200Response
     */
    'Response'?: DescribeCdTask200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCdTask200ResponseResponse
 */
export interface DescribeCdTask200ResponseResponse {
    /**
     * 
     * @type {DescribeCdTaskResponseData}
     * @memberof DescribeCdTask200ResponseResponse
     */
    'Data'?: DescribeCdTaskResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCdTask200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCdTaskRequest
 */
export interface DescribeCdTaskRequest {
    /**
     * 任务执行记录 ID
     * @type {string}
     * @memberof DescribeCdTaskRequest
     */
    'TaskExecutionId'?: string;
}
/**
 * DescribeCdTaskResponseData 结构
 * @export
 * @interface DescribeCdTaskResponseData
 */
export interface DescribeCdTaskResponseData {
    /**
     * 应用名
     * @type {string}
     * @memberof DescribeCdTaskResponseData
     */
    'Application'?: string;
    /**
     * CD 任务执行记录
     * @type {string}
     * @memberof DescribeCdTaskResponseData
     */
    'TaskExecutionJsonContent'?: string;
    /**
     * 任务执行状态
     * @type {string}
     * @memberof DescribeCdTaskResponseData
     */
    'TaskExecutionStatus'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodeSearch200Response
 */
export interface DescribeCodeSearch200Response {
    /**
     * 
     * @type {DescribeCodeSearch200ResponseResponse}
     * @memberof DescribeCodeSearch200Response
     */
    'Response'?: DescribeCodeSearch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodeSearch200ResponseResponse
 */
export interface DescribeCodeSearch200ResponseResponse {
    /**
     * 
     * @type {GrepLineData}
     * @memberof DescribeCodeSearch200ResponseResponse
     */
    'Data'?: GrepLineData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodeSearch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodeSearchRequest
 */
export interface DescribeCodeSearchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeCodeSearchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeCodeSearchRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径（如需查询某个路径下的代码片段，需要输入此参数）
     * @type {string}
     * @memberof DescribeCodeSearchRequest
     */
    'FilePath'?: string;
    /**
     * 查询代码片段关键字
     * @type {string}
     * @memberof DescribeCodeSearchRequest
     */
    'KeyWord'?: string;
    /**
     * 页码数量
     * @type {number}
     * @memberof DescribeCodeSearchRequest
     */
    'PageNumber'?: number;
    /**
     * 页码大小
     * @type {number}
     * @memberof DescribeCodeSearchRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuild200Response
 */
export interface DescribeCodingCIBuild200Response {
    /**
     * 
     * @type {DescribeCodingCIBuild200ResponseResponse}
     * @memberof DescribeCodingCIBuild200Response
     */
    'Response'?: DescribeCodingCIBuild200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuild200ResponseResponse
 */
export interface DescribeCodingCIBuild200ResponseResponse {
    /**
     * 
     * @type {CodingCIBuild}
     * @memberof DescribeCodingCIBuild200ResponseResponse
     */
    'Build'?: CodingCIBuild;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuild200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildArtifacts200Response
 */
export interface DescribeCodingCIBuildArtifacts200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildArtifacts200ResponseResponse}
     * @memberof DescribeCodingCIBuildArtifacts200Response
     */
    'Response'?: DescribeCodingCIBuildArtifacts200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildArtifacts200ResponseResponse
 */
export interface DescribeCodingCIBuildArtifacts200ResponseResponse {
    /**
     * 
     * @type {BuildDescribeCodingCIBuildArtifactsData}
     * @memberof DescribeCodingCIBuildArtifacts200ResponseResponse
     */
    'Data'?: BuildDescribeCodingCIBuildArtifactsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildArtifacts200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildArtifactsRequest
 */
export interface DescribeCodingCIBuildArtifactsRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildArtifactsRequest
     */
    'BuildId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildEnvs200Response
 */
export interface DescribeCodingCIBuildEnvs200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildEnvs200ResponseResponse}
     * @memberof DescribeCodingCIBuildEnvs200Response
     */
    'Response'?: DescribeCodingCIBuildEnvs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildEnvs200ResponseResponse
 */
export interface DescribeCodingCIBuildEnvs200ResponseResponse {
    /**
     * 环境变量列表
     * @type {Array<CIJobEnv>}
     * @memberof DescribeCodingCIBuildEnvs200ResponseResponse
     */
    'EnvList'?: Array<CIJobEnv> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildEnvs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildEnvsRequest
 */
export interface DescribeCodingCIBuildEnvsRequest {
    /**
     * 构建ID
     * @type {number}
     * @memberof DescribeCodingCIBuildEnvsRequest
     */
    'BuildId'?: number;
    /**
     * SYSTEM（系统内置环境变量） Param（触发构建输入环境变量） Env（构建计划填写环境变量）
     * @type {string}
     * @memberof DescribeCodingCIBuildEnvsRequest
     */
    'Type'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildHtmlReports200Response
 */
export interface DescribeCodingCIBuildHtmlReports200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildHtmlReports200ResponseResponse}
     * @memberof DescribeCodingCIBuildHtmlReports200Response
     */
    'Response'?: DescribeCodingCIBuildHtmlReports200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildHtmlReports200ResponseResponse
 */
export interface DescribeCodingCIBuildHtmlReports200ResponseResponse {
    /**
     * 
     * @type {BuildDescribeCodingCIBuildHtmlReportsData}
     * @memberof DescribeCodingCIBuildHtmlReports200ResponseResponse
     */
    'Data'?: BuildDescribeCodingCIBuildHtmlReportsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildHtmlReports200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildLog200Response
 */
export interface DescribeCodingCIBuildLog200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildLog200ResponseResponse}
     * @memberof DescribeCodingCIBuildLog200Response
     */
    'Response'?: DescribeCodingCIBuildLog200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildLog200ResponseResponse
 */
export interface DescribeCodingCIBuildLog200ResponseResponse {
    /**
     * 
     * @type {DescribeCodingCIBuildLogData}
     * @memberof DescribeCodingCIBuildLog200ResponseResponse
     */
    'Data'?: DescribeCodingCIBuildLogData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildLog200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * DescribeCodingCIBuildLog 返回值
 * @export
 * @interface DescribeCodingCIBuildLogData
 */
export interface DescribeCodingCIBuildLogData {
    /**
     * 日志
     * @type {string}
     * @memberof DescribeCodingCIBuildLogData
     */
    'Log'?: string;
    /**
     * 是否有更多的日志
     * @type {boolean}
     * @memberof DescribeCodingCIBuildLogData
     */
    'MoreData'?: boolean;
    /**
     * 当前展示日志长度
     * @type {number}
     * @memberof DescribeCodingCIBuildLogData
     */
    'TextDelivered'?: number;
    /**
     * 总日志长度
     * @type {number}
     * @memberof DescribeCodingCIBuildLogData
     */
    'TextSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildLogRaw200Response
 */
export interface DescribeCodingCIBuildLogRaw200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildLogRaw200ResponseResponse}
     * @memberof DescribeCodingCIBuildLogRaw200Response
     */
    'Response'?: DescribeCodingCIBuildLogRaw200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildLogRaw200ResponseResponse
 */
export interface DescribeCodingCIBuildLogRaw200ResponseResponse {
    /**
     * 
     * @type {DescribeCodingCIBuildLogRawData}
     * @memberof DescribeCodingCIBuildLogRaw200ResponseResponse
     */
    'Data'?: DescribeCodingCIBuildLogRawData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildLogRaw200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 构建完整的日志
 * @export
 * @interface DescribeCodingCIBuildLogRawData
 */
export interface DescribeCodingCIBuildLogRawData {
    /**
     * 日志
     * @type {string}
     * @memberof DescribeCodingCIBuildLogRawData
     */
    'Raw'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildLogRawRequest
 */
export interface DescribeCodingCIBuildLogRawRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildLogRawRequest
     */
    'BuildId'?: number;
    /**
     * 日志开始位置
     * @type {number}
     * @memberof DescribeCodingCIBuildLogRawRequest
     */
    'Start'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildLogRequest
 */
export interface DescribeCodingCIBuildLogRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildLogRequest
     */
    'BuildId'?: number;
    /**
     * 日志的开始位置
     * @type {number}
     * @memberof DescribeCodingCIBuildLogRequest
     */
    'Start'?: number;
}
/**
 * DescribeCodingCIBuildMetrics 结构
 * @export
 * @interface DescribeCodingCIBuildMetrics
 */
export interface DescribeCodingCIBuildMetrics {
    /**
     * 日期
     * @type {string}
     * @memberof DescribeCodingCIBuildMetrics
     */
    'Date'?: string | null;
    /**
     * 构建成功总数
     * @type {number}
     * @memberof DescribeCodingCIBuildMetrics
     */
    'SuccessBuildCount'?: number;
    /**
     * 构建总数
     * @type {number}
     * @memberof DescribeCodingCIBuildMetrics
     */
    'TotalBuildCount'?: number;
    /**
     * 构建总耗时，单位毫秒
     * @type {number}
     * @memberof DescribeCodingCIBuildMetrics
     */
    'TotalDuration'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildMetrics200Response
 */
export interface DescribeCodingCIBuildMetrics200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildMetrics200ResponseResponse}
     * @memberof DescribeCodingCIBuildMetrics200Response
     */
    'Response'?: DescribeCodingCIBuildMetrics200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildMetrics200ResponseResponse
 */
export interface DescribeCodingCIBuildMetrics200ResponseResponse {
    /**
     * BuildMetrics 数组结构
     * @type {Array<DescribeCodingCIBuildMetrics>}
     * @memberof DescribeCodingCIBuildMetrics200ResponseResponse
     */
    'Data'?: Array<DescribeCodingCIBuildMetrics> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildMetrics200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildMetricsRequest
 */
export interface DescribeCodingCIBuildMetricsRequest {
    /**
     * 结束时间 2020-11-20
     * @type {string}
     * @memberof DescribeCodingCIBuildMetricsRequest
     */
    'EndTime'?: string;
    /**
     * 项目 ID,Type 为 PROJECT 时必填
     * @type {number}
     * @memberof DescribeCodingCIBuildMetricsRequest
     */
    'ProjectId'?: number;
    /**
     * 开始时间 2020-11-10
     * @type {string}
     * @memberof DescribeCodingCIBuildMetricsRequest
     */
    'StartTime'?: string;
    /**
     * 查询级别 PROJECT 级别，TEAM 级别，目前只支持 PROJECT
     * @type {string}
     * @memberof DescribeCodingCIBuildMetricsRequest
     */
    'Type'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStage200Response
 */
export interface DescribeCodingCIBuildStage200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildStage200ResponseResponse}
     * @memberof DescribeCodingCIBuildStage200Response
     */
    'Response'?: DescribeCodingCIBuildStage200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildStage200ResponseResponse
 */
export interface DescribeCodingCIBuildStage200ResponseResponse {
    /**
     * 
     * @type {CodingCIBuildStageData}
     * @memberof DescribeCodingCIBuildStage200ResponseResponse
     */
    'Data'?: CodingCIBuildStageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildStage200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStageRequest
 */
export interface DescribeCodingCIBuildStageRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStageRequest
     */
    'BuildId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStatistics200Response
 */
export interface DescribeCodingCIBuildStatistics200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildStatistics200ResponseResponse}
     * @memberof DescribeCodingCIBuildStatistics200Response
     */
    'Response'?: DescribeCodingCIBuildStatistics200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildStatistics200ResponseResponse
 */
export interface DescribeCodingCIBuildStatistics200ResponseResponse {
    /**
     * 
     * @type {DescribeCodingCIBuildStatisticsResponseData}
     * @memberof DescribeCodingCIBuildStatistics200ResponseResponse
     */
    'Data'?: DescribeCodingCIBuildStatisticsResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildStatistics200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStatisticsRequest
 */
export interface DescribeCodingCIBuildStatisticsRequest {
    /**
     * 结束时间
     * @type {string}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'EndTime'?: string;
    /**
     * MetricType 为 JOB 的时候使用该值，此时 ProjectId 可不传
     * @type {number}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'JobId'?: number;
    /**
     * 统计维度 Project 还是 JOB 目前只有 PROJECT
     * @type {string}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'MetricType'?: string;
    /**
     * 统计间隔单位秒
     * @type {number}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'Period'?: number;
    /**
     * MetricType 为 PROJECT 的时候使用该值，此时 JobId 可不传
     * @type {number}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'ProjectId'?: number;
    /**
     * 开始时间
     * @type {string}
     * @memberof DescribeCodingCIBuildStatisticsRequest
     */
    'StartTime'?: string;
}
/**
 * 构建统计数据结构
 * @export
 * @interface DescribeCodingCIBuildStatisticsResponseData
 */
export interface DescribeCodingCIBuildStatisticsResponseData {
    /**
     * 区间数据数组
     * @type {Array<number>}
     * @memberof DescribeCodingCIBuildStatisticsResponseData
     */
    'PointList'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStep200Response
 */
export interface DescribeCodingCIBuildStep200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildStep200ResponseResponse}
     * @memberof DescribeCodingCIBuildStep200Response
     */
    'Response'?: DescribeCodingCIBuildStep200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildStep200ResponseResponse
 */
export interface DescribeCodingCIBuildStep200ResponseResponse {
    /**
     * 
     * @type {CodingCIBuildStepData}
     * @memberof DescribeCodingCIBuildStep200ResponseResponse
     */
    'Data'?: CodingCIBuildStepData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildStep200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStepLog200Response
 */
export interface DescribeCodingCIBuildStepLog200Response {
    /**
     * 
     * @type {DescribeCodingCIBuildStepLog200ResponseResponse}
     * @memberof DescribeCodingCIBuildStepLog200Response
     */
    'Response'?: DescribeCodingCIBuildStepLog200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuildStepLog200ResponseResponse
 */
export interface DescribeCodingCIBuildStepLog200ResponseResponse {
    /**
     * 
     * @type {DescribeCodingCIBuildStepLogData}
     * @memberof DescribeCodingCIBuildStepLog200ResponseResponse
     */
    'Data'?: DescribeCodingCIBuildStepLogData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuildStepLog200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 获取构建某个阶段的日志
 * @export
 * @interface DescribeCodingCIBuildStepLogData
 */
export interface DescribeCodingCIBuildStepLogData {
    /**
     * 日志
     * @type {string}
     * @memberof DescribeCodingCIBuildStepLogData
     */
    'Log'?: string;
    /**
     * 是否有更多数据
     * @type {boolean}
     * @memberof DescribeCodingCIBuildStepLogData
     */
    'MoreData'?: boolean;
    /**
     * 当前展示总长度
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogData
     */
    'TextDelivered'?: number;
    /**
     * 总长度
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogData
     */
    'TextSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStepLogRequest
 */
export interface DescribeCodingCIBuildStepLogRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogRequest
     */
    'BuildId'?: number;
    /**
     * 阶段 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogRequest
     */
    'StageId'?: number;
    /**
     * 日志开始位置
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogRequest
     */
    'Start'?: number;
    /**
     * 步骤 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStepLogRequest
     */
    'StepId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildStepRequest
 */
export interface DescribeCodingCIBuildStepRequest {
    /**
     * 构建 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStepRequest
     */
    'BuildId'?: number;
    /**
     * 阶段 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildStepRequest
     */
    'StageId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuilds200Response
 */
export interface DescribeCodingCIBuilds200Response {
    /**
     * 
     * @type {DescribeCodingCIBuilds200ResponseResponse}
     * @memberof DescribeCodingCIBuilds200Response
     */
    'Response'?: DescribeCodingCIBuilds200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIBuilds200ResponseResponse
 */
export interface DescribeCodingCIBuilds200ResponseResponse {
    /**
     * 
     * @type {DescribeCodingCIBuildsData}
     * @memberof DescribeCodingCIBuilds200ResponseResponse
     */
    'Data'?: DescribeCodingCIBuildsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIBuilds200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 获取构建计划的构建列表
 * @export
 * @interface DescribeCodingCIBuildsData
 */
export interface DescribeCodingCIBuildsData {
    /**
     * 构建列表
     * @type {Array<CodingCIBuild>}
     * @memberof DescribeCodingCIBuildsData
     */
    'BuildList'?: Array<CodingCIBuild>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeCodingCIBuildsData
     */
    'PageNumber'?: number;
    /**
     * 每页多少条
     * @type {number}
     * @memberof DescribeCodingCIBuildsData
     */
    'PageSize'?: number;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeCodingCIBuildsData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIBuildsRequest
 */
export interface DescribeCodingCIBuildsRequest {
    /**
     * 构建计划 ID
     * @type {number}
     * @memberof DescribeCodingCIBuildsRequest
     */
    'JobId'?: number;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeCodingCIBuildsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeCodingCIBuildsRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIJob200Response
 */
export interface DescribeCodingCIJob200Response {
    /**
     * 
     * @type {DescribeCodingCIJob200ResponseResponse}
     * @memberof DescribeCodingCIJob200Response
     */
    'Response'?: DescribeCodingCIJob200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIJob200ResponseResponse
 */
export interface DescribeCodingCIJob200ResponseResponse {
    /**
     * 
     * @type {CodingCIJob}
     * @memberof DescribeCodingCIJob200ResponseResponse
     */
    'Job'?: CodingCIJob;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIJob200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIJobs200Response
 */
export interface DescribeCodingCIJobs200Response {
    /**
     * 
     * @type {DescribeCodingCIJobs200ResponseResponse}
     * @memberof DescribeCodingCIJobs200Response
     */
    'Response'?: DescribeCodingCIJobs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCIJobs200ResponseResponse
 */
export interface DescribeCodingCIJobs200ResponseResponse {
    /**
     * CI 任务列表
     * @type {Array<CodingCIJob>}
     * @memberof DescribeCodingCIJobs200ResponseResponse
     */
    'JobList'?: Array<CodingCIJob>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCIJobs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingCIJobsRequest
 */
export interface DescribeCodingCIJobsRequest {
    /**
     * 过滤参数
     * @type {Array<Filter>}
     * @memberof DescribeCodingCIJobsRequest
     */
    'Filter'?: Array<Filter>;
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeCodingCIJobsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeCodingCurrentUser200Response
 */
export interface DescribeCodingCurrentUser200Response {
    /**
     * 
     * @type {DescribeCodingCurrentUser200ResponseResponse}
     * @memberof DescribeCodingCurrentUser200Response
     */
    'Response'?: DescribeCodingCurrentUser200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingCurrentUser200ResponseResponse
 */
export interface DescribeCodingCurrentUser200ResponseResponse {
    /**
     * 
     * @type {CurrentUser}
     * @memberof DescribeCodingCurrentUser200ResponseResponse
     */
    'User'?: CurrentUser;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingCurrentUser200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingProjects200Response
 */
export interface DescribeCodingProjects200Response {
    /**
     * 
     * @type {DescribeCodingProjects200ResponseResponse}
     * @memberof DescribeCodingProjects200Response
     */
    'Response'?: DescribeCodingProjects200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCodingProjects200ResponseResponse
 */
export interface DescribeCodingProjects200ResponseResponse {
    /**
     * 
     * @type {ProjectsData}
     * @memberof DescribeCodingProjects200ResponseResponse
     */
    'Data'?: ProjectsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCodingProjects200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCodingProjectsRequest
 */
export interface DescribeCodingProjectsRequest {
    /**
     * 页数
     * @type {number}
     * @memberof DescribeCodingProjectsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeCodingProjectsRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeCodingProjectsRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCommitRefs200Response
 */
export interface DescribeCommitRefs200Response {
    /**
     * 
     * @type {DescribeCommitRefs200ResponseResponse}
     * @memberof DescribeCommitRefs200Response
     */
    'Response'?: DescribeCommitRefs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCommitRefs200ResponseResponse
 */
export interface DescribeCommitRefs200ResponseResponse {
    /**
     * 仓库信息详情列表
     * @type {Array<CommitRef>}
     * @memberof DescribeCommitRefs200ResponseResponse
     */
    'CommitRefs'?: Array<CommitRef> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCommitRefs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCommitRefsRequest
 */
export interface DescribeCommitRefsRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeCommitRefsRequest
     */
    'DepotPath'?: string;
    /**
     * 提交sha
     * @type {string}
     * @memberof DescribeCommitRefsRequest
     */
    'Sha'?: string;
    /**
     * ref类型,all 查询分支和标签，branch查询分支，tag查询标签
     * @type {string}
     * @memberof DescribeCommitRefsRequest
     */
    'Type'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCommitsBetweenCommitAndCommit200Response
 */
export interface DescribeCommitsBetweenCommitAndCommit200Response {
    /**
     * 
     * @type {DescribeCommitsBetweenCommitAndCommit200ResponseResponse}
     * @memberof DescribeCommitsBetweenCommitAndCommit200Response
     */
    'Response'?: DescribeCommitsBetweenCommitAndCommit200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeCommitsBetweenCommitAndCommit200ResponseResponse
 */
export interface DescribeCommitsBetweenCommitAndCommit200ResponseResponse {
    /**
     * 
     * @type {DifferentOfCommitDetail}
     * @memberof DescribeCommitsBetweenCommitAndCommit200ResponseResponse
     */
    'DifferentOfCommitDetail'?: DifferentOfCommitDetail;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeCommitsBetweenCommitAndCommit200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeCommitsBetweenCommitAndCommitRequest
 */
export interface DescribeCommitsBetweenCommitAndCommitRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeCommitsBetweenCommitAndCommitRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，选择其一即可
     * @type {string}
     * @memberof DescribeCommitsBetweenCommitAndCommitRequest
     */
    'DepotPath'?: string;
    /**
     * 查询起点sha值
     * @type {string}
     * @memberof DescribeCommitsBetweenCommitAndCommitRequest
     */
    'Source'?: string;
    /**
     * 查询目标sha值
     * @type {string}
     * @memberof DescribeCommitsBetweenCommitAndCommitRequest
     */
    'Target'?: string;
}
/**
 * 
 * @export
 * @interface DescribeConfigTemplateList200Response
 */
export interface DescribeConfigTemplateList200Response {
    /**
     * 
     * @type {DescribeConfigTemplateList200ResponseResponse}
     * @memberof DescribeConfigTemplateList200Response
     */
    'Response'?: DescribeConfigTemplateList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeConfigTemplateList200ResponseResponse
 */
export interface DescribeConfigTemplateList200ResponseResponse {
    /**
     * 配置方案列表
     * @type {Array<ConfigTemplate>}
     * @memberof DescribeConfigTemplateList200ResponseResponse
     */
    'ConfigTemplateList'?: Array<ConfigTemplate>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeConfigTemplateList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeConfigTemplateListRequest
 */
export interface DescribeConfigTemplateListRequest {
    /**
     * 配置方案协作类型，包括 SCRUM 和 CLASSIC
     * @type {string}
     * @memberof DescribeConfigTemplateListRequest
     */
    'CooperateMode'?: string;
    /**
     * 关键字
     * @type {string}
     * @memberof DescribeConfigTemplateListRequest
     */
    'Keyword'?: string;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeConfigTemplateListRequest
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof DescribeConfigTemplateListRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeConfigTemplateListRequest
     */
    'ProjectName'?: string;
    /**
     * 配置方案类型，全局配置方案取值 GLOBAL ，项目配置方案取值 PROJECT，不填默认为 GLOBAL
     * @type {string}
     * @memberof DescribeConfigTemplateListRequest
     */
    'TemplateType'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDefectTypes200Response
 */
export interface DescribeDefectTypes200Response {
    /**
     * 
     * @type {DescribeDefectTypes200ResponseResponse}
     * @memberof DescribeDefectTypes200Response
     */
    'Response'?: DescribeDefectTypes200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDefectTypes200ResponseResponse
 */
export interface DescribeDefectTypes200ResponseResponse {
    /**
     * 缺陷类型列表
     * @type {Array<DefectType>}
     * @memberof DescribeDefectTypes200ResponseResponse
     */
    'DefectTypes'?: Array<DefectType>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDefectTypes200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDefectTypesRequest
 */
export interface DescribeDefectTypesRequest {
    /**
     * 项目标识
     * @type {string}
     * @memberof DescribeDefectTypesRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepartment200Response
 */
export interface DescribeDepartment200Response {
    /**
     * 
     * @type {DescribeDepartment200ResponseResponse}
     * @memberof DescribeDepartment200Response
     */
    'Response'?: DescribeDepartment200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepartment200ResponseResponse
 */
export interface DescribeDepartment200ResponseResponse {
    /**
     * 
     * @type {DepartmentDepartmentTreeData}
     * @memberof DescribeDepartment200ResponseResponse
     */
    'DepartmentTree'?: DepartmentDepartmentTreeData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepartment200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepartmentMembers200Response
 */
export interface DescribeDepartmentMembers200Response {
    /**
     * 
     * @type {DescribeDepartmentMembers200ResponseResponse}
     * @memberof DescribeDepartmentMembers200Response
     */
    'Response'?: DescribeDepartmentMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepartmentMembers200ResponseResponse
 */
export interface DescribeDepartmentMembers200ResponseResponse {
    /**
     * 
     * @type {DepartmentDescribeDepartmentMemberPageList}
     * @memberof DescribeDepartmentMembers200ResponseResponse
     */
    'Data'?: DepartmentDescribeDepartmentMemberPageList;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepartmentMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepartmentMembersRequest
 */
export interface DescribeDepartmentMembersRequest {
    /**
     * 部门名
     * @type {number}
     * @memberof DescribeDepartmentMembersRequest
     */
    'DepartmentId'?: number;
    /**
     * 关键词
     * @type {string}
     * @memberof DescribeDepartmentMembersRequest
     */
    'KeyWords'?: string;
    /**
     * 页数
     * @type {number}
     * @memberof DescribeDepartmentMembersRequest
     */
    'PageNumber'?: number;
    /**
     * 每页数量
     * @type {number}
     * @memberof DescribeDepartmentMembersRequest
     */
    'PageSize'?: number;
    /**
     * 是否仅查询当前部门的直接成员
     * @type {boolean}
     * @memberof DescribeDepartmentMembersRequest
     */
    'Pointer'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeDepartmentRequest
 */
export interface DescribeDepartmentRequest {
    /**
     * 部门ID
     * @type {number}
     * @memberof DescribeDepartmentRequest
     */
    'DepartmentId'?: number;
    /**
     * 是否获取部门树
     * @type {boolean}
     * @memberof DescribeDepartmentRequest
     */
    'GetTree'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeDepotByNameInfo200Response
 */
export interface DescribeDepotByNameInfo200Response {
    /**
     * 
     * @type {DescribeDepotByNameInfo200ResponseResponse}
     * @memberof DescribeDepotByNameInfo200Response
     */
    'Response'?: DescribeDepotByNameInfo200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepotByNameInfo200ResponseResponse
 */
export interface DescribeDepotByNameInfo200ResponseResponse {
    /**
     * 
     * @type {DepotInfo}
     * @memberof DescribeDepotByNameInfo200ResponseResponse
     */
    'Depot'?: DepotInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepotByNameInfo200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotByNameInfoRequest
 */
export interface DescribeDepotByNameInfoRequest {
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeDepotByNameInfoRequest
     */
    'DepotName'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeDepotByNameInfoRequest
     */
    'ProjectName'?: string;
    /**
     * 团队GK
     * @type {string}
     * @memberof DescribeDepotByNameInfoRequest
     */
    'TeamGk'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotDefaultBranch200Response
 */
export interface DescribeDepotDefaultBranch200Response {
    /**
     * 
     * @type {DescribeDepotDefaultBranch200ResponseResponse}
     * @memberof DescribeDepotDefaultBranch200Response
     */
    'Response'?: DescribeDepotDefaultBranch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepotDefaultBranch200ResponseResponse
 */
export interface DescribeDepotDefaultBranch200ResponseResponse {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeDepotDefaultBranch200ResponseResponse
     */
    'BranchName'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepotDefaultBranch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotDefaultBranchRequest
 */
export interface DescribeDepotDefaultBranchRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeDepotDefaultBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotFilePushRules200Response
 */
export interface DescribeDepotFilePushRules200Response {
    /**
     * 
     * @type {ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse}
     * @memberof DescribeDepotFilePushRules200Response
     */
    'Response'?: ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeDepotFilePushRulesRequest
 */
export interface DescribeDepotFilePushRulesRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeDepotFilePushRulesRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotMergeRequests200Response
 */
export interface DescribeDepotMergeRequests200Response {
    /**
     * 
     * @type {DescribeDepotMergeRequests200ResponseResponse}
     * @memberof DescribeDepotMergeRequests200Response
     */
    'Response'?: DescribeDepotMergeRequests200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepotMergeRequests200ResponseResponse
 */
export interface DescribeDepotMergeRequests200ResponseResponse {
    /**
     * 
     * @type {DescribeMergeRequestsData}
     * @memberof DescribeDepotMergeRequests200ResponseResponse
     */
    'Data'?: DescribeMergeRequestsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepotMergeRequests200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotMergeRequestsRequest
 */
export interface DescribeDepotMergeRequestsRequest {
    /**
     * mr创建结束时间
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'CreatedAtEndDate'?: string;
    /**
     * mr创建开始时间
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'CreatedAtStartDate'?: string;
    /**
     * 合并请求创建者邮箱列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'CreatorEmails'?: Array<string>;
    /**
     * 合并请求创建者 Global Key 列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'CreatorGlobalKeys'?: Array<string>;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'DepotPath'?: string;
    /**
     * 是否升序
     * @type {boolean}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'IsSortDirectionAsc'?: boolean;
    /**
     * 关键词
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'KeyWord'?: string;
    /**
     * 关联标签
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'Labels'?: Array<string>;
    /**
     * 合并请求合并者邮箱列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'MergerEmails'?: Array<string>;
    /**
     * 合并请求合并者 Global Key 列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'MergerGlobalKeys'?: Array<string>;
    /**
     * 页数 默认为1
     * @type {number}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页数量 默认为10
     * @type {number}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'PageSize'?: number;
    /**
     * 合并请求评审者邮箱列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'ReviewerEmails'?: Array<string>;
    /**
     * 评审者 Global Key 列表
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'ReviewerGlobalKeys'?: Array<string>;
    /**
     * 排序 created_at merged_at action_at
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'Sort'?: string;
    /**
     * 源分支
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'SourceBranches'?: Array<string>;
    /**
     * 合并请求状态 OPEN CLOSE ALL ACCEPTED
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'Status'?: string;
    /**
     * 目标分支
     * @type {Array<string>}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'TargetBranches'?: Array<string>;
    /**
     * mr更新结束时间
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'UpdatedAtEndDate'?: string;
    /**
     * mr更新开始时间
     * @type {string}
     * @memberof DescribeDepotMergeRequestsRequest
     */
    'UpdatedAtStartDate'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotPushSetting200Response
 */
export interface DescribeDepotPushSetting200Response {
    /**
     * 
     * @type {ModifyDepotPushSetting200ResponseResponse}
     * @memberof DescribeDepotPushSetting200Response
     */
    'Response'?: ModifyDepotPushSetting200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeDepotSpecDetailRequest
 */
export interface DescribeDepotSpecDetailRequest {
    /**
     * 仓库路径（和仓库规范名字二选一选填）
     * @type {string}
     * @memberof DescribeDepotSpecDetailRequest
     */
    'DepotPath'?: string;
    /**
     * 仓库规范名字（和仓库路径二选一选填）
     * @type {string}
     * @memberof DescribeDepotSpecDetailRequest
     */
    'DepotSpecName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDepotSpecs200Response
 */
export interface DescribeDepotSpecs200Response {
    /**
     * 
     * @type {DescribeDepotSpecs200ResponseResponse}
     * @memberof DescribeDepotSpecs200Response
     */
    'Response'?: DescribeDepotSpecs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDepotSpecs200ResponseResponse
 */
export interface DescribeDepotSpecs200ResponseResponse {
    /**
     * 仓库规范列表
     * @type {Array<DepotSpec>}
     * @memberof DescribeDepotSpecs200ResponseResponse
     */
    'DepotSpecs'?: Array<DepotSpec> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDepotSpecs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDifferentBetween2Commits200Response
 */
export interface DescribeDifferentBetween2Commits200Response {
    /**
     * 
     * @type {DescribeDifferentBetween2Commits200ResponseResponse}
     * @memberof DescribeDifferentBetween2Commits200Response
     */
    'Response'?: DescribeDifferentBetween2Commits200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDifferentBetween2Commits200ResponseResponse
 */
export interface DescribeDifferentBetween2Commits200ResponseResponse {
    /**
     * 
     * @type {QcloudApiGitDepotDiffFileInfo}
     * @memberof DescribeDifferentBetween2Commits200ResponseResponse
     */
    'DiffFileInfo'?: QcloudApiGitDepotDiffFileInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDifferentBetween2Commits200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDifferentBetween2CommitsRequest
 */
export interface DescribeDifferentBetween2CommitsRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与DepotID二选一即可
     * @type {string}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'Path'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'Source'?: string;
    /**
     * commit对比方式,是否直接对比差异
     * @type {boolean}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'Straight'?: boolean;
    /**
     * 目标分支
     * @type {string}
     * @memberof DescribeDifferentBetween2CommitsRequest
     */
    'Target'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDifferentBetweenTwoCommits200Response
 */
export interface DescribeDifferentBetweenTwoCommits200Response {
    /**
     * 
     * @type {DescribeDifferentBetweenTwoCommits200ResponseResponse}
     * @memberof DescribeDifferentBetweenTwoCommits200Response
     */
    'Response'?: DescribeDifferentBetweenTwoCommits200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeDifferentBetweenTwoCommits200ResponseResponse
 */
export interface DescribeDifferentBetweenTwoCommits200ResponseResponse {
    /**
     * 
     * @type {DiffFileInfo}
     * @memberof DescribeDifferentBetweenTwoCommits200ResponseResponse
     */
    'DiffFileInfo'?: DiffFileInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeDifferentBetweenTwoCommits200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeDifferentBetweenTwoCommitsRequest
 */
export interface DescribeDifferentBetweenTwoCommitsRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeDifferentBetweenTwoCommitsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeDifferentBetweenTwoCommitsRequest
     */
    'DepotPath'?: string;
    /**
     * 文件位置
     * @type {string}
     * @memberof DescribeDifferentBetweenTwoCommitsRequest
     */
    'Path'?: string;
    /**
     * 源请求 Sha 值,分支名称
     * @type {string}
     * @memberof DescribeDifferentBetweenTwoCommitsRequest
     */
    'Source'?: string;
    /**
     * 目标请求 Sha 值,分支名称
     * @type {string}
     * @memberof DescribeDifferentBetweenTwoCommitsRequest
     */
    'Target'?: string;
}
/**
 * 
 * @export
 * @interface DescribeEvents200Response
 */
export interface DescribeEvents200Response {
    /**
     * 
     * @type {DescribeEvents200ResponseResponse}
     * @memberof DescribeEvents200Response
     */
    'Response'?: DescribeEvents200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeEvents200ResponseResponse
 */
export interface DescribeEvents200ResponseResponse {
    /**
     * 事件列表
     * @type {Array<ServiceHookEvent>}
     * @memberof DescribeEvents200ResponseResponse
     */
    'Event'?: Array<ServiceHookEvent>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeEvents200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBlameInfo200Response
 */
export interface DescribeGitBlameInfo200Response {
    /**
     * 
     * @type {DescribeGitBlameInfo200ResponseResponse}
     * @memberof DescribeGitBlameInfo200Response
     */
    'Response'?: DescribeGitBlameInfo200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBlameInfo200ResponseResponse
 */
export interface DescribeGitBlameInfo200ResponseResponse {
    /**
     * 提交信息
     * @type {Array<CommitInfo>}
     * @memberof DescribeGitBlameInfo200ResponseResponse
     */
    'Info'?: Array<CommitInfo> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBlameInfo200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBlameInfoRequest
 */
export interface DescribeGitBlameInfoRequest {
    /**
     * 提交sha
     * @type {string}
     * @memberof DescribeGitBlameInfoRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitBlameInfoRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitBlameInfoRequest
     */
    'FilePath'?: string;
    /**
     * 结束行
     * @type {number}
     * @memberof DescribeGitBlameInfoRequest
     */
    'LineEnd'?: number;
    /**
     * 开始行
     * @type {number}
     * @memberof DescribeGitBlameInfoRequest
     */
    'LineSnat'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitBlob200Response
 */
export interface DescribeGitBlob200Response {
    /**
     * 
     * @type {DescribeGitBlob200ResponseResponse}
     * @memberof DescribeGitBlob200Response
     */
    'Response'?: DescribeGitBlob200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBlob200ResponseResponse
 */
export interface DescribeGitBlob200ResponseResponse {
    /**
     * 
     * @type {BlobDetail}
     * @memberof DescribeGitBlob200ResponseResponse
     */
    'Data'?: BlobDetail;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBlob200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBlobRaw200Response
 */
export interface DescribeGitBlobRaw200Response {
    /**
     * 
     * @type {DescribeGitBlobRaw200ResponseResponse}
     * @memberof DescribeGitBlobRaw200Response
     */
    'Response'?: DescribeGitBlobRaw200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBlobRaw200ResponseResponse
 */
export interface DescribeGitBlobRaw200ResponseResponse {
    /**
     * blob 文本内容
     * @type {string}
     * @memberof DescribeGitBlobRaw200ResponseResponse
     */
    'Content'?: string | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBlobRaw200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBlobRawRequest
 */
export interface DescribeGitBlobRawRequest {
    /**
     * Blob ID
     * @type {string}
     * @memberof DescribeGitBlobRawRequest
     */
    'BlobSha'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DescribeGitBlobRawRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitBlobRawRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBlobRequest
 */
export interface DescribeGitBlobRequest {
    /**
     * Blob ID
     * @type {string}
     * @memberof DescribeGitBlobRequest
     */
    'BlobSha'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DescribeGitBlobRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitBlobRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranch200Response
 */
export interface DescribeGitBranch200Response {
    /**
     * 
     * @type {DescribeGitBranch200ResponseResponse}
     * @memberof DescribeGitBranch200Response
     */
    'Response'?: DescribeGitBranch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBranch200ResponseResponse
 */
export interface DescribeGitBranch200ResponseResponse {
    /**
     * 
     * @type {GitBranch}
     * @memberof DescribeGitBranch200ResponseResponse
     */
    'GitBranch'?: GitBranch;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBranch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchList200Response
 */
export interface DescribeGitBranchList200Response {
    /**
     * 
     * @type {DescribeGitBranchList200ResponseResponse}
     * @memberof DescribeGitBranchList200Response
     */
    'Response'?: DescribeGitBranchList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBranchList200ResponseResponse
 */
export interface DescribeGitBranchList200ResponseResponse {
    /**
     * 
     * @type {GitBranchesData}
     * @memberof DescribeGitBranchList200ResponseResponse
     */
    'GitBranchesData'?: GitBranchesData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBranchList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchListRequest
 */
export interface DescribeGitBranchListRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitBranchListRequest
     */
    'DepotPath'?: string;
    /**
     * 查询的关键词
     * @type {string}
     * @memberof DescribeGitBranchListRequest
     */
    'KeyWord'?: string;
    /**
     * 分页页码
     * @type {number}
     * @memberof DescribeGitBranchListRequest
     */
    'PageNumber'?: number;
    /**
     * 分页页距,默认为10
     * @type {number}
     * @memberof DescribeGitBranchListRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchRequest
 */
export interface DescribeGitBranchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeGitBranchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与DepotId选其一就可以
     * @type {string}
     * @memberof DescribeGitBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranches200Response
 */
export interface DescribeGitBranches200Response {
    /**
     * 
     * @type {DescribeGitBranches200ResponseResponse}
     * @memberof DescribeGitBranches200Response
     */
    'Response'?: DescribeGitBranches200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBranches200ResponseResponse
 */
export interface DescribeGitBranches200ResponseResponse {
    /**
     * 分支详细信息
     * @type {Array<GitBranchInfo>}
     * @memberof DescribeGitBranches200ResponseResponse
     */
    'Branches'?: Array<GitBranchInfo> | null;
    /**
     * 分支数量
     * @type {number}
     * @memberof DescribeGitBranches200ResponseResponse
     */
    'TotalCount'?: number | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBranches200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchesBySha200Response
 */
export interface DescribeGitBranchesBySha200Response {
    /**
     * 
     * @type {DescribeGitBranchesBySha200ResponseResponse}
     * @memberof DescribeGitBranchesBySha200Response
     */
    'Response'?: DescribeGitBranchesBySha200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitBranchesBySha200ResponseResponse
 */
export interface DescribeGitBranchesBySha200ResponseResponse {
    /**
     * ref信息列表
     * @type {Array<RefInfo>}
     * @memberof DescribeGitBranchesBySha200ResponseResponse
     */
    'Refs'?: Array<RefInfo>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitBranchesBySha200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchesByShaRequest
 */
export interface DescribeGitBranchesByShaRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitBranchesByShaRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitBranchesByShaRequest
     */
    'DepotPath'?: string;
    /**
     * sha值
     * @type {string}
     * @memberof DescribeGitBranchesByShaRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitBranchesRequest
 */
export interface DescribeGitBranchesRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitBranchesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与DepotId二选一即可
     * @type {string}
     * @memberof DescribeGitBranchesRequest
     */
    'DepotPath'?: string;
    /**
     * 查询的关键词
     * @type {string}
     * @memberof DescribeGitBranchesRequest
     */
    'KeyWord'?: string;
    /**
     * 分页页码
     * @type {number}
     * @memberof DescribeGitBranchesRequest
     */
    'PageNumber'?: number;
    /**
     * 分页页距,默认为10
     * @type {number}
     * @memberof DescribeGitBranchesRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitComments200Response
 */
export interface DescribeGitCommitComments200Response {
    /**
     * 
     * @type {DescribeGitCommitComments200ResponseResponse}
     * @memberof DescribeGitCommitComments200Response
     */
    'Response'?: DescribeGitCommitComments200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitComments200ResponseResponse
 */
export interface DescribeGitCommitComments200ResponseResponse {
    /**
     * 
     * @type {GitCommitComment}
     * @memberof DescribeGitCommitComments200ResponseResponse
     */
    'GitCommitComments'?: GitCommitComment;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitComments200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitCommentsRequest
 */
export interface DescribeGitCommitCommentsRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitCommitCommentsRequest
     */
    'DepotPath'?: string;
    /**
     * 页码数量
     * @type {number}
     * @memberof DescribeGitCommitCommentsRequest
     */
    'PageNumber'?: number;
    /**
     * 页码大小
     * @type {number}
     * @memberof DescribeGitCommitCommentsRequest
     */
    'PageSize'?: number;
    /**
     * 提交Sha
     * @type {string}
     * @memberof DescribeGitCommitCommentsRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitDiff200Response
 */
export interface DescribeGitCommitDiff200Response {
    /**
     * 
     * @type {DescribeGitCommitDiff200ResponseResponse}
     * @memberof DescribeGitCommitDiff200Response
     */
    'Response'?: DescribeGitCommitDiff200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitDiff200ResponseResponse
 */
export interface DescribeGitCommitDiff200ResponseResponse {
    /**
     * diff信息详情
     * @type {Array<GitDiff>}
     * @memberof DescribeGitCommitDiff200ResponseResponse
     */
    'Diffs'?: Array<GitDiff> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitDiff200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitDiffRequest
 */
export interface DescribeGitCommitDiffRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitCommitDiffRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitCommitDiffRequest
     */
    'DepotPath'?: string;
    /**
     * 查询指定文件时填写
     * @type {string}
     * @memberof DescribeGitCommitDiffRequest
     */
    'Path'?: string;
    /**
     * 提交id
     * @type {string}
     * @memberof DescribeGitCommitDiffRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitFilePathList200Response
 */
export interface DescribeGitCommitFilePathList200Response {
    /**
     * 
     * @type {DescribeGitCommitFilePathList200ResponseResponse}
     * @memberof DescribeGitCommitFilePathList200Response
     */
    'Response'?: DescribeGitCommitFilePathList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitFilePathList200ResponseResponse
 */
export interface DescribeGitCommitFilePathList200ResponseResponse {
    /**
     * 文件路径列表
     * @type {Array<GitCommitFilePath>}
     * @memberof DescribeGitCommitFilePathList200ResponseResponse
     */
    'FilePaths'?: Array<GitCommitFilePath> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitFilePathList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitFilePathListRequest
 */
export interface DescribeGitCommitFilePathListRequest {
    /**
     * 提交的ID
     * @type {string}
     * @memberof DescribeGitCommitFilePathListRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库路径，也可填写仓库ID的字符串形式
     * @type {string}
     * @memberof DescribeGitCommitFilePathListRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitInfo200Response
 */
export interface DescribeGitCommitInfo200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof DescribeGitCommitInfo200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitInfoRequest
 */
export interface DescribeGitCommitInfoRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitCommitInfoRequest
     */
    'DepotId'?: number;
    /**
     * 与DepotId二选一即可
     * @type {string}
     * @memberof DescribeGitCommitInfoRequest
     */
    'DepotPath'?: string;
    /**
     * 请求的sha值
     * @type {string}
     * @memberof DescribeGitCommitInfoRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitInfos200Response
 */
export interface DescribeGitCommitInfos200Response {
    /**
     * 
     * @type {DescribeGitCommitInfos200ResponseResponse}
     * @memberof DescribeGitCommitInfos200Response
     */
    'Response'?: DescribeGitCommitInfos200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitInfos200ResponseResponse
 */
export interface DescribeGitCommitInfos200ResponseResponse {
    /**
     * 请求集合
     * @type {Array<GitCommit>}
     * @memberof DescribeGitCommitInfos200ResponseResponse
     */
    'Commits'?: Array<GitCommit>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitInfos200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitInfosRequest
 */
export interface DescribeGitCommitInfosRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitCommitInfosRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'DepotPath'?: string;
    /**
     * 查询截止日志
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'EndDate'?: string;
    /**
     * 提交信息中的关键词
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'KeyWord'?: string;
    /**
     * 分页页码
     * @type {number}
     * @memberof DescribeGitCommitInfosRequest
     */
    'PageNumber'?: number;
    /**
     * 分页页距
     * @type {number}
     * @memberof DescribeGitCommitInfosRequest
     */
    'PageSize'?: number;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'Path'?: string;
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'Ref'?: string;
    /**
     * 查询起始日期
     * @type {string}
     * @memberof DescribeGitCommitInfosRequest
     */
    'StartDate'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitNote200Response
 */
export interface DescribeGitCommitNote200Response {
    /**
     * 
     * @type {DescribeGitCommitNote200ResponseResponse}
     * @memberof DescribeGitCommitNote200Response
     */
    'Response'?: DescribeGitCommitNote200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitNote200ResponseResponse
 */
export interface DescribeGitCommitNote200ResponseResponse {
    /**
     * 提交注释
     * @type {string}
     * @memberof DescribeGitCommitNote200ResponseResponse
     */
    'CommitNote'?: string;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitNote200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitNoteRequest
 */
export interface DescribeGitCommitNoteRequest {
    /**
     * 提交的 Sha
     * @type {string}
     * @memberof DescribeGitCommitNoteRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitCommitNoteRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitCommitNoteRequest
     */
    'DepotPath'?: string;
    /**
     * 注释 分支 Ref
     * @type {string}
     * @memberof DescribeGitCommitNoteRequest
     */
    'NotesRef'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitStatus200Response
 */
export interface DescribeGitCommitStatus200Response {
    /**
     * 
     * @type {DescribeGitCommitStatus200ResponseResponse}
     * @memberof DescribeGitCommitStatus200Response
     */
    'Response'?: DescribeGitCommitStatus200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitStatus200ResponseResponse
 */
export interface DescribeGitCommitStatus200ResponseResponse {
    /**
     *  提交流水线状态列表
     * @type {Array<StatusCheckResult>}
     * @memberof DescribeGitCommitStatus200ResponseResponse
     */
    'StatusCheckResults'?: Array<StatusCheckResult> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitStatus200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitStatusRequest
 */
export interface DescribeGitCommitStatusRequest {
    /**
     * 提交id
     * @type {string}
     * @memberof DescribeGitCommitStatusRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitCommitStatusRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitCommitStatusRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitCommitsInPage200Response
 */
export interface DescribeGitCommitsInPage200Response {
    /**
     * 
     * @type {DescribeGitCommitsInPage200ResponseResponse}
     * @memberof DescribeGitCommitsInPage200Response
     */
    'Response'?: DescribeGitCommitsInPage200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitCommitsInPage200ResponseResponse
 */
export interface DescribeGitCommitsInPage200ResponseResponse {
    /**
     * 
     * @type {CommitData}
     * @memberof DescribeGitCommitsInPage200ResponseResponse
     */
    'Data'?: CommitData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitCommitsInPage200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitContributors200Response
 */
export interface DescribeGitContributors200Response {
    /**
     * 
     * @type {DescribeGitContributors200ResponseResponse}
     * @memberof DescribeGitContributors200Response
     */
    'Response'?: DescribeGitContributors200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitContributors200ResponseResponse
 */
export interface DescribeGitContributors200ResponseResponse {
    /**
     * 贡献者列表
     * @type {Array<Contributor>}
     * @memberof DescribeGitContributors200ResponseResponse
     */
    'Contributors'?: Array<Contributor>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitContributors200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitContributorsRequest
 */
export interface DescribeGitContributorsRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitContributorsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitContributorsRequest
     */
    'DepotPath'?: string;
    /**
     * 分支或标签名，默认 HEAD
     * @type {string}
     * @memberof DescribeGitContributorsRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitDepot200Response
 */
export interface DescribeGitDepot200Response {
    /**
     * 
     * @type {DescribeDepotByNameInfo200ResponseResponse}
     * @memberof DescribeGitDepot200Response
     */
    'Response'?: DescribeDepotByNameInfo200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeGitDepotDeployKeys200Response
 */
export interface DescribeGitDepotDeployKeys200Response {
    /**
     * 
     * @type {DescribeGitDepotDeployKeys200ResponseResponse}
     * @memberof DescribeGitDepotDeployKeys200Response
     */
    'Response'?: DescribeGitDepotDeployKeys200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitDepotDeployKeys200ResponseResponse
 */
export interface DescribeGitDepotDeployKeys200ResponseResponse {
    /**
     * 部署公钥列表
     * @type {Array<DeployKeyInfo>}
     * @memberof DescribeGitDepotDeployKeys200ResponseResponse
     */
    'Keys'?: Array<DeployKeyInfo>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitDepotDeployKeys200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitDepotDeployKeysRequest
 */
export interface DescribeGitDepotDeployKeysRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeGitDepotDeployKeysRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitDepotDeployKeysRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitDepotRequest
 */
export interface DescribeGitDepotRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitDepotRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitDepotRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFile200Response
 */
export interface DescribeGitFile200Response {
    /**
     * 
     * @type {DescribeGitFile200ResponseResponse}
     * @memberof DescribeGitFile200Response
     */
    'Response'?: DescribeGitFile200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitFile200ResponseResponse
 */
export interface DescribeGitFile200ResponseResponse {
    /**
     * 
     * @type {GitFileItem}
     * @memberof DescribeGitFile200ResponseResponse
     */
    'GitFile'?: GitFileItem;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitFile200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFileContent200Response
 */
export interface DescribeGitFileContent200Response {
    /**
     * 
     * @type {DescribeGitFileContent200ResponseResponse}
     * @memberof DescribeGitFileContent200Response
     */
    'Response'?: DescribeGitFileContent200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitFileContent200ResponseResponse
 */
export interface DescribeGitFileContent200ResponseResponse {
    /**
     * 
     * @type {GitFileContent}
     * @memberof DescribeGitFileContent200ResponseResponse
     */
    'GitFileContent'?: GitFileContent;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitFileContent200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFileContentRequest
 */
export interface DescribeGitFileContentRequest {
    /**
     * commit的sha值
     * @type {string}
     * @memberof DescribeGitFileContentRequest
     */
    'CommitSha'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitFileContentRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitFileContentRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitFileContentRequest
     */
    'Path'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFileRequest
 */
export interface DescribeGitFileRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitFileRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitFileRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitFileRequest
     */
    'Path'?: string;
    /**
     * 分支名
     * @type {string}
     * @memberof DescribeGitFileRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFileStat200Response
 */
export interface DescribeGitFileStat200Response {
    /**
     * 
     * @type {DescribeGitFileStat200ResponseResponse}
     * @memberof DescribeGitFileStat200Response
     */
    'Response'?: DescribeGitFileStat200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitFileStat200ResponseResponse
 */
export interface DescribeGitFileStat200ResponseResponse {
    /**
     * 
     * @type {DescribeGitFileStatPayload}
     * @memberof DescribeGitFileStat200ResponseResponse
     */
    'Payload'?: DescribeGitFileStatPayload;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitFileStat200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 检查仓库文件是否存在
 * @export
 * @interface DescribeGitFileStatPayload
 */
export interface DescribeGitFileStatPayload {
    /**
     * 文件是否存在
     * @type {boolean}
     * @memberof DescribeGitFileStatPayload
     */
    'IsExist'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeGitFileStatRequest
 */
export interface DescribeGitFileStatRequest {
    /**
     * 仓库路径，格式：<team>/<project>/<depot>
     * @type {string}
     * @memberof DescribeGitFileStatRequest
     */
    'DepotPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitFileStatRequest
     */
    'Path'?: string;
    /**
     * tag | branch | commit
     * @type {string}
     * @memberof DescribeGitFileStatRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFiles200Response
 */
export interface DescribeGitFiles200Response {
    /**
     * 
     * @type {DescribeGitFiles200ResponseResponse}
     * @memberof DescribeGitFiles200Response
     */
    'Response'?: DescribeGitFiles200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitFiles200ResponseResponse
 */
export interface DescribeGitFiles200ResponseResponse {
    /**
     * 获取分支目录结构
     * @type {Array<GitTreeItem>}
     * @memberof DescribeGitFiles200ResponseResponse
     */
    'Items'?: Array<GitTreeItem>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitFiles200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitFilesRequest
 */
export interface DescribeGitFilesRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitFilesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitFilesRequest
     */
    'DepotPath'?: string;
    /**
     * 路径，不传即为根目录
     * @type {string}
     * @memberof DescribeGitFilesRequest
     */
    'Path'?: string;
    /**
     * 分支名
     * @type {string}
     * @memberof DescribeGitFilesRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeBase200Response
 */
export interface DescribeGitMergeBase200Response {
    /**
     * 
     * @type {DescribeGitMergeBase200ResponseResponse}
     * @memberof DescribeGitMergeBase200Response
     */
    'Response'?: DescribeGitMergeBase200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitMergeBase200ResponseResponse
 */
export interface DescribeGitMergeBase200ResponseResponse {
    /**
     * 
     * @type {GitCommit}
     * @memberof DescribeGitMergeBase200ResponseResponse
     */
    'Commit'?: GitCommit;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitMergeBase200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeBaseRequest
 */
export interface DescribeGitMergeBaseRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DescribeGitMergeBaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可 
     * @type {string}
     * @memberof DescribeGitMergeBaseRequest
     */
    'DepotPath'?: string;
    /**
     * 分支2
     * @type {string}
     * @memberof DescribeGitMergeBaseRequest
     */
    'DestRef'?: string;
    /**
     * 分支1
     * @type {string}
     * @memberof DescribeGitMergeBaseRequest
     */
    'SrcRef'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestDiffDetail200Response
 */
export interface DescribeGitMergeRequestDiffDetail200Response {
    /**
     * 
     * @type {DescribeGitMergeRequestDiffDetail200ResponseResponse}
     * @memberof DescribeGitMergeRequestDiffDetail200Response
     */
    'Response'?: DescribeGitMergeRequestDiffDetail200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitMergeRequestDiffDetail200ResponseResponse
 */
export interface DescribeGitMergeRequestDiffDetail200ResponseResponse {
    /**
     * 
     * @type {GitDiff}
     * @memberof DescribeGitMergeRequestDiffDetail200ResponseResponse
     */
    'Detail'?: GitDiff;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitMergeRequestDiffDetail200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestDiffDetailRequest
 */
export interface DescribeGitMergeRequestDiffDetailRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitMergeRequestDiffDetailRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitMergeRequestDiffDetailRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof DescribeGitMergeRequestDiffDetailRequest
     */
    'MergeId'?: number;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitMergeRequestDiffDetailRequest
     */
    'Path'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestDiffs200Response
 */
export interface DescribeGitMergeRequestDiffs200Response {
    /**
     * 
     * @type {DescribeGitMergeRequestDiffs200ResponseResponse}
     * @memberof DescribeGitMergeRequestDiffs200Response
     */
    'Response'?: DescribeGitMergeRequestDiffs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitMergeRequestDiffs200ResponseResponse
 */
export interface DescribeGitMergeRequestDiffs200ResponseResponse {
    /**
     * 
     * @type {MergeRequestDiff}
     * @memberof DescribeGitMergeRequestDiffs200ResponseResponse
     */
    'Diff'?: MergeRequestDiff;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitMergeRequestDiffs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestDiffsRequest
 */
export interface DescribeGitMergeRequestDiffsRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof DescribeGitMergeRequestDiffsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitMergeRequestDiffsRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求 ID
     * @type {number}
     * @memberof DescribeGitMergeRequestDiffsRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestParticipants200Response
 */
export interface DescribeGitMergeRequestParticipants200Response {
    /**
     * 
     * @type {DescribeGitMergeRequestParticipants200ResponseResponse}
     * @memberof DescribeGitMergeRequestParticipants200Response
     */
    'Response'?: DescribeGitMergeRequestParticipants200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitMergeRequestParticipants200ResponseResponse
 */
export interface DescribeGitMergeRequestParticipants200ResponseResponse {
    /**
     * 参与者列表
     * @type {Array<DepotUser>}
     * @memberof DescribeGitMergeRequestParticipants200ResponseResponse
     */
    'Participants'?: Array<DepotUser>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitMergeRequestParticipants200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestParticipantsRequest
 */
export interface DescribeGitMergeRequestParticipantsRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeGitMergeRequestParticipantsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitMergeRequestParticipantsRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求 IId
     * @type {number}
     * @memberof DescribeGitMergeRequestParticipantsRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestsBySha200Response
 */
export interface DescribeGitMergeRequestsBySha200Response {
    /**
     * 
     * @type {DescribeGitMergeRequestsBySha200ResponseResponse}
     * @memberof DescribeGitMergeRequestsBySha200Response
     */
    'Response'?: DescribeGitMergeRequestsBySha200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitMergeRequestsBySha200ResponseResponse
 */
export interface DescribeGitMergeRequestsBySha200ResponseResponse {
    /**
     * 合并请求详情
     * @type {Array<MergeRequestDetail>}
     * @memberof DescribeGitMergeRequestsBySha200ResponseResponse
     */
    'Details'?: Array<MergeRequestDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitMergeRequestsBySha200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitMergeRequestsByShaRequest
 */
export interface DescribeGitMergeRequestsByShaRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitMergeRequestsByShaRequest
     */
    'DepotId'?: number;
    /**
     * 与DepotId选择其一即可
     * @type {string}
     * @memberof DescribeGitMergeRequestsByShaRequest
     */
    'DepotPath'?: string;
    /**
     * 提交 Id
     * @type {string}
     * @memberof DescribeGitMergeRequestsByShaRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitProjectDeployKeysRequest
 */
export interface DescribeGitProjectDeployKeysRequest {
    /**
     * 项目 Id
     * @type {number}
     * @memberof DescribeGitProjectDeployKeysRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitProtectedTags200Response
 */
export interface DescribeGitProtectedTags200Response {
    /**
     * 
     * @type {DescribeGitProtectedTags200ResponseResponse}
     * @memberof DescribeGitProtectedTags200Response
     */
    'Response'?: DescribeGitProtectedTags200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitProtectedTags200ResponseResponse
 */
export interface DescribeGitProtectedTags200ResponseResponse {
    /**
     * 标签列表
     * @type {Array<GitTag>}
     * @memberof DescribeGitProtectedTags200ResponseResponse
     */
    'GitTags'?: Array<GitTag>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitProtectedTags200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitProtectedTagsByRule200Response
 */
export interface DescribeGitProtectedTagsByRule200Response {
    /**
     * 
     * @type {DescribeGitProtectedTags200ResponseResponse}
     * @memberof DescribeGitProtectedTagsByRule200Response
     */
    'Response'?: DescribeGitProtectedTags200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeGitProtectedTagsByRuleRequest
 */
export interface DescribeGitProtectedTagsByRuleRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeGitProtectedTagsByRuleRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitProtectedTagsByRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 保护规则
     * @type {string}
     * @memberof DescribeGitProtectedTagsByRuleRequest
     */
    'Rule'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitProtectedTagsRequest
 */
export interface DescribeGitProtectedTagsRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeGitProtectedTagsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitProtectedTagsRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitRef200Response
 */
export interface DescribeGitRef200Response {
    /**
     * 
     * @type {DescribeGitRef200ResponseResponse}
     * @memberof DescribeGitRef200Response
     */
    'Response'?: DescribeGitRef200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitRef200ResponseResponse
 */
export interface DescribeGitRef200ResponseResponse {
    /**
     * 
     * @type {GitRef}
     * @memberof DescribeGitRef200ResponseResponse
     */
    'GitRef'?: GitRef;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitRef200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitRefRequest
 */
export interface DescribeGitRefRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitRefRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitRefRequest
     */
    'DepotPath'?: string;
    /**
     * 分支名
     * @type {string}
     * @memberof DescribeGitRefRequest
     */
    'Revision'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitRefsBySha200Response
 */
export interface DescribeGitRefsBySha200Response {
    /**
     * 
     * @type {DescribeGitRefsBySha200ResponseResponse}
     * @memberof DescribeGitRefsBySha200Response
     */
    'Response'?: DescribeGitRefsBySha200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitRefsBySha200ResponseResponse
 */
export interface DescribeGitRefsBySha200ResponseResponse {
    /**
     * ref集合
     * @type {Array<GitReference>}
     * @memberof DescribeGitRefsBySha200ResponseResponse
     */
    'Refs'?: Array<GitReference> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitRefsBySha200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitRefsByShaRequest
 */
export interface DescribeGitRefsByShaRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitRefsByShaRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitRefsByShaRequest
     */
    'DepotPath'?: string;
    /**
     * 提交id
     * @type {string}
     * @memberof DescribeGitRefsByShaRequest
     */
    'Sha'?: string;
    /**
     * all：列表中既包含分支也包含标签，tag：列表中只包含标签，branch：列表中只包含分支
     * @type {string}
     * @memberof DescribeGitRefsByShaRequest
     */
    'Type'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitReleaseDetail200Response
 */
export interface DescribeGitReleaseDetail200Response {
    /**
     * 
     * @type {DescribeGitReleaseDetail200ResponseResponse}
     * @memberof DescribeGitReleaseDetail200Response
     */
    'Response'?: DescribeGitReleaseDetail200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitReleaseDetail200ResponseResponse
 */
export interface DescribeGitReleaseDetail200ResponseResponse {
    /**
     * 
     * @type {Release}
     * @memberof DescribeGitReleaseDetail200ResponseResponse
     */
    'Release'?: Release;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitReleaseDetail200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitReleaseDetailRequest
 */
export interface DescribeGitReleaseDetailRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitReleaseDetailRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitReleaseDetailRequest
     */
    'DepotPath'?: string;
    /**
     * 版本序号Id
     * @type {number}
     * @memberof DescribeGitReleaseDetailRequest
     */
    'ReleaseId'?: number;
    /**
     * 标签名称
     * @type {string}
     * @memberof DescribeGitReleaseDetailRequest
     */
    'TagName'?: string;
    /**
     * 是否展示资源地址
     * @type {boolean}
     * @memberof DescribeGitReleaseDetailRequest
     */
    'ShowResourceUrl'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeGitReleases200Response
 */
export interface DescribeGitReleases200Response {
    /**
     * 
     * @type {DescribeGitReleases200ResponseResponse}
     * @memberof DescribeGitReleases200Response
     */
    'Response'?: DescribeGitReleases200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitReleases200ResponseResponse
 */
export interface DescribeGitReleases200ResponseResponse {
    /**
     * 
     * @type {ReleaseListPage}
     * @memberof DescribeGitReleases200ResponseResponse
     */
    'ReleasePageList'?: ReleaseListPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitReleases200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitReleasesRequest
 */
export interface DescribeGitReleasesRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitReleasesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeGitReleasesRequest
     */
    'DepotPath'?: string;
    /**
     * 搜索条件:起始日期
     * @type {string}
     * @memberof DescribeGitReleasesRequest
     */
    'FromDate'?: string;
    /**
     * 页数
     * @type {number}
     * @memberof DescribeGitReleasesRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeGitReleasesRequest
     */
    'PageSize'?: number;
    /**
     * 搜索条件:版本状态(0:全部 1:已发布 2:预发布)
     * @type {number}
     * @memberof DescribeGitReleasesRequest
     */
    'Status'?: number;
    /**
     * 搜索条件:标签名字
     * @type {string}
     * @memberof DescribeGitReleasesRequest
     */
    'TagName'?: string;
    /**
     * 搜索条件:终止日期
     * @type {string}
     * @memberof DescribeGitReleasesRequest
     */
    'ToDate'?: string;
    /**
     * 是否展示资源地址
     * @type {boolean}
     * @memberof DescribeGitReleasesRequest
     */
    'ShowResourceUrl'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeGitTag200Response
 */
export interface DescribeGitTag200Response {
    /**
     * 
     * @type {CreateGitTag200ResponseResponse}
     * @memberof DescribeGitTag200Response
     */
    'Response'?: CreateGitTag200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeGitTagRequest
 */
export interface DescribeGitTagRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitTagRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitTagRequest
     */
    'DepotPath'?: string;
    /**
     * tag名称
     * @type {string}
     * @memberof DescribeGitTagRequest
     */
    'TagName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTags200Response
 */
export interface DescribeGitTags200Response {
    /**
     * 
     * @type {DescribeGitTags200ResponseResponse}
     * @memberof DescribeGitTags200Response
     */
    'Response'?: DescribeGitTags200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitTags200ResponseResponse
 */
export interface DescribeGitTags200ResponseResponse {
    /**
     * tag列表信息
     * @type {Array<GitTag>}
     * @memberof DescribeGitTags200ResponseResponse
     */
    'GitTags'?: Array<GitTag>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitTags200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTagsByBranch200Response
 */
export interface DescribeGitTagsByBranch200Response {
    /**
     * 
     * @type {DescribeGitTagsByBranch200ResponseResponse}
     * @memberof DescribeGitTagsByBranch200Response
     */
    'Response'?: DescribeGitTagsByBranch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitTagsByBranch200ResponseResponse
 */
export interface DescribeGitTagsByBranch200ResponseResponse {
    /**
     * tag列表
     * @type {Array<string>}
     * @memberof DescribeGitTagsByBranch200ResponseResponse
     */
    'Tags'?: Array<string>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitTagsByBranch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTagsByBranchRequest
 */
export interface DescribeGitTagsByBranchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeGitTagsByBranchRequest
     */
    'Branch'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitTagsByBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitTagsByBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTagsBySha200Response
 */
export interface DescribeGitTagsBySha200Response {
    /**
     * 
     * @type {DescribeGitTagsBySha200ResponseResponse}
     * @memberof DescribeGitTagsBySha200Response
     */
    'Response'?: DescribeGitTagsBySha200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitTagsBySha200ResponseResponse
 */
export interface DescribeGitTagsBySha200ResponseResponse {
    /**
     * tag集合
     * @type {Array<GitTag>}
     * @memberof DescribeGitTagsBySha200ResponseResponse
     */
    'GitTags'?: Array<GitTag> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitTagsBySha200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTagsByShaRequest
 */
export interface DescribeGitTagsByShaRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitTagsByShaRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitTagsByShaRequest
     */
    'DepotPath'?: string;
    /**
     * 提交id
     * @type {string}
     * @memberof DescribeGitTagsByShaRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTagsRequest
 */
export interface DescribeGitTagsRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeGitTagsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeGitTagsRequest
     */
    'DepotPath'?: string;
    /**
     * TagName的模糊查询关键字
     * @type {string}
     * @memberof DescribeGitTagsRequest
     */
    'KeyWord'?: string;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeGitTagsRequest
     */
    'Page'?: number;
    /**
     * 每页数量
     * @type {number}
     * @memberof DescribeGitTagsRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeGitTree200Response
 */
export interface DescribeGitTree200Response {
    /**
     * 
     * @type {DescribeGitTree200ResponseResponse}
     * @memberof DescribeGitTree200Response
     */
    'Response'?: DescribeGitTree200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGitTree200ResponseResponse
 */
export interface DescribeGitTree200ResponseResponse {
    /**
     * 1
     * @type {Array<GitTree>}
     * @memberof DescribeGitTree200ResponseResponse
     */
    'Trees'?: Array<GitTree>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGitTree200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGitTreeRequest
 */
export interface DescribeGitTreeRequest {
    /**
     * 仓库Id
     * @type {number}
     * @memberof DescribeGitTreeRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof DescribeGitTreeRequest
     */
    'DepotPath'?: string;
    /**
     * 是否递归
     * @type {boolean}
     * @memberof DescribeGitTreeRequest
     */
    'IsRecursive'?: boolean;
    /**
     * 文件路径
     * @type {string}
     * @memberof DescribeGitTreeRequest
     */
    'Path'?: string;
    /**
     * 分支或标签名，默认 HEAD
     * @type {string}
     * @memberof DescribeGitTreeRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface DescribeGrantObjectsOnResource200Response
 */
export interface DescribeGrantObjectsOnResource200Response {
    /**
     * 
     * @type {DescribeGrantObjectsOnResource200ResponseResponse}
     * @memberof DescribeGrantObjectsOnResource200Response
     */
    'Response'?: DescribeGrantObjectsOnResource200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGrantObjectsOnResource200ResponseResponse
 */
export interface DescribeGrantObjectsOnResource200ResponseResponse {
    /**
     * 
     * @type {DescribeGrantObjectsOnResourcePageData}
     * @memberof DescribeGrantObjectsOnResource200ResponseResponse
     */
    'Data'?: DescribeGrantObjectsOnResourcePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGrantObjectsOnResource200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 资源下授权体列表分页数据
 * @export
 * @interface DescribeGrantObjectsOnResourcePageData
 */
export interface DescribeGrantObjectsOnResourcePageData {
    /**
     * 授权资源列表
     * @type {Array<GrantObjectInfo>}
     * @memberof DescribeGrantObjectsOnResourcePageData
     */
    'GrantObjectList'?: Array<GrantObjectInfo> | null;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeGrantObjectsOnResourcePageData
     */
    'PageNumber': number | null;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeGrantObjectsOnResourcePageData
     */
    'PageSize': number | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeGrantObjectsOnResourcePageData
     */
    'TotalCount': number | null;
}
/**
 * 
 * @export
 * @interface DescribeGrantObjectsOnResourceRequest
 */
export interface DescribeGrantObjectsOnResourceRequest {
    /**
     * 页码
     * @type {number}
     * @memberof DescribeGrantObjectsOnResourceRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数 
     * @type {number}
     * @memberof DescribeGrantObjectsOnResourceRequest
     */
    'PageSize'?: number;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof DescribeGrantObjectsOnResourceRequest
     */
    'Resource'?: ResourceInfo;
}
/**
 * 
 * @export
 * @interface DescribeGrantUsersOnResource200Response
 */
export interface DescribeGrantUsersOnResource200Response {
    /**
     * 
     * @type {DescribeGrantUsersOnResource200ResponseResponse}
     * @memberof DescribeGrantUsersOnResource200Response
     */
    'Response'?: DescribeGrantUsersOnResource200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeGrantUsersOnResource200ResponseResponse
 */
export interface DescribeGrantUsersOnResource200ResponseResponse {
    /**
     * 
     * @type {DescribeGrantUsersOnResourcePageData}
     * @memberof DescribeGrantUsersOnResource200ResponseResponse
     */
    'Data'?: DescribeGrantUsersOnResourcePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeGrantUsersOnResource200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 指定资源下授权的用户列表分页数据
 * @export
 * @interface DescribeGrantUsersOnResourcePageData
 */
export interface DescribeGrantUsersOnResourcePageData {
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeGrantUsersOnResourcePageData
     */
    'TotalCount': number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeGrantUsersOnResourcePageData
     */
    'PageSize': number;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeGrantUsersOnResourcePageData
     */
    'PageNumber': number;
    /**
     * 
     * @type {Array<UserData>}
     * @memberof DescribeGrantUsersOnResourcePageData
     */
    'UserDataList': Array<UserData>;
}
/**
 * 
 * @export
 * @interface DescribeGrantUsersOnResourceRequest
 */
export interface DescribeGrantUsersOnResourceRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DescribeGrantUsersOnResourceRequest
     */
    'UserIdScope'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DescribeGrantUsersOnResourceRequest
     */
    'PolicyIdScope'?: Array<number>;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeGrantUsersOnResourceRequest
     */
    'PageSize'?: number;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeGrantUsersOnResourceRequest
     */
    'PageNumber'?: number;
    /**
     * 
     * @type {RamGrantResourceInfoRequest}
     * @memberof DescribeGrantUsersOnResourceRequest
     */
    'Resource'?: RamGrantResourceInfoRequest;
}
/**
 * 
 * @export
 * @interface DescribeHostServerInstance200Response
 */
export interface DescribeHostServerInstance200Response {
    /**
     * 
     * @type {DescribeHostServerInstance200ResponseResponse}
     * @memberof DescribeHostServerInstance200Response
     */
    'Response'?: DescribeHostServerInstance200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeHostServerInstance200ResponseResponse
 */
export interface DescribeHostServerInstance200ResponseResponse {
    /**
     * 主机组部署列表
     * @type {Array<CdDeployOpenApiHostServerInstance>}
     * @memberof DescribeHostServerInstance200ResponseResponse
     */
    'Data'?: Array<CdDeployOpenApiHostServerInstance>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeHostServerInstance200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeHostServerInstanceRequest
 */
export interface DescribeHostServerInstanceRequest {
    /**
     * 部署账号 从 DescribeCdPipeline 获取
     * @type {string}
     * @memberof DescribeHostServerInstanceRequest
     */
    'Account'?: string;
    /**
     * 主机组名称 从 DescribeCdPipeline 获取
     * @type {string}
     * @memberof DescribeHostServerInstanceRequest
     */
    'ServerGroupName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeImportJobStatus200Response
 */
export interface DescribeImportJobStatus200Response {
    /**
     * 
     * @type {DescribeImportJobStatus200ResponseResponse}
     * @memberof DescribeImportJobStatus200Response
     */
    'Response'?: DescribeImportJobStatus200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeImportJobStatus200ResponseResponse
 */
export interface DescribeImportJobStatus200ResponseResponse {
    /**
     * 
     * @type {WikiJobStatus}
     * @memberof DescribeImportJobStatus200ResponseResponse
     */
    'Data'?: WikiJobStatus;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeImportJobStatus200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeImportJobStatusRequest
 */
export interface DescribeImportJobStatusRequest {
    /**
     * 任务Id
     * @type {string}
     * @memberof DescribeImportJobStatusRequest
     */
    'JobId'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeImportJobStatusRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssue200Response
 */
export interface DescribeIssue200Response {
    /**
     * 
     * @type {ModifyIssue200ResponseResponse}
     * @memberof DescribeIssue200Response
     */
    'Response'?: ModifyIssue200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeIssueAttachmentPreSignedUrl200Response
 */
export interface DescribeIssueAttachmentPreSignedUrl200Response {
    /**
     * 
     * @type {DescribeIssueAttachmentPreSignedUrl200ResponseResponse}
     * @memberof DescribeIssueAttachmentPreSignedUrl200Response
     */
    'Response'?: DescribeIssueAttachmentPreSignedUrl200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueAttachmentPreSignedUrl200ResponseResponse
 */
export interface DescribeIssueAttachmentPreSignedUrl200ResponseResponse {
    /**
     * 
     * @type {ApiIssueIssueAttachmentPreSign}
     * @memberof DescribeIssueAttachmentPreSignedUrl200ResponseResponse
     */
    'PreSign'?: ApiIssueIssueAttachmentPreSign;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueAttachmentPreSignedUrl200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueAttachmentPreSignedUrlRequest
 */
export interface DescribeIssueAttachmentPreSignedUrlRequest {
    /**
     * 文件名
     * @type {string}
     * @memberof DescribeIssueAttachmentPreSignedUrlRequest
     */
    'FileName'?: string;
    /**
     * 文件大小
     * @type {number}
     * @memberof DescribeIssueAttachmentPreSignedUrlRequest
     */
    'FileSize'?: number;
    /**
     * 项目名
     * @type {string}
     * @memberof DescribeIssueAttachmentPreSignedUrlRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueByStatusUpdate200Response
 */
export interface DescribeIssueByStatusUpdate200Response {
    /**
     * 
     * @type {DescribeIssueByStatusUpdate200ResponseResponse}
     * @memberof DescribeIssueByStatusUpdate200Response
     */
    'Response'?: DescribeIssueByStatusUpdate200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueByStatusUpdate200ResponseResponse
 */
export interface DescribeIssueByStatusUpdate200ResponseResponse {
    /**
     * [             {                 \"Epic\": {                     \"Code\": 0,                     \"Type\": \"\",                     \"Name\": \"\",                     \"IssueStatusId\": 0,                     \"IssueStatusName\": \"\",                     \"Priority\": \"\",                     \"Assignee\": {                         \"Id\": 0,                         \"Status\": 0,                         \"Avatar\": \"\",                         \"Name\": \"\",                         \"Email\": \"\",                         \"TeamId\": 0,                         \"Phone\": \"\",                         \"GlobalKey\": \"\",                         \"TeamGlobalKey\": \"\"                     }                 },                 \"ParentType\": \"WORK_ITEM\",                 \"Code\": 2,                 \"Type\": \"WORK_ITEM\",                 \"Name\": \"撒旦法水电费\",                 \"Description\": \"\",                 \"IterationId\": 0,                 \"IssueStatusId\": 44318126,                 \"IssueStatusName\": \"已完成\",                 \"IssueStatusType\": \"COMPLETED\",                 \"Priority\": \"1\",                 \"Assignee\": {                     \"Id\": 0,                     \"Status\": 0,                     \"Avatar\": \"\",                     \"Name\": \"\",                     \"Email\": \"\",                     \"TeamId\": 0,                     \"Phone\": \"\",                     \"GlobalKey\": \"\",                     \"TeamGlobalKey\": \"\"                 },                 \"StartDate\": 0,                 \"DueDate\": 0,                 \"WorkingHours\": 0.0,                 \"Creator\": {                     \"Id\": 8732006,                     \"Status\": 1,                     \"Avatar\": \"https://coding-net-production-static-ci.codehub.cn/be0458f7-2a49-4d08-9d79-73f2767a1687.png?imageView2/1/w/0/h/0\",                     \"Name\": \"kingxinhu\",                     \"Email\": \"\",                     \"TeamId\": 0,                     \"Phone\": \"\",                     \"GlobalKey\": \"\",                     \"TeamGlobalKey\": \"\"                 },                 \"StoryPoint\": \"\",                 \"CreatedAt\": 1697624080000,                 \"UpdatedAt\": 1698373834000,                 \"CompletedAt\": 1698373834000,                 \"ProjectModule\": {                     \"Id\": 0,                     \"Name\": \"\"                 },                 \"Watchers\": [                     {                         \"Id\": 8732006,                         \"Status\": 1,                         \"Avatar\": \"https://coding-net-production-static-ci.codehub.cn/be0458f7-2a49-4d08-9d79-73f2767a1687.png?imageView2/1/w/0/h/0\",                         \"Name\": \"kingxinhu\",                         \"Email\": \"\",                         \"TeamId\": 0,                         \"Phone\": \"\",                         \"GlobalKey\": \"\",                         \"TeamGlobalKey\": \"\"                     }                 ],                 \"Labels\": [],                 \"Files\": [],                 \"RequirementType\": {                     \"Id\": 0,                     \"Name\": \"\"                 },                 \"DefectType\": {                     \"Id\": 0,                     \"Name\": \"\",                     \"IconUrl\": \"\"                 },                 \"CustomFields\": [],                 \"ThirdLinks\": [],                 \"SubTasks\": [],                 \"Parent\": {                     \"Code\": 0,                     \"Type\": \"\",                     \"Name\": \"\",                     \"IssueStatusId\": 0,                     \"IssueStatusName\": \"\",                     \"Priority\": \"\",                     \"Assignee\": {                         \"Id\": 0,                         \"Status\": 0,                         \"Avatar\": \"\",                         \"Name\": \"\",                         \"Email\": \"\",                         \"TeamId\": 0,                         \"Phone\": \"\",                         \"GlobalKey\": \"\",                         \"TeamGlobalKey\": \"\"                     },                     \"IssueStatusType\": \"\",                     \"IssueTypeDetail\": {                         \"Id\": 0,                         \"Name\": \"\",                         \"IssueType\": \"\",                         \"Description\": \"\",                         \"IsSystem\": false                     }                 },                 \"Iteration\": {                     \"Code\": 0,                     \"Name\": \"\",                     \"Status\": \"\",                     \"Id\": 0                 },                 \"IssueTypeDetail\": {                     \"Id\": 8500461,                     \"Name\": \"工作项\",                     \"IssueType\": \"WORK_ITEM\",                     \"Description\": \"工作项表示在项目集中需要完成的需求或任务。\",                     \"IsSystem\": true                 },                 \"IssueTypeId\": 8500461,                 \"Project\": {                     \"Id\": 11985312,                     \"CreatedAt\": 0,                     \"UpdatedAt\": 0,                     \"Status\": 0,                     \"Type\": 0,                     \"MaxMember\": 0,                     \"Name\": \"eee\",                     \"DisplayName\": \"eee\",                     \"Description\": \"\",                     \"Icon\": \"/static/project_icon/scenery-version-2-1.svg\",                     \"TeamOwnerId\": 0,                     \"UserOwnerId\": 0,                     \"StartDate\": 0,                     \"EndDate\": 0,                     \"TeamId\": 0,                     \"IsDemo\": false,                     \"Archived\": false,                     \"ProgramIds\": []                 }             }         ]
     * @type {Array<IssueDetail>}
     * @memberof DescribeIssueByStatusUpdate200ResponseResponse
     */
    'OpenApiIssueDetail'?: Array<IssueDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueByStatusUpdate200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueByStatusUpdateRequest
 */
export interface DescribeIssueByStatusUpdateRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueByStatusUpdateRequest
     */
    'ProjectName'?: string;
    /**
     * 是否展示事项描述中对外的路径
     * @type {boolean}
     * @memberof DescribeIssueByStatusUpdateRequest
     */
    'ShowImageOutUrl'?: boolean;
    /**
     * 修改之后的状态
     * @type {string}
     * @memberof DescribeIssueByStatusUpdateRequest
     */
    'Status'?: string;
    /**
     * 状态更新时间
     * @type {string}
     * @memberof DescribeIssueByStatusUpdateRequest
     */
    'UpdatedAt'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueCommentList200Response
 */
export interface DescribeIssueCommentList200Response {
    /**
     * 
     * @type {DescribeIssueCommentList200ResponseResponse}
     * @memberof DescribeIssueCommentList200Response
     */
    'Response'?: DescribeIssueCommentList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueCommentList200ResponseResponse
 */
export interface DescribeIssueCommentList200ResponseResponse {
    /**
     * 事项评论列表
     * @type {Array<IssueComment>}
     * @memberof DescribeIssueCommentList200ResponseResponse
     */
    'CommentList'?: Array<IssueComment>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueCommentList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueCommentListRequest
 */
export interface DescribeIssueCommentListRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DescribeIssueCommentListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueCommentListRequest
     */
    'ProjectName'?: string;
    /**
     * 是否查询评论中图片FileId
     * @type {boolean}
     * @memberof DescribeIssueCommentListRequest
     */
    'ShowFileId'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeIssueCustomFieldLogList200Response
 */
export interface DescribeIssueCustomFieldLogList200Response {
    /**
     * 
     * @type {DescribeIssueCustomFieldLogList200ResponseResponse}
     * @memberof DescribeIssueCustomFieldLogList200Response
     */
    'Response'?: DescribeIssueCustomFieldLogList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueCustomFieldLogList200ResponseResponse
 */
export interface DescribeIssueCustomFieldLogList200ResponseResponse {
    /**
     * 事项的自定义属性变更日志
     * @type {Array<CustomFieldChangeLog>}
     * @memberof DescribeIssueCustomFieldLogList200ResponseResponse
     */
    'FieldChangeLogList'?: Array<CustomFieldChangeLog>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueCustomFieldLogList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueCustomFieldLogListRequest
 */
export interface DescribeIssueCustomFieldLogListRequest {
    /**
     * 自定义属性名称
     * @type {string}
     * @memberof DescribeIssueCustomFieldLogListRequest
     */
    'FieldName'?: string;
    /**
     * 事项编号
     * @type {number}
     * @memberof DescribeIssueCustomFieldLogListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueCustomFieldLogListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueFileUrl200Response
 */
export interface DescribeIssueFileUrl200Response {
    /**
     * 
     * @type {DescribeIssueFileUrl200ResponseResponse}
     * @memberof DescribeIssueFileUrl200Response
     */
    'Response'?: DescribeIssueFileUrl200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueFileUrl200ResponseResponse
 */
export interface DescribeIssueFileUrl200ResponseResponse {
    /**
     * 文件下载地址
     * @type {string}
     * @memberof DescribeIssueFileUrl200ResponseResponse
     */
    'Url'?: string;
    /**
     * 事项附件下载地址列表
     * @type {Array<string>}
     * @memberof DescribeIssueFileUrl200ResponseResponse
     */
    'AttachmentFileUrl'?: Array<string>;
    /**
     * 事项描述中图片下载地址列表
     * @type {Array<string>}
     * @memberof DescribeIssueFileUrl200ResponseResponse
     */
    'DescriptionImageUrl'?: Array<string>;
    /**
     * 事项评论中图片下载地址列表
     * @type {Array<string>}
     * @memberof DescribeIssueFileUrl200ResponseResponse
     */
    'CommentImageUrl'?: Array<string>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueFileUrl200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueFileUrlRequest
 */
export interface DescribeIssueFileUrlRequest {
    /**
     * 文件 ID
     * @type {number}
     * @memberof DescribeIssueFileUrlRequest
     */
    'FileId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueFileUrlRequest
     */
    'ProjectName'?: string;
    /**
     * 事项Code, 对应页面的ID字段, ProjectName + IssueCode 可以查询事项的附件和描述中图片的下载地址
     * @type {number}
     * @memberof DescribeIssueFileUrlRequest
     */
    'IssueCode'?: number;
    /**
     * 是否查询事项评论中的图片路径， 可查询所有评论中的图片路径
     * @type {boolean}
     * @memberof DescribeIssueFileUrlRequest
     */
    'QueryComment'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeIssueFilterList200Response
 */
export interface DescribeIssueFilterList200Response {
    /**
     * 
     * @type {DescribeIssueFilterList200ResponseResponse}
     * @memberof DescribeIssueFilterList200Response
     */
    'Response'?: DescribeIssueFilterList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueFilterList200ResponseResponse
 */
export interface DescribeIssueFilterList200ResponseResponse {
    /**
     * 
     * @type {IssueFilterListData}
     * @memberof DescribeIssueFilterList200ResponseResponse
     */
    'Data'?: IssueFilterListData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueFilterList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueFilterListRequest
 */
export interface DescribeIssueFilterListRequest {
    /**
     * 事项类型  ALL - 全部事项  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗
     * @type {string}
     * @memberof DescribeIssueFilterListRequest
     */
    'IssueType'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueFilterListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueList200Response
 */
export interface DescribeIssueList200Response {
    /**
     * 
     * @type {DescribeIssueList200ResponseResponse}
     * @memberof DescribeIssueList200Response
     */
    'Response'?: DescribeIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueList200ResponseResponse
 */
export interface DescribeIssueList200ResponseResponse {
    /**
     * 事项列表
     * @type {Array<IssueListData>}
     * @memberof DescribeIssueList200ResponseResponse
     */
    'IssueList'?: Array<IssueListData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueListRequest
 */
export interface DescribeIssueListRequest {
    /**
     * 筛选条件列表
     * @type {Array<IssueCondition>}
     * @memberof DescribeIssueListRequest
     */
    'Conditions'?: Array<IssueCondition>;
    /**
     * 事项类型  ALL - 全部事项  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗
     * @type {string}
     * @memberof DescribeIssueListRequest
     */
    'IssueType'?: string;
    /**
     * 限制数目，默认 20
     * @type {number}
     * @memberof DescribeIssueListRequest
     */
    'Limit'?: number;
    /**
     * 偏移量，默认 0
     * @type {number}
     * @memberof DescribeIssueListRequest
     */
    'Offset'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueListRequest
     */
    'ProjectName'?: string;
    /**
     * 排序字段，默认：CODE  可选值：STATUS, CREATED_AT, PRIORITY, UPDATED_AT, DUE_DATE, CODE, JOIN_ITERATION_AT, STATUS_TYPE, ASSIGNEE, PROJECT_ID, ISSUE_STATUS_ID, ISSUE_ITERATION_SORT, ISSUE_ROADMAP_SORT, PARENT_ID, COMPLETED_AT
     * @type {string}
     * @memberof DescribeIssueListRequest
     */
    'SortKey'?: string;
    /**
     * 排序方式  DESC - 倒序（默认值）  ASC - 正序
     * @type {string}
     * @memberof DescribeIssueListRequest
     */
    'SortValue'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueListWithPage200Response
 */
export interface DescribeIssueListWithPage200Response {
    /**
     * 
     * @type {DescribeIssueListWithPage200ResponseResponse}
     * @memberof DescribeIssueListWithPage200Response
     */
    'Response'?: DescribeIssueListWithPage200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueListWithPage200ResponseResponse
 */
export interface DescribeIssueListWithPage200ResponseResponse {
    /**
     * 
     * @type {OpenApiIssueListDataWithPage}
     * @memberof DescribeIssueListWithPage200ResponseResponse
     */
    'Data'?: OpenApiIssueListDataWithPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueListWithPage200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueListWithPageRequest
 */
export interface DescribeIssueListWithPageRequest {
    /**
     * 
     * @type {IssueCondition}
     * @memberof DescribeIssueListWithPageRequest
     */
    'Conditions'?: IssueCondition;
    /**
     * 是否展示子工作项
     * @type {boolean}
     * @memberof DescribeIssueListWithPageRequest
     */
    'ExcludeSubTask'?: boolean;
    /**
     * ALL - 全部事项 DEFECT - 缺陷 REQUIREMENT - 需求 MISSION - 任务 EPIC - 史诗
     * @type {string}
     * @memberof DescribeIssueListWithPageRequest
     */
    'IssueType'?: string;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeIssueListWithPageRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数，默认 20 ，最大值 500
     * @type {number}
     * @memberof DescribeIssueListWithPageRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueListWithPageRequest
     */
    'ProjectName'?: string;
    /**
     * 是否展示子事项
     * @type {boolean}
     * @memberof DescribeIssueListWithPageRequest
     */
    'ShowSubIssues'?: boolean;
    /**
     * 排序字段，默认：CODE 可选值：STATUS, CREATED_AT, PRIORITY, UPDATED_AT, DUE_DATE, CODE, JOIN_ITERATION_AT, STATUS_TYPE, ASSIGNEE, PROJECT_ID, ISSUE_STATUS_ID, ISSUE_ITERATION_SORT, ISSUE_ROADMAP_SORT, PARENT_ID, COMPLETED_AT
     * @type {string}
     * @memberof DescribeIssueListWithPageRequest
     */
    'SortKey'?: string;
    /**
     *  排序方式 DESC - 倒序（默认值） ASC - 正序
     * @type {string}
     * @memberof DescribeIssueListWithPageRequest
     */
    'SortValue'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueLogList200Response
 */
export interface DescribeIssueLogList200Response {
    /**
     * 
     * @type {DescribeIssueLogList200ResponseResponse}
     * @memberof DescribeIssueLogList200Response
     */
    'Response'?: DescribeIssueLogList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueLogList200ResponseResponse
 */
export interface DescribeIssueLogList200ResponseResponse {
    /**
     * 
     * @type {Array<ApiIssueLogIssueLog>}
     * @memberof DescribeIssueLogList200ResponseResponse
     */
    'IssueLogList'?: Array<ApiIssueLogIssueLog>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueLogList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueLogListRequest
 */
export interface DescribeIssueLogListRequest {
    /**
     * 动作类型，ADD、CHANGE_PARENT、CREATE、DELETE、REMOVE、UPDATE。要获取更新处理人的日志，用UPDATE+ASSIGNEE，要获取更新迭代的日志，用UPDATE+ITERATION，要获取创建事项的日志，用CREATE+SELF，以此类推
     * @type {string}
     * @memberof DescribeIssueLogListRequest
     */
    'ActionType'?: string;
    /**
     * 事项code
     * @type {number}
     * @memberof DescribeIssueLogListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueLogListRequest
     */
    'ProjectName'?: string;
    /**
     * 操作对象，取值如下 ASSIGNEE  处理人，ATTACHMENT 附件，CHILD_ISSUE  子事项，CUSTOM_FIELD  自定义属性，DEFECT_TYPE 缺陷类型，DESCRIPTION 描述，DUE_DATE 截止日期，EPIC_ISSUE 所属史诗，ISSUE_EPIC_CHANGED ，ISSUE_PROGRAM_RELATION，ISSUE_RELATION，ITERATION 迭代，LABEL 标签，MODULE 模块，NAME 名字，PARENT_ISSUE 父事项，PRIORITY 优先级，PROGRESS 进度，RELATE_DEFECT，RELATE_REQUIREMENT，REQUIREMENT_TYPE，RESOURCE，SELF，START_DATE，STATUS 状态，STORY_POINT 故事点，THIRD_LINK 第三方链接，WATCHER 关注人，WORKING_HOURS 工时
     * @type {string}
     * @memberof DescribeIssueLogListRequest
     */
    'Target'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueModuleList200Response
 */
export interface DescribeIssueModuleList200Response {
    /**
     * 
     * @type {DescribeIssueModuleList200ResponseResponse}
     * @memberof DescribeIssueModuleList200Response
     */
    'Response'?: DescribeIssueModuleList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueModuleList200ResponseResponse
 */
export interface DescribeIssueModuleList200ResponseResponse {
    /**
     * 模块列表
     * @type {Array<IssueModule>}
     * @memberof DescribeIssueModuleList200ResponseResponse
     */
    'IssueModules'?: Array<IssueModule>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueModuleList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueReferenceResources200Response
 */
export interface DescribeIssueReferenceResources200Response {
    /**
     * 
     * @type {DescribeIssueReferenceResources200ResponseResponse}
     * @memberof DescribeIssueReferenceResources200Response
     */
    'Response'?: DescribeIssueReferenceResources200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueReferenceResources200ResponseResponse
 */
export interface DescribeIssueReferenceResources200ResponseResponse {
    /**
     * 事项引用的资源列表
     * @type {Array<ResourceReference>}
     * @memberof DescribeIssueReferenceResources200ResponseResponse
     */
    'Data'?: Array<ResourceReference>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueReferenceResources200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueReferenceResourcesRequest
 */
export interface DescribeIssueReferenceResourcesRequest {
    /**
     * 查询的目标事项的code
     * @type {number}
     * @memberof DescribeIssueReferenceResourcesRequest
     */
    'IssueCode'?: number;
    /**
     * 查询的事项所在的项目ID
     * @type {number}
     * @memberof DescribeIssueReferenceResourcesRequest
     */
    'ProjectId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueReferenceResourcesRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueRelatedRepos200Response
 */
export interface DescribeIssueRelatedRepos200Response {
    /**
     * 
     * @type {DescribeIssueRelatedRepos200ResponseResponse}
     * @memberof DescribeIssueRelatedRepos200Response
     */
    'Response'?: DescribeIssueRelatedRepos200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueRelatedRepos200ResponseResponse
 */
export interface DescribeIssueRelatedRepos200ResponseResponse {
    /**
     * 事项关联的仓库信息
     * @type {Array<IssueRelatedDepot>}
     * @memberof DescribeIssueRelatedRepos200ResponseResponse
     */
    'IssueRelatedDepot'?: Array<IssueRelatedDepot>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueRelatedRepos200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueRelatedReposRequest
 */
export interface DescribeIssueRelatedReposRequest {
    /**
     * 事项code
     * @type {number}
     * @memberof DescribeIssueRelatedReposRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueRelatedReposRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueRelatedWorkItemList200Response
 */
export interface DescribeIssueRelatedWorkItemList200Response {
    /**
     * 
     * @type {DescribeIssueRelatedWorkItemList200ResponseResponse}
     * @memberof DescribeIssueRelatedWorkItemList200Response
     */
    'Response'?: DescribeIssueRelatedWorkItemList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueRelatedWorkItemList200ResponseResponse
 */
export interface DescribeIssueRelatedWorkItemList200ResponseResponse {
    /**
     * 事项关联的项目集中的工作项列表
     * @type {Array<IssueDetail>}
     * @memberof DescribeIssueRelatedWorkItemList200ResponseResponse
     */
    'WorkItemList'?: Array<IssueDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueRelatedWorkItemList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueRelatedWorkItemListRequest
 */
export interface DescribeIssueRelatedWorkItemListRequest {
    /**
     * 事项code
     * @type {number}
     * @memberof DescribeIssueRelatedWorkItemListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueRelatedWorkItemListRequest
     */
    'ProjectName'?: string;
    /**
     * 是否展示描述中图片外部可访问的地址
     * @type {string}
     * @memberof DescribeIssueRelatedWorkItemListRequest
     */
    'ShowImageOutUrl'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueReleaseList200Response
 */
export interface DescribeIssueReleaseList200Response {
    /**
     * 
     * @type {DescribeIssueReleaseList200ResponseResponse}
     * @memberof DescribeIssueReleaseList200Response
     */
    'Response'?: DescribeIssueReleaseList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueReleaseList200ResponseResponse
 */
export interface DescribeIssueReleaseList200ResponseResponse {
    /**
     * 版本列表
     * @type {Array<OpenApiRelease>}
     * @memberof DescribeIssueReleaseList200ResponseResponse
     */
    'ReleaseList'?: Array<OpenApiRelease>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueReleaseList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueRequest
 */
export interface DescribeIssueRequest {
    /**
     * 事项编号
     * @type {number}
     * @memberof DescribeIssueRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueStatusChangeLogList200Response
 */
export interface DescribeIssueStatusChangeLogList200Response {
    /**
     * 
     * @type {DescribeIssueStatusChangeLogList200ResponseResponse}
     * @memberof DescribeIssueStatusChangeLogList200Response
     */
    'Response'?: DescribeIssueStatusChangeLogList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueStatusChangeLogList200ResponseResponse
 */
export interface DescribeIssueStatusChangeLogList200ResponseResponse {
    /**
     * 
     * @type {IssueStatusChangeLogList}
     * @memberof DescribeIssueStatusChangeLogList200ResponseResponse
     */
    'Logs'?: IssueStatusChangeLogList;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueStatusChangeLogList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueStatusChangeLogListRequest
 */
export interface DescribeIssueStatusChangeLogListRequest {
    /**
     * 事项code列表
     * @type {Array<number>}
     * @memberof DescribeIssueStatusChangeLogListRequest
     */
    'IssueCode'?: Array<number>;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueStatusChangeLogListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueWorkLogList200Response
 */
export interface DescribeIssueWorkLogList200Response {
    /**
     * 
     * @type {DescribeIssueWorkLogList200ResponseResponse}
     * @memberof DescribeIssueWorkLogList200Response
     */
    'Response'?: DescribeIssueWorkLogList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIssueWorkLogList200ResponseResponse
 */
export interface DescribeIssueWorkLogList200ResponseResponse {
    /**
     * 工时日志列表
     * @type {Array<IssueWorkLog>}
     * @memberof DescribeIssueWorkLogList200ResponseResponse
     */
    'WorkLogs'?: Array<IssueWorkLog>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIssueWorkLogList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIssueWorkLogListRequest
 */
export interface DescribeIssueWorkLogListRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DescribeIssueWorkLogListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIssueWorkLogListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeIteration200Response
 */
export interface DescribeIteration200Response {
    /**
     * 
     * @type {ModifyIteration200ResponseResponse}
     * @memberof DescribeIteration200Response
     */
    'Response'?: ModifyIteration200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeIterationList200Response
 */
export interface DescribeIterationList200Response {
    /**
     * 
     * @type {DescribeIterationList200ResponseResponse}
     * @memberof DescribeIterationList200Response
     */
    'Response'?: DescribeIterationList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeIterationList200ResponseResponse
 */
export interface DescribeIterationList200ResponseResponse {
    /**
     * 
     * @type {DescribeIterationListData}
     * @memberof DescribeIterationList200ResponseResponse
     */
    'Data'?: DescribeIterationListData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeIterationList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 查询迭代列表数据结构
 * @export
 * @interface DescribeIterationListData
 */
export interface DescribeIterationListData {
    /**
     * 迭代列表
     * @type {Array<Iteration>}
     * @memberof DescribeIterationListData
     */
    'List'?: Array<Iteration>;
    /**
     * 结果总条数
     * @type {number}
     * @memberof DescribeIterationListData
     */
    'TotalRow'?: number;
}
/**
 * 
 * @export
 * @interface DescribeIterationListRequest
 */
export interface DescribeIterationListRequest {
    /**
     * 处理人 ID 列表
     * @type {Array<number>}
     * @memberof DescribeIterationListRequest
     */
    'Assignee'?: Array<number>;
    /**
     * 通过结束时间过滤，时间格式：2020-12-12
     * @type {object}
     * @memberof DescribeIterationListRequest
     */
    'EndDate'?: object;
    /**
     * 通过关键字搜索
     * @type {string}
     * @memberof DescribeIterationListRequest
     */
    'Keywords'?: string;
    /**
     * 每页数量，默认 20
     * @type {number}
     * @memberof DescribeIterationListRequest
     */
    'Limit'?: number;
    /**
     * 偏移量，默认 0
     * @type {number}
     * @memberof DescribeIterationListRequest
     */
    'Offset'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeIterationListRequest
     */
    'ProjectName'?: string;
    /**
     * 通过开始时间过滤，时间格式：2020-12-12
     * @type {object}
     * @memberof DescribeIterationListRequest
     */
    'StartDate'?: object;
    /**
     * 迭代状态,  WAIT_PROCESS,PROCESSING,COMPLETED
     * @type {Array<string>}
     * @memberof DescribeIterationListRequest
     */
    'Status'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DescribeMemberSshKey200Response
 */
export interface DescribeMemberSshKey200Response {
    /**
     * 
     * @type {DescribeMemberSshKey200ResponseResponse}
     * @memberof DescribeMemberSshKey200Response
     */
    'Response'?: DescribeMemberSshKey200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMemberSshKey200ResponseResponse
 */
export interface DescribeMemberSshKey200ResponseResponse {
    /**
     * SSH公钥详情列表
     * @type {Array<SshKeyInfo>}
     * @memberof DescribeMemberSshKey200ResponseResponse
     */
    'SshKeyInfos'?: Array<SshKeyInfo> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMemberSshKey200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMemberSshKeyRequest
 */
export interface DescribeMemberSshKeyRequest {
    /**
     * 成员 Id
     * @type {number}
     * @memberof DescribeMemberSshKeyRequest
     */
    'MemberUserId'?: number;
    /**
     * SSH 公钥 Id
     * @type {number}
     * @memberof DescribeMemberSshKeyRequest
     */
    'SshKeyId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMergeReqCommits200Response
 */
export interface DescribeMergeReqCommits200Response {
    /**
     * 
     * @type {DescribeMergeReqCommits200ResponseResponse}
     * @memberof DescribeMergeReqCommits200Response
     */
    'Response'?: DescribeMergeReqCommits200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMergeReqCommits200ResponseResponse
 */
export interface DescribeMergeReqCommits200ResponseResponse {
    /**
     * commit集合
     * @type {Array<GitCommit>}
     * @memberof DescribeMergeReqCommits200ResponseResponse
     */
    'Commits'?: Array<GitCommit>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMergeReqCommits200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMergeReqCommitsRequest
 */
export interface DescribeMergeReqCommitsRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeMergeReqCommitsRequest
     */
    'DepotId'?: number;
    /**
     * 与仓库路径二选一即可
     * @type {string}
     * @memberof DescribeMergeReqCommitsRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof DescribeMergeReqCommitsRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMergeReqInfo200Response
 */
export interface DescribeMergeReqInfo200Response {
    /**
     * 
     * @type {DescribeMergeReqInfo200ResponseResponse}
     * @memberof DescribeMergeReqInfo200Response
     */
    'Response'?: DescribeMergeReqInfo200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMergeReqInfo200ResponseResponse
 */
export interface DescribeMergeReqInfo200ResponseResponse {
    /**
     * 
     * @type {MergeReqInfo}
     * @memberof DescribeMergeReqInfo200ResponseResponse
     */
    'MergeReqInfo'?: MergeReqInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMergeReqInfo200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMergeReqInfoRequest
 */
export interface DescribeMergeReqInfoRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeMergeReqInfoRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与DepotId选择其一即可
     * @type {string}
     * @memberof DescribeMergeReqInfoRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof DescribeMergeReqInfoRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequest200Response
 */
export interface DescribeMergeRequest200Response {
    /**
     * 
     * @type {ModifyMergeMR200ResponseResponse}
     * @memberof DescribeMergeRequest200Response
     */
    'Response'?: ModifyMergeMR200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestFileDiff200Response
 */
export interface DescribeMergeRequestFileDiff200Response {
    /**
     * 
     * @type {DescribeMergeRequestFileDiff200ResponseResponse}
     * @memberof DescribeMergeRequestFileDiff200Response
     */
    'Response'?: DescribeMergeRequestFileDiff200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMergeRequestFileDiff200ResponseResponse
 */
export interface DescribeMergeRequestFileDiff200ResponseResponse {
    /**
     * 
     * @type {MergeRequestFileDiff}
     * @memberof DescribeMergeRequestFileDiff200ResponseResponse
     */
    'MergeRequestFileDiff'?: MergeRequestFileDiff;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMergeRequestFileDiff200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestFileDiffRequest
 */
export interface DescribeMergeRequestFileDiffRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeMergeRequestFileDiffRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库Id选其一就可以
     * @type {string}
     * @memberof DescribeMergeRequestFileDiffRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof DescribeMergeRequestFileDiffRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestLog200Response
 */
export interface DescribeMergeRequestLog200Response {
    /**
     * 
     * @type {DescribeMergeRequestLog200ResponseResponse}
     * @memberof DescribeMergeRequestLog200Response
     */
    'Response'?: DescribeMergeRequestLog200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMergeRequestLog200ResponseResponse
 */
export interface DescribeMergeRequestLog200ResponseResponse {
    /**
     * 操作记录列表
     * @type {Array<MergeRequestLog>}
     * @memberof DescribeMergeRequestLog200ResponseResponse
     */
    'Logs'?: Array<MergeRequestLog>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMergeRequestLog200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestRequest
 */
export interface DescribeMergeRequestRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeMergeRequestRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与DepotId选择其一即可
     * @type {string}
     * @memberof DescribeMergeRequestRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求iid
     * @type {number}
     * @memberof DescribeMergeRequestRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestReviewers200Response
 */
export interface DescribeMergeRequestReviewers200Response {
    /**
     * 
     * @type {DescribeMergeRequestReviewers200ResponseResponse}
     * @memberof DescribeMergeRequestReviewers200Response
     */
    'Response'?: DescribeMergeRequestReviewers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMergeRequestReviewers200ResponseResponse
 */
export interface DescribeMergeRequestReviewers200ResponseResponse {
    /**
     * 参与者列表
     * @type {Array<DepotUser>}
     * @memberof DescribeMergeRequestReviewers200ResponseResponse
     */
    'Reviewers'?: Array<DepotUser>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMergeRequestReviewers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMergeRequestReviewersRequest
 */
export interface DescribeMergeRequestReviewersRequest {
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeMergeRequestReviewersRequest
     */
    'DepotId'?: number;
    /**
     * 合并请求 IId
     * @type {number}
     * @memberof DescribeMergeRequestReviewersRequest
     */
    'MergeId'?: number;
}
/**
 * 获取合并请求数据
 * @export
 * @interface DescribeMergeRequestsData
 */
export interface DescribeMergeRequestsData {
    /**
     * 合并请求列表
     * @type {Array<MergeRequestData>}
     * @memberof DescribeMergeRequestsData
     */
    'List'?: Array<MergeRequestData> | null;
    /**
     * 页数
     * @type {number}
     * @memberof DescribeMergeRequestsData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeMergeRequestsData
     */
    'PageSize'?: number;
    /**
     * 总页数
     * @type {number}
     * @memberof DescribeMergeRequestsData
     */
    'TotalPage'?: number;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeMergeRequestsData
     */
    'TotalRow'?: number;
}
/**
 * 
 * @export
 * @interface DescribeMyDepots200Response
 */
export interface DescribeMyDepots200Response {
    /**
     * 
     * @type {DescribeMyDepots200ResponseResponse}
     * @memberof DescribeMyDepots200Response
     */
    'Response'?: DescribeMyDepots200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeMyDepots200ResponseResponse
 */
export interface DescribeMyDepots200ResponseResponse {
    /**
     * 
     * @type {DepotData}
     * @memberof DescribeMyDepots200ResponseResponse
     */
    'Payload'?: DepotData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeMyDepots200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeMyDepotsRequest
 */
export interface DescribeMyDepotsRequest {
    /**
     * 页数
     * @type {number}
     * @memberof DescribeMyDepotsRequest
     */
    'PageNumber'?: number;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeMyDepotsRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeNotesByCommits200Response
 */
export interface DescribeNotesByCommits200Response {
    /**
     * 
     * @type {DescribeNotesByCommits200ResponseResponse}
     * @memberof DescribeNotesByCommits200Response
     */
    'Response'?: DescribeNotesByCommits200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeNotesByCommits200ResponseResponse
 */
export interface DescribeNotesByCommits200ResponseResponse {
    /**
     * commit notes 集合
     * @type {Array<CommitNote>}
     * @memberof DescribeNotesByCommits200ResponseResponse
     */
    'Notes'?: Array<CommitNote>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeNotesByCommits200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeNotesByCommitsRequest
 */
export interface DescribeNotesByCommitsRequest {
    /**
     * 请求sha值列表
     * @type {Array<string>}
     * @memberof DescribeNotesByCommitsRequest
     */
    'Commits'?: Array<string>;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeNotesByCommitsRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeNotesByCommitsRequest
     */
    'DepotPath'?: string;
    /**
     * 查询的ref地址
     * @type {string}
     * @memberof DescribeNotesByCommitsRequest
     */
    'NoteRef'?: string;
}
/**
 * 
 * @export
 * @interface DescribeOneProject200Response
 */
export interface DescribeOneProject200Response {
    /**
     * 
     * @type {DescribeOneProject200ResponseResponse}
     * @memberof DescribeOneProject200Response
     */
    'Response'?: DescribeOneProject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeOneProject200ResponseResponse
 */
export interface DescribeOneProject200ResponseResponse {
    /**
     * 
     * @type {Project}
     * @memberof DescribeOneProject200ResponseResponse
     */
    'Project'?: Project;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeOneProject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeOneProjectRequest
 */
export interface DescribeOneProjectRequest {
    /**
     * 项目编号
     * @type {number}
     * @memberof DescribeOneProjectRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribePersonalExternalDepots200Response
 */
export interface DescribePersonalExternalDepots200Response {
    /**
     * 
     * @type {DescribePersonalExternalDepots200ResponseResponse}
     * @memberof DescribePersonalExternalDepots200Response
     */
    'Response'?: DescribePersonalExternalDepots200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePersonalExternalDepots200ResponseResponse
 */
export interface DescribePersonalExternalDepots200ResponseResponse {
    /**
     * 
     * @type {CodingCIPersonalExternalDepotData}
     * @memberof DescribePersonalExternalDepots200ResponseResponse
     */
    'Data'?: CodingCIPersonalExternalDepotData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePersonalExternalDepots200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePersonalExternalDepotsRequest
 */
export interface DescribePersonalExternalDepotsRequest {
    /**
     * 仓库类型
     * @type {string}
     * @memberof DescribePersonalExternalDepotsRequest
     */
    'DepotType'?: string;
    /**
     * 项目 Id
     * @type {number}
     * @memberof DescribePersonalExternalDepotsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribePinyin200Response
 */
export interface DescribePinyin200Response {
    /**
     * 
     * @type {DescribePinyin200ResponseResponse}
     * @memberof DescribePinyin200Response
     */
    'Response'?: DescribePinyin200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePinyin200ResponseResponse
 */
export interface DescribePinyin200ResponseResponse {
    /**
     * 
     * @type {PinyinPinyinResult}
     * @memberof DescribePinyin200ResponseResponse
     */
    'Data'?: PinyinPinyinResult;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePinyin200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePinyinRequest
 */
export interface DescribePinyinRequest {
    /**
     * 多音字
     * @type {boolean}
     * @memberof DescribePinyinRequest
     */
    'Heteronym'?: boolean;
    /**
     * 风格
     * @type {string}
     * @memberof DescribePinyinRequest
     */
    'Style'?: DescribePinyinRequestStyleEnum;
    /**
     * 汉字
     * @type {string}
     * @memberof DescribePinyinRequest
     */
    'Value'?: string;
}

export const DescribePinyinRequestStyleEnum = {
    Normal: 'NORMAL',
    Tone: 'TONE',
    Tone2: 'TONE2',
    Tone3: 'TONE3',
    Initials: 'INITIALS',
    FirstLetter: 'FIRST_LETTER'
} as const;

export type DescribePinyinRequestStyleEnum = typeof DescribePinyinRequestStyleEnum[keyof typeof DescribePinyinRequestStyleEnum];

/**
 * 
 * @export
 * @interface DescribePoliciesOnResourceType200Response
 */
export interface DescribePoliciesOnResourceType200Response {
    /**
     * 
     * @type {DescribePoliciesOnResourceType200ResponseResponse}
     * @memberof DescribePoliciesOnResourceType200Response
     */
    'Response'?: DescribePoliciesOnResourceType200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePoliciesOnResourceType200ResponseResponse
 */
export interface DescribePoliciesOnResourceType200ResponseResponse {
    /**
     * 
     * @type {DescribePoliciesOnResourceTypeResponsePageData}
     * @memberof DescribePoliciesOnResourceType200ResponseResponse
     */
    'Data'?: DescribePoliciesOnResourceTypeResponsePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePoliciesOnResourceType200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePoliciesOnResourceTypeRequest
 */
export interface DescribePoliciesOnResourceTypeRequest {
    /**
     * 
     * @type {DescribePoliciesOnResourceTypeRequestFilter}
     * @memberof DescribePoliciesOnResourceTypeRequest
     */
    'Filter'?: DescribePoliciesOnResourceTypeRequestFilter;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribePoliciesOnResourceTypeRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribePoliciesOnResourceTypeRequest
     */
    'PageSize'?: number;
}
/**
 * 获取指定资源类型对应的权限组列表的查询条件
 * @export
 * @interface DescribePoliciesOnResourceTypeRequestFilter
 */
export interface DescribePoliciesOnResourceTypeRequestFilter {
    /**
     * 权限组显示名称，模糊匹配
     * @type {string}
     * @memberof DescribePoliciesOnResourceTypeRequestFilter
     */
    'PolicyAlias'?: string;
    /**
     * 资源类型，精确匹配
     * @type {string}
     * @memberof DescribePoliciesOnResourceTypeRequestFilter
     */
    'ResourceType': string;
    /**
     * 可见范围（默认 true），all：全部；true：用户可见；false：界面不可见（逻辑权限组）
     * @type {string}
     * @memberof DescribePoliciesOnResourceTypeRequestFilter
     */
    'Visible'?: string;
}
/**
 * 获取指定资源类型对应的权限组列表的数据
 * @export
 * @interface DescribePoliciesOnResourceTypeResponsePageData
 */
export interface DescribePoliciesOnResourceTypeResponsePageData {
    /**
     * 页码
     * @type {number}
     * @memberof DescribePoliciesOnResourceTypeResponsePageData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribePoliciesOnResourceTypeResponsePageData
     */
    'PageSize'?: number;
    /**
     * 权限组列表
     * @type {Array<PolicyInfo>}
     * @memberof DescribePoliciesOnResourceTypeResponsePageData
     */
    'PolicyList'?: Array<PolicyInfo> | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribePoliciesOnResourceTypeResponsePageData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface DescribePolicy200Response
 */
export interface DescribePolicy200Response {
    /**
     * 
     * @type {DescribePolicy200ResponseResponse}
     * @memberof DescribePolicy200Response
     */
    'Response'?: DescribePolicy200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePolicy200ResponseResponse
 */
export interface DescribePolicy200ResponseResponse {
    /**
     * 
     * @type {PolicyDetail}
     * @memberof DescribePolicy200ResponseResponse
     */
    'PolicyInfo'?: PolicyDetail;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePolicy200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePolicyRequest
 */
export interface DescribePolicyRequest {
    /**
     * 针对模糊配置的 action 定义，是否转换成精确的 action 定义返回
     * @type {boolean}
     * @memberof DescribePolicyRequest
     */
    'AccurateActions'?: boolean;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof DescribePolicyRequest
     */
    'PolicyId'?: number;
}
/**
 * 
 * @export
 * @interface DescribePreSignUploadUrl200Response
 */
export interface DescribePreSignUploadUrl200Response {
    /**
     * 
     * @type {DescribePreSignUploadUrl200ResponseResponse}
     * @memberof DescribePreSignUploadUrl200Response
     */
    'Response'?: DescribePreSignUploadUrl200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePreSignUploadUrl200ResponseResponse
 */
export interface DescribePreSignUploadUrl200ResponseResponse {
    /**
     * 
     * @type {ApiFilePreSignUploadUrlData}
     * @memberof DescribePreSignUploadUrl200ResponseResponse
     */
    'Data'?: ApiFilePreSignUploadUrlData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePreSignUploadUrl200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePreSignUploadUrlRequest
 */
export interface DescribePreSignUploadUrlRequest {
    /**
     * 内容类型，和web端的文件上传时content-type是一样的
     * @type {string}
     * @memberof DescribePreSignUploadUrlRequest
     */
    'ContentType'?: string;
    /**
     * 文件名
     * @type {string}
     * @memberof DescribePreSignUploadUrlRequest
     */
    'FileName'?: string;
    /**
     * 若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过open api【创建文件夹】获取
     * @type {number}
     * @memberof DescribePreSignUploadUrlRequest
     */
    'FolderId'?: DescribePreSignUploadUrlRequestFolderIdEnum;
    /**
     * 文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。
     * @type {number}
     * @memberof DescribePreSignUploadUrlRequest
     */
    'FolderType'?: DescribePreSignUploadUrlRequestFolderTypeEnum;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribePreSignUploadUrlRequest
     */
    'ProjectName'?: string;
}

export const DescribePreSignUploadUrlRequestFolderIdEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DescribePreSignUploadUrlRequestFolderIdEnum = typeof DescribePreSignUploadUrlRequestFolderIdEnum[keyof typeof DescribePreSignUploadUrlRequestFolderIdEnum];
export const DescribePreSignUploadUrlRequestFolderTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DescribePreSignUploadUrlRequestFolderTypeEnum = typeof DescribePreSignUploadUrlRequestFolderTypeEnum[keyof typeof DescribePreSignUploadUrlRequestFolderTypeEnum];

/**
 * 
 * @export
 * @interface DescribePredicatePolicyOnResource200Response
 */
export interface DescribePredicatePolicyOnResource200Response {
    /**
     * 
     * @type {DescribePredicatePolicyOnResource200ResponseResponse}
     * @memberof DescribePredicatePolicyOnResource200Response
     */
    'Response'?: DescribePredicatePolicyOnResource200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePredicatePolicyOnResource200ResponseResponse
 */
export interface DescribePredicatePolicyOnResource200ResponseResponse {
    /**
     * 
     * @type {PredicatePolicy}
     * @memberof DescribePredicatePolicyOnResource200ResponseResponse
     */
    'PredicatePolicyOnResourceInfo'?: PredicatePolicy;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePredicatePolicyOnResource200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribePredicatePolicyOnResourceRequest
 */
export interface DescribePredicatePolicyOnResourceRequest {
    /**
     * 
     * @type {ResourceInfo}
     * @memberof DescribePredicatePolicyOnResourceRequest
     */
    'Resource'?: ResourceInfo;
}
/**
 * 
 * @export
 * @interface DescribeProgramProjects200Response
 */
export interface DescribeProgramProjects200Response {
    /**
     * 
     * @type {DescribeProgramProjects200ResponseResponse}
     * @memberof DescribeProgramProjects200Response
     */
    'Response'?: DescribeProgramProjects200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProgramProjects200ResponseResponse
 */
export interface DescribeProgramProjects200ResponseResponse {
    /**
     * 项目集下项目列表数据
     * @type {Array<Program>}
     * @memberof DescribeProgramProjects200ResponseResponse
     */
    'Data'?: Array<Program>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProgramProjects200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProgramProjectsRequest
 */
export interface DescribeProgramProjectsRequest {
    /**
     * 项目集 ID
     * @type {number}
     * @memberof DescribeProgramProjectsRequest
     */
    'ProgramId'?: number;
}
/**
 * 
 * @export
 * @interface DescribePrograms200Response
 */
export interface DescribePrograms200Response {
    /**
     * 
     * @type {DescribePrograms200ResponseResponse}
     * @memberof DescribePrograms200Response
     */
    'Response'?: DescribePrograms200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribePrograms200ResponseResponse
 */
export interface DescribePrograms200ResponseResponse {
    /**
     * 
     * @type {ProgramData}
     * @memberof DescribePrograms200ResponseResponse
     */
    'Data'?: ProgramData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribePrograms200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProgramsRequest
 */
export interface DescribeProgramsRequest {
    /**
     * 关键字搜索：项目名
     * @type {string}
     * @memberof DescribeProgramsRequest
     */
    'Keyword'?: string;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeProgramsRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeProgramsRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectAnnouncementRequest
 */
export interface DescribeProjectAnnouncementRequest {
    /**
     * 项目名
     * @type {string}
     * @memberof DescribeProjectAnnouncementRequest
     */
    'ProjectName'?: string;
    /**
     * 公告ID
     * @type {number}
     * @memberof DescribeProjectAnnouncementRequest
     */
    'Id'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectAnnouncements200Response
 */
export interface DescribeProjectAnnouncements200Response {
    /**
     * 
     * @type {DescribeProjectAnnouncements200ResponseResponse}
     * @memberof DescribeProjectAnnouncements200Response
     */
    'Response'?: DescribeProjectAnnouncements200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectAnnouncements200ResponseResponse
 */
export interface DescribeProjectAnnouncements200ResponseResponse {
    /**
     * 公告总数
     * @type {number}
     * @memberof DescribeProjectAnnouncements200ResponseResponse
     */
    'TotalCount'?: number;
    /**
     * 每页数量
     * @type {number}
     * @memberof DescribeProjectAnnouncements200ResponseResponse
     */
    'PageSize'?: number;
    /**
     * 页数
     * @type {number}
     * @memberof DescribeProjectAnnouncements200ResponseResponse
     */
    'PageNumber'?: number;
    /**
     * 公告列表
     * @type {Array<ProjectAnnouncementProjectAnnouncement>}
     * @memberof DescribeProjectAnnouncements200ResponseResponse
     */
    'List'?: Array<ProjectAnnouncementProjectAnnouncement>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectAnnouncements200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectAnnouncementsRequest
 */
export interface DescribeProjectAnnouncementsRequest {
    /**
     * 每页数量
     * @type {number}
     * @memberof DescribeProjectAnnouncementsRequest
     */
    'PageSize'?: number;
    /**
     * 页数
     * @type {number}
     * @memberof DescribeProjectAnnouncementsRequest
     */
    'PageNumber'?: number;
    /**
     * 项目名
     * @type {string}
     * @memberof DescribeProjectAnnouncementsRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectByNameRequest
 */
export interface DescribeProjectByNameRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeProjectByNameRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectCredentials200Response
 */
export interface DescribeProjectCredentials200Response {
    /**
     * 
     * @type {DescribeProjectCredentials200ResponseResponse}
     * @memberof DescribeProjectCredentials200Response
     */
    'Response'?: DescribeProjectCredentials200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectCredentials200ResponseResponse
 */
export interface DescribeProjectCredentials200ResponseResponse {
    /**
     * 
     * @type {DescribeProjectCredentialsData}
     * @memberof DescribeProjectCredentials200ResponseResponse
     */
    'Data'?: DescribeProjectCredentialsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectCredentials200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 获取凭据列表返回结构
 * @export
 * @interface DescribeProjectCredentialsData
 */
export interface DescribeProjectCredentialsData {
    /**
     * 凭据列表返回结构
     * @type {Array<Credential>}
     * @memberof DescribeProjectCredentialsData
     */
    'CredentialList'?: Array<Credential>;
}
/**
 * 
 * @export
 * @interface DescribeProjectCredentialsRequest
 */
export interface DescribeProjectCredentialsRequest {
    /**
     * 项目 ID
     * @type {number}
     * @memberof DescribeProjectCredentialsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepotBranches200Response
 */
export interface DescribeProjectDepotBranches200Response {
    /**
     * 
     * @type {DescribeProjectDepotBranches200ResponseResponse}
     * @memberof DescribeProjectDepotBranches200Response
     */
    'Response'?: DescribeProjectDepotBranches200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectDepotBranches200ResponseResponse
 */
export interface DescribeProjectDepotBranches200ResponseResponse {
    /**
     * 
     * @type {DepotDetailData}
     * @memberof DescribeProjectDepotBranches200ResponseResponse
     */
    'Data'?: DepotDetailData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectDepotBranches200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepotBranchesRequest
 */
export interface DescribeProjectDepotBranchesRequest {
    /**
     * 仓库类型
     * @type {string}
     * @memberof DescribeProjectDepotBranchesRequest
     */
    'DepotType'?: string;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeProjectDepotBranchesRequest
     */
    'Id'?: number;
    /**
     * 项目 Id
     * @type {number}
     * @memberof DescribeProjectDepotBranchesRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepotCommitsRequest
 */
export interface DescribeProjectDepotCommitsRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeProjectDepotCommitsRequest
     */
    'Branch'?: string;
    /**
     * 仓库类型
     * @type {string}
     * @memberof DescribeProjectDepotCommitsRequest
     */
    'DepotType'?: string;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof DescribeProjectDepotCommitsRequest
     */
    'Id'?: number;
    /**
     * 项目 Id
     * @type {number}
     * @memberof DescribeProjectDepotCommitsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepotInfoList200Response
 */
export interface DescribeProjectDepotInfoList200Response {
    /**
     * 
     * @type {DescribeProjectDepotInfoList200ResponseResponse}
     * @memberof DescribeProjectDepotInfoList200Response
     */
    'Response'?: DescribeProjectDepotInfoList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectDepotInfoList200ResponseResponse
 */
export interface DescribeProjectDepotInfoList200ResponseResponse {
    /**
     * 
     * @type {DepotData}
     * @memberof DescribeProjectDepotInfoList200ResponseResponse
     */
    'DepotData'?: DepotData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectDepotInfoList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepotInfoListRequest
 */
export interface DescribeProjectDepotInfoListRequest {
    /**
     * 页号
     * @type {string}
     * @memberof DescribeProjectDepotInfoListRequest
     */
    'PageNumber'?: string;
    /**
     * 每页的个数
     * @type {string}
     * @memberof DescribeProjectDepotInfoListRequest
     */
    'PageSize'?: string;
    /**
     * 项目id
     * @type {number}
     * @memberof DescribeProjectDepotInfoListRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectDepots200Response
 */
export interface DescribeProjectDepots200Response {
    /**
     * 
     * @type {DescribeProjectDepots200ResponseResponse}
     * @memberof DescribeProjectDepots200Response
     */
    'Response'?: DescribeProjectDepots200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectDepots200ResponseResponse
 */
export interface DescribeProjectDepots200ResponseResponse {
    /**
     * 
     * @type {DescribeProjectDepotsData}
     * @memberof DescribeProjectDepots200ResponseResponse
     */
    'Data'?: DescribeProjectDepotsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectDepots200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * DescribeProjectDepots 返回数据结构
 * @export
 * @interface DescribeProjectDepotsData
 */
export interface DescribeProjectDepotsData {
    /**
     * 仓库信息列表
     * @type {Array<CodingCIProjectDepot>}
     * @memberof DescribeProjectDepotsData
     */
    'DepotList'?: Array<CodingCIProjectDepot>;
    /**
     * 仓库类型是否被授权，如 Github 是否被授权
     * @type {boolean}
     * @memberof DescribeProjectDepotsData
     */
    'IsBound'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeProjectIssueFieldList200Response
 */
export interface DescribeProjectIssueFieldList200Response {
    /**
     * 
     * @type {DescribeProjectIssueFieldList200ResponseResponse}
     * @memberof DescribeProjectIssueFieldList200Response
     */
    'Response'?: DescribeProjectIssueFieldList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectIssueFieldList200ResponseResponse
 */
export interface DescribeProjectIssueFieldList200ResponseResponse {
    /**
     * 项目的事项属性列表
     * @type {Array<ProjectIssueField>}
     * @memberof DescribeProjectIssueFieldList200ResponseResponse
     */
    'ProjectIssueFieldList'?: Array<ProjectIssueField>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectIssueFieldList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectIssueFieldListRequest
 */
export interface DescribeProjectIssueFieldListRequest {
    /**
     * 事项类型  DEFECT - 缺陷  REQUIREMENT - 需求  MISSION - 任务  EPIC - 史诗  SUB_TASK - 子任务
     * @type {string}
     * @memberof DescribeProjectIssueFieldListRequest
     */
    'IssueType'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeProjectIssueFieldListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectIssueStatusList200Response
 */
export interface DescribeProjectIssueStatusList200Response {
    /**
     * 
     * @type {DescribeProjectIssueStatusList200ResponseResponse}
     * @memberof DescribeProjectIssueStatusList200Response
     */
    'Response'?: DescribeProjectIssueStatusList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectIssueStatusList200ResponseResponse
 */
export interface DescribeProjectIssueStatusList200ResponseResponse {
    /**
     * 项目的事项状态列表
     * @type {Array<ProjectIssueStatus>}
     * @memberof DescribeProjectIssueStatusList200ResponseResponse
     */
    'ProjectIssueStatusList'?: Array<ProjectIssueStatus>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectIssueStatusList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectIssueTypeList200Response
 */
export interface DescribeProjectIssueTypeList200Response {
    /**
     * 
     * @type {DescribeProjectIssueTypeList200ResponseResponse}
     * @memberof DescribeProjectIssueTypeList200Response
     */
    'Response'?: DescribeProjectIssueTypeList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectIssueTypeList200ResponseResponse
 */
export interface DescribeProjectIssueTypeList200ResponseResponse {
    /**
     * 事项类型列表
     * @type {Array<IssueTypeDetailWithSplit>}
     * @memberof DescribeProjectIssueTypeList200ResponseResponse
     */
    'IssueTypes'?: Array<IssueTypeDetailWithSplit>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectIssueTypeList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectIssueTypeListRequest
 */
export interface DescribeProjectIssueTypeListRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeProjectIssueTypeListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectLabels200Response
 */
export interface DescribeProjectLabels200Response {
    /**
     * 
     * @type {DescribeProjectLabels200ResponseResponse}
     * @memberof DescribeProjectLabels200Response
     */
    'Response'?: DescribeProjectLabels200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectLabels200ResponseResponse
 */
export interface DescribeProjectLabels200ResponseResponse {
    /**
     * 项目列表信息
     * @type {Array<Project>}
     * @memberof DescribeProjectLabels200ResponseResponse
     */
    'ProjectList'?: Array<Project> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectLabels200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectLabelsRequest
 */
export interface DescribeProjectLabelsRequest {
    /**
     * 标签
     * @type {string}
     * @memberof DescribeProjectLabelsRequest
     */
    'Label'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectMemberPrincipals200Response
 */
export interface DescribeProjectMemberPrincipals200Response {
    /**
     * 
     * @type {DescribeProjectMemberPrincipals200ResponseResponse}
     * @memberof DescribeProjectMemberPrincipals200Response
     */
    'Response'?: DescribeProjectMemberPrincipals200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectMemberPrincipals200ResponseResponse
 */
export interface DescribeProjectMemberPrincipals200ResponseResponse {
    /**
     * 
     * @type {PrincipalData}
     * @memberof DescribeProjectMemberPrincipals200ResponseResponse
     */
    'Data'?: PrincipalData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectMemberPrincipals200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectMemberPrincipalsRequest
 */
export interface DescribeProjectMemberPrincipalsRequest {
    /**
     * 关键字搜索：成员名/邮箱
     * @type {string}
     * @memberof DescribeProjectMemberPrincipalsRequest
     */
    'Keyword'?: string;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeProjectMemberPrincipalsRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeProjectMemberPrincipalsRequest
     */
    'PageSize'?: number;
    /**
     * 权限组Id
     * @type {number}
     * @memberof DescribeProjectMemberPrincipalsRequest
     */
    'PolicyId'?: number;
    /**
     * 项目Id
     * @type {number}
     * @memberof DescribeProjectMemberPrincipalsRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectMembers200Response
 */
export interface DescribeProjectMembers200Response {
    /**
     * 
     * @type {DescribeProjectMembers200ResponseResponse}
     * @memberof DescribeProjectMembers200Response
     */
    'Response'?: DescribeProjectMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectMembers200ResponseResponse
 */
export interface DescribeProjectMembers200ResponseResponse {
    /**
     * 
     * @type {ProjectMemberData}
     * @memberof DescribeProjectMembers200ResponseResponse
     */
    'Data'?: ProjectMemberData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectMembersRequest
 */
export interface DescribeProjectMembersRequest {
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeProjectMembersRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeProjectMembersRequest
     */
    'PageSize'?: number;
    /**
     * 项目Id
     * @type {number}
     * @memberof DescribeProjectMembersRequest
     */
    'ProjectId'?: number;
    /**
     * 用户组Id
     * @type {number}
     * @memberof DescribeProjectMembersRequest
     */
    'RoleId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectMergeRequestsRequest
 */
export interface DescribeProjectMergeRequestsRequest {
    /**
     * mr创建结束时间
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'CreatedAtEndDate'?: string;
    /**
     * mr创建开始时间
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'CreatedAtStartDate'?: string;
    /**
     * 合并请求创建者邮箱
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'CreatorEmail'?: string;
    /**
     * 合并请求创建者全局 key
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'CreatorGlobalKey'?: string;
    /**
     * 是否正序排序 默认 false
     * @type {boolean}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'IsSortDirectionAsc'?: boolean;
    /**
     * 关键词
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'KeyWord'?: string;
    /**
     * 标签
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'Label'?: string;
    /**
     * 合并请求合并者邮箱
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'MergerEmail'?: string;
    /**
     * 合并请求合并者全局 key
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'MergerGlobalKey'?: string;
    /**
     * 页数 默认 1
     * @type {number}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数 默认 10
     * @type {number}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'PageSize'?: number;
    /**
     * 项目 Id
     * @type {number}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'ProjectId'?: number;
    /**
     * 合并请求评审者邮箱
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'ReviewerEmail'?: string;
    /**
     * 合并请求评审者全局 key
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'ReviewerGlobalKey'?: string;
    /**
     * 排序 action_at：以更新时间排序  created_at：以创建时间排序
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'Sort'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'SourceBranch'?: string;
    /**
     * 合并请求状态 open/close/all
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'Status'?: string;
    /**
     * 欲合入分支
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'TargetBranch'?: string;
    /**
     * mr更新结束时间
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'UpdatedAtEndDate'?: string;
    /**
     * mr更新开始时间
     * @type {string}
     * @memberof DescribeProjectMergeRequestsRequest
     */
    'UpdatedAtStartDate'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectRoles200Response
 */
export interface DescribeProjectRoles200Response {
    /**
     * 
     * @type {DescribeProjectRoles200ResponseResponse}
     * @memberof DescribeProjectRoles200Response
     */
    'Response'?: DescribeProjectRoles200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectRoles200ResponseResponse
 */
export interface DescribeProjectRoles200ResponseResponse {
    /**
     * 用户组
     * @type {Array<Role>}
     * @memberof DescribeProjectRoles200ResponseResponse
     */
    'Roles'?: Array<Role>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectRoles200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectRolesRequest
 */
export interface DescribeProjectRolesRequest {
    /**
     * 项目Id
     * @type {number}
     * @memberof DescribeProjectRolesRequest
     */
    'ProjectId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeProjectsByFeature200Response
 */
export interface DescribeProjectsByFeature200Response {
    /**
     * 
     * @type {DescribeProjectsByFeature200ResponseResponse}
     * @memberof DescribeProjectsByFeature200Response
     */
    'Response'?: DescribeProjectsByFeature200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProjectsByFeature200ResponseResponse
 */
export interface DescribeProjectsByFeature200ResponseResponse {
    /**
     * 项目id
     * @type {Array<number>}
     * @memberof DescribeProjectsByFeature200ResponseResponse
     */
    'ProjectId'?: Array<number> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProjectsByFeature200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProjectsByFeatureRequest
 */
export interface DescribeProjectsByFeatureRequest {
    /**
     * 一级菜单名称
     * @type {string}
     * @memberof DescribeProjectsByFeatureRequest
     */
    'MenuName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranch200Response
 */
export interface DescribeProtectedBranch200Response {
    /**
     * 
     * @type {DescribeProtectedBranch200ResponseResponse}
     * @memberof DescribeProtectedBranch200Response
     */
    'Response'?: DescribeProtectedBranch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProtectedBranch200ResponseResponse
 */
export interface DescribeProtectedBranch200ResponseResponse {
    /**
     * 
     * @type {ProtectedBranch}
     * @memberof DescribeProtectedBranch200ResponseResponse
     */
    'ProtectedBranch'?: ProtectedBranch;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProtectedBranch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranchMembers200Response
 */
export interface DescribeProtectedBranchMembers200Response {
    /**
     * 
     * @type {DescribeProtectedBranchMembers200ResponseResponse}
     * @memberof DescribeProtectedBranchMembers200Response
     */
    'Response'?: DescribeProtectedBranchMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProtectedBranchMembers200ResponseResponse
 */
export interface DescribeProtectedBranchMembers200ResponseResponse {
    /**
     * 保护分支成员列表
     * @type {Array<ProtectedBranchMember>}
     * @memberof DescribeProtectedBranchMembers200ResponseResponse
     */
    'Members'?: Array<ProtectedBranchMember>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProtectedBranchMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranchMembersRequest
 */
export interface DescribeProtectedBranchMembersRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeProtectedBranchMembersRequest
     */
    'BranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeProtectedBranchMembersRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeProtectedBranchMembersRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranchRequest
 */
export interface DescribeProtectedBranchRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof DescribeProtectedBranchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeProtectedBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof DescribeProtectedBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranches200Response
 */
export interface DescribeProtectedBranches200Response {
    /**
     * 
     * @type {DescribeProtectedBranches200ResponseResponse}
     * @memberof DescribeProtectedBranches200Response
     */
    'Response'?: DescribeProtectedBranches200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeProtectedBranches200ResponseResponse
 */
export interface DescribeProtectedBranches200ResponseResponse {
    /**
     * 保护分支列表
     * @type {Array<ProtectedBranch>}
     * @memberof DescribeProtectedBranches200ResponseResponse
     */
    'ProtectedBranches'?: Array<ProtectedBranch>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeProtectedBranches200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeProtectedBranchesRequest
 */
export interface DescribeProtectedBranchesRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof DescribeProtectedBranchesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeProtectedBranchesRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface DescribeRelatedCaseList200Response
 */
export interface DescribeRelatedCaseList200Response {
    /**
     * 
     * @type {DescribeRelatedCaseList200ResponseResponse}
     * @memberof DescribeRelatedCaseList200Response
     */
    'Response'?: DescribeRelatedCaseList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeRelatedCaseList200ResponseResponse
 */
export interface DescribeRelatedCaseList200ResponseResponse {
    /**
     * 事项关联的测试用例
     * @type {Array<RelatedCase>}
     * @memberof DescribeRelatedCaseList200ResponseResponse
     */
    'Cases'?: Array<RelatedCase>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeRelatedCaseList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeRelatedCaseListRequest
 */
export interface DescribeRelatedCaseListRequest {
    /**
     * 事项ID
     * @type {number}
     * @memberof DescribeRelatedCaseListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeRelatedCaseListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReleaseIssueList200Response
 */
export interface DescribeReleaseIssueList200Response {
    /**
     * 
     * @type {DescribeReleaseIssueList200ResponseResponse}
     * @memberof DescribeReleaseIssueList200Response
     */
    'Response'?: DescribeReleaseIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeReleaseIssueList200ResponseResponse
 */
export interface DescribeReleaseIssueList200ResponseResponse {
    /**
     * 
     * @type {IssueDetailListDataWithPage}
     * @memberof DescribeReleaseIssueList200ResponseResponse
     */
    'Data'?: IssueDetailListDataWithPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeReleaseIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReleaseIssueListRequest
 */
export interface DescribeReleaseIssueListRequest {
    /**
     * 处理人ID数组
     * @type {Array<number>}
     * @memberof DescribeReleaseIssueListRequest
     */
    'Assignees'?: Array<number>;
    /**
     * 事项类型ID数组 
     * @type {Array<number>}
     * @memberof DescribeReleaseIssueListRequest
     */
    'IssueTypeIds'?: Array<number>;
    /**
     * 事项类型数组
     * @type {Array<string>}
     * @memberof DescribeReleaseIssueListRequest
     */
    'IssueTypes'?: Array<string>;
    /**
     * 关键字
     * @type {string}
     * @memberof DescribeReleaseIssueListRequest
     */
    'Keywords'?: string;
    /**
     * 分页查询中的页数,page从1开始计数 
     * @type {number}
     * @memberof DescribeReleaseIssueListRequest
     */
    'Page'?: number;
    /**
     * 分页查询中每页的大小 
     * @type {number}
     * @memberof DescribeReleaseIssueListRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeReleaseIssueListRequest
     */
    'ProjectName'?: string;
    /**
     * 页面上版本ID
     * @type {number}
     * @memberof DescribeReleaseIssueListRequest
     */
    'ReleaseCode'?: number;
    /**
     * 是否展示描述中外部可访问的地址
     * @type {boolean}
     * @memberof DescribeReleaseIssueListRequest
     */
    'ShowImageOutUrl'?: boolean;
    /**
     * 是否显示字事项，和页面开关对应 
     * @type {boolean}
     * @memberof DescribeReleaseIssueListRequest
     */
    'ShowSubIssues'?: boolean;
    /**
     * 排序，取值如\"ID:ASC\" 
     * @type {string}
     * @memberof DescribeReleaseIssueListRequest
     */
    'SortBy'?: string;
    /**
     * 事项状态类型数组 
     * @type {Array<number>}
     * @memberof DescribeReleaseIssueListRequest
     */
    'StatusTypes'?: Array<number>;
    /**
     * 关注人ID数组 
     * @type {Array<number>}
     * @memberof DescribeReleaseIssueListRequest
     */
    'Watchers'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DescribeReleaseList200Response
 */
export interface DescribeReleaseList200Response {
    /**
     * 
     * @type {DescribeReleaseList200ResponseResponse}
     * @memberof DescribeReleaseList200Response
     */
    'Response'?: DescribeReleaseList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeReleaseList200ResponseResponse
 */
export interface DescribeReleaseList200ResponseResponse {
    /**
     * 
     * @type {OpenApiReleaseListDataWithPage}
     * @memberof DescribeReleaseList200ResponseResponse
     */
    'Data'?: OpenApiReleaseListDataWithPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeReleaseList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReleaseListRequest
 */
export interface DescribeReleaseListRequest {
    /**
     * 筛选条件列表，每一个值都是一个筛选条件，条件取值可以参考页面上的对应的HTTP接口 
     * @type {Array<IssueCondition>}
     * @memberof DescribeReleaseListRequest
     */
    'Conditions'?: Array<IssueCondition>;
    /**
     * 分页查询中的页数，page从1开始计数 
     * @type {number}
     * @memberof DescribeReleaseListRequest
     */
    'Page'?: number;
    /**
     * 分页查询中每页的大小 
     * @type {number}
     * @memberof DescribeReleaseListRequest
     */
    'PageSize'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeReleaseListRequest
     */
    'ProjectName'?: string;
    /**
     * 排序KEY 
     * @type {string}
     * @memberof DescribeReleaseListRequest
     */
    'SortKey'?: string;
    /**
     * 排序VALUE 
     * @type {string}
     * @memberof DescribeReleaseListRequest
     */
    'SortValue'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReleaseRequest
 */
export interface DescribeReleaseRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeReleaseRequest
     */
    'ProjectName'?: string;
    /**
     * 版本code
     * @type {number}
     * @memberof DescribeReleaseRequest
     */
    'ReleaseCode'?: number;
}
/**
 * 
 * @export
 * @interface DescribeReport200Response
 */
export interface DescribeReport200Response {
    /**
     * 
     * @type {DescribeReport200ResponseResponse}
     * @memberof DescribeReport200Response
     */
    'Response'?: DescribeReport200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeReport200ResponseResponse
 */
export interface DescribeReport200ResponseResponse {
    /**
     * 
     * @type {ReportData}
     * @memberof DescribeReport200ResponseResponse
     */
    'Data'?: ReportData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeReport200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReportList200Response
 */
export interface DescribeReportList200Response {
    /**
     * 
     * @type {DescribeReportList200ResponseResponse}
     * @memberof DescribeReportList200Response
     */
    'Response'?: DescribeReportList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeReportList200ResponseResponse
 */
export interface DescribeReportList200ResponseResponse {
    /**
     * 
     * @type {ReportsLittleData}
     * @memberof DescribeReportList200ResponseResponse
     */
    'Data'?: ReportsLittleData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeReportList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeReportListRequest
 */
export interface DescribeReportListRequest {
    /**
     * 创建时间
     * @type {string}
     * @memberof DescribeReportListRequest
     */
    'EndAt'?: string;
    /**
     * 报告名称关键词
     * @type {string}
     * @memberof DescribeReportListRequest
     */
    'Keyword'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeReportListRequest
     */
    'ProjectName'?: string;
    /**
     * 创建时间
     * @type {string}
     * @memberof DescribeReportListRequest
     */
    'StartAt'?: string;
    /**
     * 报告状态：CREATING 创建中，AVAILABLE 可用，UNAVAILABLE 不可用
     * @type {string}
     * @memberof DescribeReportListRequest
     */
    'Status'?: string;
}
/**
 * 
 * @export
 * @interface DescribeRequirementDefectRelation200Response
 */
export interface DescribeRequirementDefectRelation200Response {
    /**
     * 
     * @type {DescribeRequirementDefectRelation200ResponseResponse}
     * @memberof DescribeRequirementDefectRelation200Response
     */
    'Response'?: DescribeRequirementDefectRelation200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeRequirementDefectRelation200ResponseResponse
 */
export interface DescribeRequirementDefectRelation200ResponseResponse {
    /**
     * 缺陷列表
     * @type {Array<IssueSimpleData>}
     * @memberof DescribeRequirementDefectRelation200ResponseResponse
     */
    'Issues'?: Array<IssueSimpleData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeRequirementDefectRelation200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeRequirementDefectRelationRequest
 */
export interface DescribeRequirementDefectRelationRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeRequirementDefectRelationRequest
     */
    'ProjectName'?: string;
    /**
     * 需求 Code
     * @type {number}
     * @memberof DescribeRequirementDefectRelationRequest
     */
    'RequirementCode'?: number;
}
/**
 * 
 * @export
 * @interface DescribeRequirementTestCaseList200Response
 */
export interface DescribeRequirementTestCaseList200Response {
    /**
     * 
     * @type {DescribeRequirementTestCaseList200ResponseResponse}
     * @memberof DescribeRequirementTestCaseList200Response
     */
    'Response'?: DescribeRequirementTestCaseList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeRequirementTestCaseList200ResponseResponse
 */
export interface DescribeRequirementTestCaseList200ResponseResponse {
    /**
     * 
     * @type {CasesData}
     * @memberof DescribeRequirementTestCaseList200ResponseResponse
     */
    'Data'?: CasesData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeRequirementTestCaseList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeRequirementTestCaseListRequest
 */
export interface DescribeRequirementTestCaseListRequest {
    /**
     * 需求 ID
     * @type {number}
     * @memberof DescribeRequirementTestCaseListRequest
     */
    'IssueId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeRequirementTestCaseListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeResourceReferencesCited200Response
 */
export interface DescribeResourceReferencesCited200Response {
    /**
     * 
     * @type {DescribeResourceReferencesCited200ResponseResponse}
     * @memberof DescribeResourceReferencesCited200Response
     */
    'Response'?: DescribeResourceReferencesCited200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeResourceReferencesCited200ResponseResponse
 */
export interface DescribeResourceReferencesCited200ResponseResponse {
    /**
     * 资源列表
     * @type {Array<ResourceReferenceResourceInfo>}
     * @memberof DescribeResourceReferencesCited200ResponseResponse
     */
    'Resource'?: Array<ResourceReferenceResourceInfo>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeResourceReferencesCited200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeResourceReferencesCiting200Response
 */
export interface DescribeResourceReferencesCiting200Response {
    /**
     * 
     * @type {DescribeResourceReferencesCiting200ResponseResponse}
     * @memberof DescribeResourceReferencesCiting200Response
     */
    'Response'?: DescribeResourceReferencesCiting200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeResourceReferencesCiting200ResponseResponse
 */
export interface DescribeResourceReferencesCiting200ResponseResponse {
    /**
     * 资源引用列表
     * @type {Array<ResourceReferenceResourceInfo>}
     * @memberof DescribeResourceReferencesCiting200ResponseResponse
     */
    'Resource'?: Array<ResourceReferenceResourceInfo>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeResourceReferencesCiting200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeResourceReferencesCitingRequest
 */
export interface DescribeResourceReferencesCitingRequest {
    /**
     * 所属主体类型： 1项目、2团队
     * @type {number}
     * @memberof DescribeResourceReferencesCitingRequest
     */
    'ScopeType'?: DescribeResourceReferencesCitingRequestScopeTypeEnum;
    /**
     * 资源 ID
     * @type {string}
     * @memberof DescribeResourceReferencesCitingRequest
     */
    'ResourceCode'?: string;
    /**
     * 所属主体 ID
     * @type {number}
     * @memberof DescribeResourceReferencesCitingRequest
     */
    'ScopeId'?: number;
}

export const DescribeResourceReferencesCitingRequestScopeTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DescribeResourceReferencesCitingRequestScopeTypeEnum = typeof DescribeResourceReferencesCitingRequestScopeTypeEnum[keyof typeof DescribeResourceReferencesCitingRequestScopeTypeEnum];

/**
 * 
 * @export
 * @interface DescribeResourceScopeListOnPolicy200Response
 */
export interface DescribeResourceScopeListOnPolicy200Response {
    /**
     * 
     * @type {DescribeResourceScopeListOnPolicy200ResponseResponse}
     * @memberof DescribeResourceScopeListOnPolicy200Response
     */
    'Response'?: DescribeResourceScopeListOnPolicy200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeResourceScopeListOnPolicy200ResponseResponse
 */
export interface DescribeResourceScopeListOnPolicy200ResponseResponse {
    /**
     * 
     * @type {DescribeResourceScopeListOnPolicyResponseData}
     * @memberof DescribeResourceScopeListOnPolicy200ResponseResponse
     */
    'Data'?: DescribeResourceScopeListOnPolicyResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeResourceScopeListOnPolicy200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeResourceScopeListOnPolicyRequest
 */
export interface DescribeResourceScopeListOnPolicyRequest {
    /**
     * 
     * @type {DescribeResourceScopeListOnPolicyRequestFilter}
     * @memberof DescribeResourceScopeListOnPolicyRequest
     */
    'Filter'?: DescribeResourceScopeListOnPolicyRequestFilter;
    /**
     * 请求页码
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyRequest
     */
    'PageSize'?: number;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyRequest
     */
    'PolicyId'?: number;
}
/**
 * 查询指定权限组的可用资源范围（分页）的查询条件
 * @export
 * @interface DescribeResourceScopeListOnPolicyRequestFilter
 */
export interface DescribeResourceScopeListOnPolicyRequestFilter {
    /**
     * 资源类型（精确匹配）
     * @type {string}
     * @memberof DescribeResourceScopeListOnPolicyRequestFilter
     */
    'ResourceType'?: string | null;
}
/**
 * 查询指定权限组的可用资源范围（分页）的列表数据
 * @export
 * @interface DescribeResourceScopeListOnPolicyResponseData
 */
export interface DescribeResourceScopeListOnPolicyResponseData {
    /**
     * 页码
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyResponseData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyResponseData
     */
    'PageSize'?: number;
    /**
     * 权限组可用资源范围列表
     * @type {Array<PolicyResourceScopeInfo>}
     * @memberof DescribeResourceScopeListOnPolicyResponseData
     */
    'PolicyResourceScopeList'?: Array<PolicyResourceScopeInfo> | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeResourceScopeListOnPolicyResponseData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface DescribeSelfMergeRequests200Response
 */
export interface DescribeSelfMergeRequests200Response {
    /**
     * 
     * @type {DescribeDepotMergeRequests200ResponseResponse}
     * @memberof DescribeSelfMergeRequests200Response
     */
    'Response'?: DescribeDepotMergeRequests200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeSelfMergeRequestsRequest
 */
export interface DescribeSelfMergeRequestsRequest {
    /**
     * mr创建结束时间
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'CreatedAtEndDate'?: string;
    /**
     * mr创建开始时间
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'CreatedAtStartDate'?: string;
    /**
     * 是否正序排序 默认 false
     * @type {boolean}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'IsSortDirectionAsc'?: boolean;
    /**
     * 关键词
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'KeyWord'?: string;
    /**
     * 标签
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'Label'?: string;
    /**
     * 合并请求合并者邮箱
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'MergerEmail'?: string;
    /**
     * 合并请求合并者全局 key
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'MergerGlobalKey'?: string;
    /**
     * 页数 默认 1
     * @type {number}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数 默认 10
     * @type {number}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'PageSize'?: number;
    /**
     * 合并请求评审者邮箱
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'ReviewerEmail'?: string;
    /**
     * 合并请求评审者全局 key
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'ReviewerGlobalKey'?: string;
    /**
     * 排序 action_at：以更新时间排序  created_at：以创建时间排序
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'Sort'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'SourceBranch'?: string;
    /**
     * 合并请求状态 open/close/all
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'Status'?: string;
    /**
     * 欲合入分支
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'TargetBranch'?: string;
    /**
     * mr更新结束时间
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'UpdatedAtEndDate'?: string;
    /**
     * mr更新开始时间
     * @type {string}
     * @memberof DescribeSelfMergeRequestsRequest
     */
    'UpdatedAtStartDate'?: string;
}
/**
 * 
 * @export
 * @interface DescribeServiceHook200Response
 */
export interface DescribeServiceHook200Response {
    /**
     * 
     * @type {ModifyServiceHook200ResponseResponse}
     * @memberof DescribeServiceHook200Response
     */
    'Response'?: ModifyServiceHook200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeServiceHookLogs200Response
 */
export interface DescribeServiceHookLogs200Response {
    /**
     * 
     * @type {DescribeServiceHookLogs200ResponseResponse}
     * @memberof DescribeServiceHookLogs200Response
     */
    'Response'?: DescribeServiceHookLogs200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeServiceHookLogs200ResponseResponse
 */
export interface DescribeServiceHookLogs200ResponseResponse {
    /**
     * 
     * @type {ServiceHookLogPage}
     * @memberof DescribeServiceHookLogs200ResponseResponse
     */
    'Data'?: ServiceHookLogPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeServiceHookLogs200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeServiceHookLogsRequest
 */
export interface DescribeServiceHookLogsRequest {
    /**
     * Service Hook 编号
     * @type {string}
     * @memberof DescribeServiceHookLogsRequest
     */
    'Id'?: string;
    /**
     * 分页页码
     * @type {number}
     * @memberof DescribeServiceHookLogsRequest
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof DescribeServiceHookLogsRequest
     */
    'PageSize'?: number;
    /**
     * 项目编号
     * @type {number}
     * @memberof DescribeServiceHookLogsRequest
     */
    'ProjectId'?: number;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof DescribeServiceHookLogsRequest
     */
    'TargetType'?: DescribeServiceHookLogsRequestTargetTypeEnum;
}

export const DescribeServiceHookLogsRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type DescribeServiceHookLogsRequestTargetTypeEnum = typeof DescribeServiceHookLogsRequestTargetTypeEnum[keyof typeof DescribeServiceHookLogsRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface DescribeServiceHookRequest
 */
export interface DescribeServiceHookRequest {
    /**
     * service-hook-id
     * @type {string}
     * @memberof DescribeServiceHookRequest
     */
    'Id'?: string;
    /**
     * 项目或者研发空间id
     * @type {number}
     * @memberof DescribeServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof DescribeServiceHookRequest
     */
    'TargetType'?: DescribeServiceHookRequestTargetTypeEnum;
}

export const DescribeServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type DescribeServiceHookRequestTargetTypeEnum = typeof DescribeServiceHookRequestTargetTypeEnum[keyof typeof DescribeServiceHookRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface DescribeServiceHooks200Response
 */
export interface DescribeServiceHooks200Response {
    /**
     * 
     * @type {DescribeServiceHooks200ResponseResponse}
     * @memberof DescribeServiceHooks200Response
     */
    'Response'?: DescribeServiceHooks200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeServiceHooks200ResponseResponse
 */
export interface DescribeServiceHooks200ResponseResponse {
    /**
     * 
     * @type {ServiceHookPage}
     * @memberof DescribeServiceHooks200ResponseResponse
     */
    'Data'?: ServiceHookPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeServiceHooks200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeServiceHooksRequest
 */
export interface DescribeServiceHooksRequest {
    /**
     * 创建人编号
     * @type {Array<number>}
     * @memberof DescribeServiceHooksRequest
     */
    'CreatorBy'?: Array<number>;
    /**
     * 事件开关，取值范围：true、false
     * @type {string}
     * @memberof DescribeServiceHooksRequest
     */
    'Enabled'?: string;
    /**
     * 事件名，取值范围：ITERATION_CREATED,ITERATION_DELETED,ITERATION_UPDATED,ISSUE_CREATED,ISSUE_DELETED,ISSUE_COMMENT_CREATED,ISSUE_STATUS_UPDATED,ISSUE_ASSIGNEE_CHANGED,ISSUE_ITERATION_CHANGED,ISSUE_RELATIONSHIP_CHANGED,ISSUE_UPDATED,GIT_PUSHED,GIT_MR_CREATED,GIT_MR_UPDATED,GIT_MR_MERGED,GIT_MR_CLOSED,ARTIFACTS_VERSION_CREATED,ARTIFACTS_VERSION_UPDATED,ARTIFACTS_VERSION_DOWNLOADED,ARTIFACTS_VERSION_DELETED,ARTIFACTS_VERSION_RELEASED,ARTIFACTS_VERSION_DOWNLOAD_FORBIDDEN,ARTIFACTS_VERSION_DOWNLOAD_ALLOWED,ARTIFACTS_VERSION_DOWNLOAD_BLOCKED,ARTIFACTS_REPO_CREATED,ARTIFACTS_REPO_UPDATED,ARTIFACTS_REPO_DELETED,CI_JOB_CREATED,CI_JOB_UPDATED,CI_JOB_DELETED,CI_JOB_STARTED,CI_JOB_FINISHED,FILE_CREATED,FILE_UPDATED,FILE_RENAMED,FILE_SHARE_UPDATED,FILE_MOVED,FILE_COPIED,FILE_MOVED_TO_RECYCLE_BIN,FILE_RESTORED_FROM_RECYCLE_BIN,FILE_DELETED,WIKI_CREATED,WIKI_UPDATED,WIKI_MOVED,WIKI_SHARE_UPDATED,WIKI_ACCESS_UPDATED,WIKI_COPIED,WIKI_MOVED_TO_RECYCLE_BIN,WIKI_RESTORED_FROM_RECYCLE_BIN,WIKI_DELETED,MEMBER_CREATED,MEMBER_DELETED,MEMBER_ROLE_UPDATED,TEST_PLAN_CREATED, TEST_PLAN_UPDATED, TEST_PLAN_FINISHED, TEST_TASK_ASSIGNED, TEST_REPORT_CREATED, FLEXIBLE_TESTX_REVIEW_CREATED, FLEXIBLE_TESTX_REVIEW_COMMENTED, FLEXIBLE_TESTX_REVIEW_UPDATED, FLEXIBLE_TESTX_REVIEW_COMPLETED, FLEXIBLE_TESTX_PLAN_CREATED, FLEXIBLE_TESTX_PLAN_TASK_ASSIGNED, FLEXIBLE_TESTX_PLAN_UPDATED, FLEXIBLE_TESTX_PLAN_FINISHED, FLEXIBLE_TESTX_REPORT_CREATED, CODE_DOG_CREATE_JOB, CODE_DOG_RESULT_NOTIFY, PLAN_CREATED, PLAN_DELETED, PLAN_COMMENT_CREATED, PLAN_STATUE_CHANGED, PLAN_ASSIGNEE_CHANGED, PLAN_UPDATED, RISK_CREATED, RISK_DELETED, RISK_COMMENT_CREATED, RISK_STATUS_CHANGED, RISK_ASSIGNEE_CHANGED, RISK_UPDATED
     * @type {Array<string>}
     * @memberof DescribeServiceHooksRequest
     */
    'Event'?: DescribeServiceHooksRequestEventEnum;
    /**
     * 备注名，支持模糊匹配
     * @type {string}
     * @memberof DescribeServiceHooksRequest
     */
    'Name'?: string;
    /**
     * 分页页码
     * @type {number}
     * @memberof DescribeServiceHooksRequest
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof DescribeServiceHooksRequest
     */
    'PageSize'?: number;
    /**
     * 项目编号
     * @type {number}
     * @memberof DescribeServiceHooksRequest
     */
    'ProjectId'?: number;
    /**
     * 服务名，取值范围：WebHook、WeCom、DingDing、Jenkins、FeiShu。
     * @type {Array<string>}
     * @memberof DescribeServiceHooksRequest
     */
    'Service'?: DescribeServiceHooksRequestServiceEnum;
    /**
     * 状态，取值范围：SUCCESS、FAILURE
     * @type {string}
     * @memberof DescribeServiceHooksRequest
     */
    'Status'?: DescribeServiceHooksRequestStatusEnum;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof DescribeServiceHooksRequest
     */
    'TargetType'?: DescribeServiceHooksRequestTargetTypeEnum;
}

export const DescribeServiceHooksRequestEventEnum = {
} as const;

export type DescribeServiceHooksRequestEventEnum = typeof DescribeServiceHooksRequestEventEnum[keyof typeof DescribeServiceHooksRequestEventEnum];
export const DescribeServiceHooksRequestServiceEnum = {
} as const;

export type DescribeServiceHooksRequestServiceEnum = typeof DescribeServiceHooksRequestServiceEnum[keyof typeof DescribeServiceHooksRequestServiceEnum];
export const DescribeServiceHooksRequestStatusEnum = {
    Success: 'SUCCESS',
    Failure: 'FAILURE'
} as const;

export type DescribeServiceHooksRequestStatusEnum = typeof DescribeServiceHooksRequestStatusEnum[keyof typeof DescribeServiceHooksRequestStatusEnum];
export const DescribeServiceHooksRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type DescribeServiceHooksRequestTargetTypeEnum = typeof DescribeServiceHooksRequestTargetTypeEnum[keyof typeof DescribeServiceHooksRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface DescribeSingeMergeRequestNotes200Response
 */
export interface DescribeSingeMergeRequestNotes200Response {
    /**
     * 
     * @type {DescribeSingeMergeRequestNotes200ResponseResponse}
     * @memberof DescribeSingeMergeRequestNotes200Response
     */
    'Response'?: DescribeSingeMergeRequestNotes200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeSingeMergeRequestNotes200ResponseResponse
 */
export interface DescribeSingeMergeRequestNotes200ResponseResponse {
    /**
     * 单个合并请求行评论内容
     * @type {Array<MergeRequestNoteList>}
     * @memberof DescribeSingeMergeRequestNotes200ResponseResponse
     */
    'Notes'?: Array<MergeRequestNoteList>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeSingeMergeRequestNotes200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeSingeMergeRequestNotesRequest
 */
export interface DescribeSingeMergeRequestNotesRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof DescribeSingeMergeRequestNotesRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求的Iid
     * @type {number}
     * @memberof DescribeSingeMergeRequestNotesRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeSshKey200Response
 */
export interface DescribeSshKey200Response {
    /**
     * 
     * @type {DescribeMemberSshKey200ResponseResponse}
     * @memberof DescribeSshKey200Response
     */
    'Response'?: DescribeMemberSshKey200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeSubIssueList200Response
 */
export interface DescribeSubIssueList200Response {
    /**
     * 
     * @type {DescribeSubIssueList200ResponseResponse}
     * @memberof DescribeSubIssueList200Response
     */
    'Response'?: DescribeSubIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeSubIssueList200ResponseResponse
 */
export interface DescribeSubIssueList200ResponseResponse {
    /**
     * 子事项列表
     * @type {Array<IssueListData>}
     * @memberof DescribeSubIssueList200ResponseResponse
     */
    'SubIssueList'?: Array<IssueListData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeSubIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeSubIssueListRequest
 */
export interface DescribeSubIssueListRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof DescribeSubIssueListRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeSubIssueListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeam200Response
 */
export interface DescribeTeam200Response {
    /**
     * 
     * @type {DescribeTeam200ResponseResponse}
     * @memberof DescribeTeam200Response
     */
    'Response'?: DescribeTeam200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeam200ResponseResponse
 */
export interface DescribeTeam200ResponseResponse {
    /**
     * 
     * @type {TeamData}
     * @memberof DescribeTeam200ResponseResponse
     */
    'Data'?: TeamData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeam200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamAdminMembers200Response
 */
export interface DescribeTeamAdminMembers200Response {
    /**
     * 
     * @type {DescribeTeamAdminMembers200ResponseResponse}
     * @memberof DescribeTeamAdminMembers200Response
     */
    'Response'?: DescribeTeamAdminMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamAdminMembers200ResponseResponse
 */
export interface DescribeTeamAdminMembers200ResponseResponse {
    /**
     * 
     * @type {TeamAdminMemberData}
     * @memberof DescribeTeamAdminMembers200ResponseResponse
     */
    'Data'?: TeamAdminMemberData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamAdminMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamAdminMembersRequest
 */
export interface DescribeTeamAdminMembersRequest {
    /**
     * 第几页
     * @type {number}
     * @memberof DescribeTeamAdminMembersRequest
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeTeamAdminMembersRequest
     */
    'PageSize'?: number;
}
/**
 * 
 * @export
 * @interface DescribeTeamArtifacts200Response
 */
export interface DescribeTeamArtifacts200Response {
    /**
     * 
     * @type {DescribeTeamArtifacts200ResponseResponse}
     * @memberof DescribeTeamArtifacts200Response
     */
    'Response'?: DescribeTeamArtifacts200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamArtifacts200ResponseResponse
 */
export interface DescribeTeamArtifacts200ResponseResponse {
    /**
     * 
     * @type {TeamArtifactPage}
     * @memberof DescribeTeamArtifacts200ResponseResponse
     */
    'Data'?: TeamArtifactPage;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamArtifacts200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamArtifactsRequest
 */
export interface DescribeTeamArtifactsRequest {
    /**
     * 页码，默认：1
     * @type {number}
     * @memberof DescribeTeamArtifactsRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量，默认：10
     * @type {number}
     * @memberof DescribeTeamArtifactsRequest
     */
    'PageSize'?: number;
    /**
     * 
     * @type {ArtifactFilterRule}
     * @memberof DescribeTeamArtifactsRequest
     */
    'Rule'?: ArtifactFilterRule;
}
/**
 * 
 * @export
 * @interface DescribeTeamDepotInfoList200Response
 */
export interface DescribeTeamDepotInfoList200Response {
    /**
     * 
     * @type {DescribeProjectDepotInfoList200ResponseResponse}
     * @memberof DescribeTeamDepotInfoList200Response
     */
    'Response'?: DescribeProjectDepotInfoList200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeTeamDepotInfoListRequest
 */
export interface DescribeTeamDepotInfoListRequest {
    /**
     * 仓库名
     * @type {string}
     * @memberof DescribeTeamDepotInfoListRequest
     */
    'DepotName'?: string;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeTeamDepotInfoListRequest
     */
    'PageNumber'?: number;
    /**
     * 页码大小
     * @type {number}
     * @memberof DescribeTeamDepotInfoListRequest
     */
    'PageSize'?: number;
    /**
     * 项目名
     * @type {string}
     * @memberof DescribeTeamDepotInfoListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamIssueTypeList200Response
 */
export interface DescribeTeamIssueTypeList200Response {
    /**
     * 
     * @type {DescribeTeamIssueTypeList200ResponseResponse}
     * @memberof DescribeTeamIssueTypeList200Response
     */
    'Response'?: DescribeTeamIssueTypeList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamIssueTypeList200ResponseResponse
 */
export interface DescribeTeamIssueTypeList200ResponseResponse {
    /**
     * 事项类型列表
     * @type {Array<IssueTypeDetail>}
     * @memberof DescribeTeamIssueTypeList200ResponseResponse
     */
    'IssueTypes'?: Array<IssueTypeDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamIssueTypeList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamIssues200Response
 */
export interface DescribeTeamIssues200Response {
    /**
     * 
     * @type {DescribeTeamIssues200ResponseResponse}
     * @memberof DescribeTeamIssues200Response
     */
    'Response'?: DescribeTeamIssues200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamIssues200ResponseResponse
 */
export interface DescribeTeamIssues200ResponseResponse {
    /**
     * 事项列表
     * @type {Array<IssueListData>}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'Issues'?: Array<IssueListData>;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'PageNumber'?: number;
    /**
     * 分页的大小
     * @type {number}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'PageSize'?: number;
    /**
     * 所有行数
     * @type {number}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'TotalCount'?: number;
    /**
     * 全部页
     * @type {number}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'TotalPage'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamIssues200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamIssuesRequest
 */
export interface DescribeTeamIssuesRequest {
    /**
     * 筛选条件列表
     * @type {Array<TeamIssueCondition>}
     * @memberof DescribeTeamIssuesRequest
     */
    'Conditions'?: Array<TeamIssueCondition>;
    /**
     * 排序条件列表
     * @type {Array<TeamIssueSortCondition>}
     * @memberof DescribeTeamIssuesRequest
     */
    'Sorts'?: Array<TeamIssueSortCondition>;
    /**
     * 分页大小， 最大500
     * @type {number}
     * @memberof DescribeTeamIssuesRequest
     */
    'PageSize'?: number;
    /**
     * 页码, 从1开始
     * @type {number}
     * @memberof DescribeTeamIssuesRequest
     */
    'PageNumber'?: number;
    /**
     * 是否展示子事项
     * @type {boolean}
     * @memberof DescribeTeamIssuesRequest
     */
    'ShowSubIssues'?: boolean;
    /**
     * 是否显示描述中真实的图片路径(cos/minio)
     * @type {boolean}
     * @memberof DescribeTeamIssuesRequest
     */
    'ShowImageOutUrl'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeTeamMember200Response
 */
export interface DescribeTeamMember200Response {
    /**
     * 
     * @type {DescribeTeamMemberByEmail200ResponseResponse}
     * @memberof DescribeTeamMember200Response
     */
    'Response'?: DescribeTeamMemberByEmail200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeTeamMemberByEmail200Response
 */
export interface DescribeTeamMemberByEmail200Response {
    /**
     * 
     * @type {DescribeTeamMemberByEmail200ResponseResponse}
     * @memberof DescribeTeamMemberByEmail200Response
     */
    'Response'?: DescribeTeamMemberByEmail200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamMemberByEmail200ResponseResponse
 */
export interface DescribeTeamMemberByEmail200ResponseResponse {
    /**
     * 
     * @type {ApiUserUserData}
     * @memberof DescribeTeamMemberByEmail200ResponseResponse
     */
    'TeamMember'?: ApiUserUserData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamMemberByEmail200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamMemberByEmailRequest
 */
export interface DescribeTeamMemberByEmailRequest {
    /**
     * 用户邮箱
     * @type {string}
     * @memberof DescribeTeamMemberByEmailRequest
     */
    'Email'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamMemberRequest
 */
export interface DescribeTeamMemberRequest {
    /**
     * 用户Id
     * @type {number}
     * @memberof DescribeTeamMemberRequest
     */
    'UserId'?: number;
    /**
     * 是否展示部门
     * @type {boolean}
     * @memberof DescribeTeamMemberRequest
     */
    'ShowDepartment'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeTeamMembers200Response
 */
export interface DescribeTeamMembers200Response {
    /**
     * 
     * @type {DescribeTeamMembers200ResponseResponse}
     * @memberof DescribeTeamMembers200Response
     */
    'Response'?: DescribeTeamMembers200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTeamMembers200ResponseResponse
 */
export interface DescribeTeamMembers200ResponseResponse {
    /**
     * 
     * @type {TeamMemberData}
     * @memberof DescribeTeamMembers200ResponseResponse
     */
    'Data'?: TeamMemberData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTeamMembers200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTeamMembersRequest
 */
export interface DescribeTeamMembersRequest {
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeTeamMembersRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeTeamMembersRequest
     */
    'PageSize'?: number;
    /**
     * 是否展示部门
     * @type {boolean}
     * @memberof DescribeTeamMembersRequest
     */
    'ShowDepartment'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeTest200Response
 */
export interface DescribeTest200Response {
    /**
     * 
     * @type {DescribeTest200ResponseResponse}
     * @memberof DescribeTest200Response
     */
    'Response'?: DescribeTest200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTest200ResponseResponse
 */
export interface DescribeTest200ResponseResponse {
    /**
     * 
     * @type {TestData}
     * @memberof DescribeTest200ResponseResponse
     */
    'Data'?: TestData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTest200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestCaseList200Response
 */
export interface DescribeTestCaseList200Response {
    /**
     * 
     * @type {DescribeTestCaseList200ResponseResponse}
     * @memberof DescribeTestCaseList200Response
     */
    'Response'?: DescribeTestCaseList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTestCaseList200ResponseResponse
 */
export interface DescribeTestCaseList200ResponseResponse {
    /**
     * 
     * @type {CasesDataSchema}
     * @memberof DescribeTestCaseList200ResponseResponse
     */
    'Data'?: CasesDataSchema;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTestCaseList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestCaseListRequest
 */
export interface DescribeTestCaseListRequest {
    /**
     * 关键字搜索
     * @type {string}
     * @memberof DescribeTestCaseListRequest
     */
    'Keyword'?: string;
    /**
     * 优先级，默认2（中），可选值：0（紧急）,1（高）,2（中）,3（低）
     * @type {number}
     * @memberof DescribeTestCaseListRequest
     */
    'Priority'?: DescribeTestCaseListRequestPriorityEnum;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestCaseListRequest
     */
    'ProjectName'?: string;
    /**
     * 分组 ID
     * @type {number}
     * @memberof DescribeTestCaseListRequest
     */
    'SectionId'?: number;
    /**
     * 用例类型，可选值：STEPS(步骤用例)，TEXT(文本用例)
     * @type {string}
     * @memberof DescribeTestCaseListRequest
     */
    'TemplateType'?: string;
    /**
     * 页码
     * @type {number}
     * @memberof DescribeTestCaseListRequest
     */
    'Page'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof DescribeTestCaseListRequest
     */
    'PageSize'?: number;
}

export const DescribeTestCaseListRequestPriorityEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DescribeTestCaseListRequestPriorityEnum = typeof DescribeTestCaseListRequestPriorityEnum[keyof typeof DescribeTestCaseListRequestPriorityEnum];

/**
 * 
 * @export
 * @interface DescribeTestCaseSectionList200Response
 */
export interface DescribeTestCaseSectionList200Response {
    /**
     * 
     * @type {DescribeTestCaseSectionList200ResponseResponse}
     * @memberof DescribeTestCaseSectionList200Response
     */
    'Response'?: DescribeTestCaseSectionList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTestCaseSectionList200ResponseResponse
 */
export interface DescribeTestCaseSectionList200ResponseResponse {
    /**
     * 
     * @type {SectionsData}
     * @memberof DescribeTestCaseSectionList200ResponseResponse
     */
    'Data'?: SectionsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTestCaseSectionList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestCaseSectionListRequest
 */
export interface DescribeTestCaseSectionListRequest {
    /**
     * 父级 ID，默认 0
     * @type {number}
     * @memberof DescribeTestCaseSectionListRequest
     */
    'ParentId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestCaseSectionListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestDefectList200Response
 */
export interface DescribeTestDefectList200Response {
    /**
     * 
     * @type {DescribeTestDefectList200ResponseResponse}
     * @memberof DescribeTestDefectList200Response
     */
    'Response'?: DescribeTestDefectList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTestDefectList200ResponseResponse
 */
export interface DescribeTestDefectList200ResponseResponse {
    /**
     * 
     * @type {TestDefectsData}
     * @memberof DescribeTestDefectList200ResponseResponse
     */
    'Data'?: TestDefectsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTestDefectList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestDefectListRequest
 */
export interface DescribeTestDefectListRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestDefectListRequest
     */
    'ProjectName'?: string;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof DescribeTestDefectListRequest
     */
    'TestId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeTestList200Response
 */
export interface DescribeTestList200Response {
    /**
     * 
     * @type {DescribeTestList200ResponseResponse}
     * @memberof DescribeTestList200Response
     */
    'Response'?: DescribeTestList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTestList200ResponseResponse
 */
export interface DescribeTestList200ResponseResponse {
    /**
     * 
     * @type {TestsData}
     * @memberof DescribeTestList200ResponseResponse
     */
    'Data'?: TestsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTestList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestListRequest
 */
export interface DescribeTestListRequest {
    /**
     * 优先级
     * @type {number}
     * @memberof DescribeTestListRequest
     */
    'Priority'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestListRequest
     */
    'ProjectName'?: string;
    /**
     * 测试计划 ID
     * @type {number}
     * @memberof DescribeTestListRequest
     */
    'RunId'?: number;
    /**
     * 测试状态,UNTESTED:未测试,PASSED:通过,BLOCKED:阻塞,RETEST:重测,FAILED:失败
     * @type {string}
     * @memberof DescribeTestListRequest
     */
    'Status'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestRequest
 */
export interface DescribeTestRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestRequest
     */
    'ProjectName'?: string;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof DescribeTestRequest
     */
    'TestId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeTestRun200Response
 */
export interface DescribeTestRun200Response {
    /**
     * 
     * @type {ModifyTestRun200ResponseResponse}
     * @memberof DescribeTestRun200Response
     */
    'Response'?: ModifyTestRun200ResponseResponse;
}
/**
 * 
 * @export
 * @interface DescribeTestRunList200Response
 */
export interface DescribeTestRunList200Response {
    /**
     * 
     * @type {DescribeTestRunList200ResponseResponse}
     * @memberof DescribeTestRunList200Response
     */
    'Response'?: DescribeTestRunList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeTestRunList200ResponseResponse
 */
export interface DescribeTestRunList200ResponseResponse {
    /**
     * 
     * @type {RunsData}
     * @memberof DescribeTestRunList200ResponseResponse
     */
    'Data'?: RunsData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeTestRunList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeTestRunListRequest
 */
export interface DescribeTestRunListRequest {
    /**
     * 执行方式: 1-手动执行 2-自动化流水线执行
     * @type {number}
     * @memberof DescribeTestRunListRequest
     */
    'ExecuteType'?: number;
    /**
     * 发布版本状态：0-未发布 1-已发布（与参数IterationId、IterationStatus、SectionId互斥）
     * @type {number}
     * @memberof DescribeTestRunListRequest
     */
    'GitReleaseState'?: number;
    /**
     * 是否已经归档
     * @type {boolean}
     * @memberof DescribeTestRunListRequest
     */
    'IsCompleted'?: boolean;
    /**
     * 迭代 ID（与参数IterationStatus、GitReleaseState、SectionId互斥）
     * @type {Array<number>}
     * @memberof DescribeTestRunListRequest
     */
    'IterationId'?: Array<number>;
    /**
     * 迭代状态: WAIT_PROCESS、PROCESSING、COMPLETED（与参数IterationId、GitReleaseState、SectionId互斥）
     * @type {Array<string>}
     * @memberof DescribeTestRunListRequest
     */
    'IterationStatus'?: Array<string>;
    /**
     * 计划名称
     * @type {string}
     * @memberof DescribeTestRunListRequest
     */
    'Keyword'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeTestRunListRequest
     */
    'ProjectName'?: string;
    /**
     * 分组 ID（与参数IterationId、IterationStatus、GitReleaseState互斥）
     * @type {number}
     * @memberof DescribeTestRunListRequest
     */
    'SectionId'?: number;
    /**
     * 状态: 0-未开始 1-进行中 2-已测完
     * @type {number}
     * @memberof DescribeTestRunListRequest
     */
    'State'?: number;
}
/**
 * 
 * @export
 * @interface DescribeUserGroups200Response
 */
export interface DescribeUserGroups200Response {
    /**
     * 
     * @type {DescribeUserGroups200ResponseResponse}
     * @memberof DescribeUserGroups200Response
     */
    'Response'?: DescribeUserGroups200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeUserGroups200ResponseResponse
 */
export interface DescribeUserGroups200ResponseResponse {
    /**
     * 
     * @type {DescribeUserGroupsResponsePageData}
     * @memberof DescribeUserGroups200ResponseResponse
     */
    'Data'?: DescribeUserGroupsResponsePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeUserGroups200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeUserGroupsRequest
 */
export interface DescribeUserGroupsRequest {
    /**
     * 
     * @type {DescribeUserGroupsRequestFilter}
     * @memberof DescribeUserGroupsRequest
     */
    'Filter'?: DescribeUserGroupsRequestFilter;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeUserGroupsRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeUserGroupsRequest
     */
    'PageSize'?: number;
}
/**
 * 用户组列表查询条件
 * @export
 * @interface DescribeUserGroupsRequestFilter
 */
export interface DescribeUserGroupsRequestFilter {
    /**
     * 用户组名称
     * @type {string}
     * @memberof DescribeUserGroupsRequestFilter
     */
    'GroupName'?: string;
}
/**
 * 用户组列表的分页数据
 * @export
 * @interface DescribeUserGroupsResponsePageData
 */
export interface DescribeUserGroupsResponsePageData {
    /**
     * 页码
     * @type {number}
     * @memberof DescribeUserGroupsResponsePageData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeUserGroupsResponsePageData
     */
    'PageSize'?: number;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeUserGroupsResponsePageData
     */
    'TotalCount'?: number;
    /**
     * 用户组列表
     * @type {Array<UserGroup>}
     * @memberof DescribeUserGroupsResponsePageData
     */
    'UserGroupList'?: Array<UserGroup> | null;
}
/**
 * 
 * @export
 * @interface DescribeUserHandoverIssues200Response
 */
export interface DescribeUserHandoverIssues200Response {
    /**
     * 
     * @type {DescribeUserHandoverIssues200ResponseResponse}
     * @memberof DescribeUserHandoverIssues200Response
     */
    'Response'?: DescribeUserHandoverIssues200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeUserHandoverIssues200ResponseResponse
 */
export interface DescribeUserHandoverIssues200ResponseResponse {
    /**
     * 待交接事项
     * @type {Array<IssueDetail>}
     * @memberof DescribeUserHandoverIssues200ResponseResponse
     */
    'Issues'?: Array<IssueDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeUserHandoverIssues200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeUserHandoverIssuesRequest
 */
export interface DescribeUserHandoverIssuesRequest {
    /**
     * 用户ID
     * @type {number}
     * @memberof DescribeUserHandoverIssuesRequest
     */
    'WillDeleteUserId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeUserProjectsRequest
 */
export interface DescribeUserProjectsRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeUserProjectsRequest
     */
    'ProjectName'?: string;
    /**
     * 用户编号
     * @type {number}
     * @memberof DescribeUserProjectsRequest
     */
    'UserId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeUsersByGroupId200Response
 */
export interface DescribeUsersByGroupId200Response {
    /**
     * 
     * @type {DescribeUsersByGroupId200ResponseResponse}
     * @memberof DescribeUsersByGroupId200Response
     */
    'Response'?: DescribeUsersByGroupId200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeUsersByGroupId200ResponseResponse
 */
export interface DescribeUsersByGroupId200ResponseResponse {
    /**
     * 
     * @type {DescribeUsersByGroupIdResponsePageData}
     * @memberof DescribeUsersByGroupId200ResponseResponse
     */
    'Data'?: DescribeUsersByGroupIdResponsePageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeUsersByGroupId200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeUsersByGroupIdRequest
 */
export interface DescribeUsersByGroupIdRequest {
    /**
     * 查询条件：GroupId
     * @type {number}
     * @memberof DescribeUsersByGroupIdRequest
     */
    'GroupId'?: number;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeUsersByGroupIdRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeUsersByGroupIdRequest
     */
    'PageSize'?: number;
}
/**
 * 用户列表分页数据
 * @export
 * @interface DescribeUsersByGroupIdResponsePageData
 */
export interface DescribeUsersByGroupIdResponsePageData {
    /**
     * 页码
     * @type {number}
     * @memberof DescribeUsersByGroupIdResponsePageData
     */
    'PageNumber': number | null;
    /**
     * 每页条数
     * @type {number}
     * @memberof DescribeUsersByGroupIdResponsePageData
     */
    'PageSize': number | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeUsersByGroupIdResponsePageData
     */
    'TotalCount': number | null;
    /**
     * 用户组列表
     * @type {Array<UserData>}
     * @memberof DescribeUsersByGroupIdResponsePageData
     */
    'UserDataList'?: Array<UserData> | null;
}
/**
 * 
 * @export
 * @interface DescribeUsersOnResourceAndGrantObject200Response
 */
export interface DescribeUsersOnResourceAndGrantObject200Response {
    /**
     * 
     * @type {DescribeUsersOnResourceAndGrantObject200ResponseResponse}
     * @memberof DescribeUsersOnResourceAndGrantObject200Response
     */
    'Response'?: DescribeUsersOnResourceAndGrantObject200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeUsersOnResourceAndGrantObject200ResponseResponse
 */
export interface DescribeUsersOnResourceAndGrantObject200ResponseResponse {
    /**
     * 
     * @type {DescribeUsersOnResourceAndGrantObjectPageData}
     * @memberof DescribeUsersOnResourceAndGrantObject200ResponseResponse
     */
    'Data'?: DescribeUsersOnResourceAndGrantObjectPageData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeUsersOnResourceAndGrantObject200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 资源下的授权对象中的用户信息请求参数
 * @export
 * @interface DescribeUsersOnResourceAndGrantObjectGrantInfo
 */
export interface DescribeUsersOnResourceAndGrantObjectGrantInfo {
    /**
     * 授权对象 ID
     * @type {string}
     * @memberof DescribeUsersOnResourceAndGrantObjectGrantInfo
     */
    'GrantObjectId': string | null;
    /**
     * 授权对象类型：USER,USER_GROUP,DEPARTMENT
     * @type {string}
     * @memberof DescribeUsersOnResourceAndGrantObjectGrantInfo
     */
    'GrantScope': DescribeUsersOnResourceAndGrantObjectGrantInfoGrantScopeEnum | null;
}

export const DescribeUsersOnResourceAndGrantObjectGrantInfoGrantScopeEnum = {
    User: 'USER',
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT'
} as const;

export type DescribeUsersOnResourceAndGrantObjectGrantInfoGrantScopeEnum = typeof DescribeUsersOnResourceAndGrantObjectGrantInfoGrantScopeEnum[keyof typeof DescribeUsersOnResourceAndGrantObjectGrantInfoGrantScopeEnum];

/**
 * 指定资源下某个授权体中用户列表分页数据
 * @export
 * @interface DescribeUsersOnResourceAndGrantObjectPageData
 */
export interface DescribeUsersOnResourceAndGrantObjectPageData {
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeUsersOnResourceAndGrantObjectPageData
     */
    'PageNumber': number | null;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeUsersOnResourceAndGrantObjectPageData
     */
    'PageSize': number | null;
    /**
     * 总条数
     * @type {number}
     * @memberof DescribeUsersOnResourceAndGrantObjectPageData
     */
    'TotalCount': number | null;
    /**
     * 用户信息列表
     * @type {Array<UserData>}
     * @memberof DescribeUsersOnResourceAndGrantObjectPageData
     */
    'UserDataList'?: Array<UserData> | null;
}
/**
 * 
 * @export
 * @interface DescribeUsersOnResourceAndGrantObjectRequest
 */
export interface DescribeUsersOnResourceAndGrantObjectRequest {
    /**
     * 
     * @type {DescribeUsersOnResourceAndGrantObjectGrantInfo}
     * @memberof DescribeUsersOnResourceAndGrantObjectRequest
     */
    'Grant'?: DescribeUsersOnResourceAndGrantObjectGrantInfo;
    /**
     * 请求页数
     * @type {number}
     * @memberof DescribeUsersOnResourceAndGrantObjectRequest
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof DescribeUsersOnResourceAndGrantObjectRequest
     */
    'PageSize'?: number;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof DescribeUsersOnResourceAndGrantObjectRequest
     */
    'Resource'?: ResourceInfo;
}
/**
 * 
 * @export
 * @interface DescribeWikiList200Response
 */
export interface DescribeWikiList200Response {
    /**
     * 
     * @type {DescribeWikiList200ResponseResponse}
     * @memberof DescribeWikiList200Response
     */
    'Response'?: DescribeWikiList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeWikiList200ResponseResponse
 */
export interface DescribeWikiList200ResponseResponse {
    /**
     * wiki列表数据
     * @type {Array<WikiListData>}
     * @memberof DescribeWikiList200ResponseResponse
     */
    'Data'?: Array<WikiListData>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeWikiList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeWikiListRequest
 */
export interface DescribeWikiListRequest {
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeWikiListRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface DescribeWikiRequest
 */
export interface DescribeWikiRequest {
    /**
     * wiki编号
     * @type {number}
     * @memberof DescribeWikiRequest
     */
    'Iid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeWikiRequest
     */
    'ProjectName'?: string;
    /**
     * 版本号
     * @type {number}
     * @memberof DescribeWikiRequest
     */
    'VersionId'?: number;
}
/**
 * 
 * @export
 * @interface DescribeWorkItemSalvage200Response
 */
export interface DescribeWorkItemSalvage200Response {
    /**
     * 
     * @type {DescribeWorkItemSalvage200ResponseResponse}
     * @memberof DescribeWorkItemSalvage200Response
     */
    'Response'?: DescribeWorkItemSalvage200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeWorkItemSalvage200ResponseResponse
 */
export interface DescribeWorkItemSalvage200ResponseResponse {
    /**
     * 事项关联的项目集工作项列表
     * @type {Array<IssueDetail>}
     * @memberof DescribeWorkItemSalvage200ResponseResponse
     */
    'OpenApiIssueDetail'?: Array<IssueDetail>;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeWorkItemSalvage200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeWorkItemSalvageRequest
 */
export interface DescribeWorkItemSalvageRequest {
    /**
     * 事项code
     * @type {number}
     * @memberof DescribeWorkItemSalvageRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof DescribeWorkItemSalvageRequest
     */
    'ProjectName'?: string;
    /**
     * 事项展示图片对外路径
     * @type {boolean}
     * @memberof DescribeWorkItemSalvageRequest
     */
    'ShowImageOutUrl'?: boolean;
}
/**
 * 
 * @export
 * @interface DescribeWorkbenchIssueList200Response
 */
export interface DescribeWorkbenchIssueList200Response {
    /**
     * 
     * @type {DescribeWorkbenchIssueList200ResponseResponse}
     * @memberof DescribeWorkbenchIssueList200Response
     */
    'Response'?: DescribeWorkbenchIssueList200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface DescribeWorkbenchIssueList200ResponseResponse
 */
export interface DescribeWorkbenchIssueList200ResponseResponse {
    /**
     * 
     * @type {OpenApiTeamIssueData}
     * @memberof DescribeWorkbenchIssueList200ResponseResponse
     */
    'Data'?: OpenApiTeamIssueData;
    /**
     * 请求id
     * @type {string}
     * @memberof DescribeWorkbenchIssueList200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface DescribeWorkbenchIssueListRequest
 */
export interface DescribeWorkbenchIssueListRequest {
    /**
     * 关键字
     * @type {string}
     * @memberof DescribeWorkbenchIssueListRequest
     */
    'Keyword'?: string;
    /**
     * 分页查询的分页数，不填的话从第一页开始查询
     * @type {number}
     * @memberof DescribeWorkbenchIssueListRequest
     */
    'PageNumber'?: number;
    /**
     * 每页展示数，默认 20 ，最大值 500
     * @type {number}
     * @memberof DescribeWorkbenchIssueListRequest
     */
    'PageSize'?: number;
    /**
     * 不填或者填0则查询团队内参与的所有项目
     * @type {number}
     * @memberof DescribeWorkbenchIssueListRequest
     */
    'ProjectId'?: number;
    /**
     * 事项类型，取值如“REQUIREMENT”、“DEFECT”等
     * @type {string}
     * @memberof DescribeWorkbenchIssueListRequest
     */
    'Type'?: string;
}
/**
 * 
 * @export
 * @interface DetachFromResourceRequest
 */
export interface DetachFromResourceRequest {
    /**
     * 授权信息
     * @type {Array<GrantInfo>}
     * @memberof DetachFromResourceRequest
     */
    'Grants'?: Array<GrantInfo>;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof DetachFromResourceRequest
     */
    'Resource'?: ResourceInfo;
}
/**
 * 
 * @export
 * @interface DetachResourceScopeOnPolicyRequest
 */
export interface DetachResourceScopeOnPolicyRequest {
    /**
     * 权限组 ID
     * @type {number}
     * @memberof DetachResourceScopeOnPolicyRequest
     */
    'PolicyId'?: number;
    /**
     * 删除的资源
     * @type {Array<ResourceInfoOfPolicyScope>}
     * @memberof DetachResourceScopeOnPolicyRequest
     */
    'ResourceInfos'?: Array<ResourceInfoOfPolicyScope>;
}
/**
 * 文件差异信息汇总详情
 * @export
 * @interface DiffFileInfo
 */
export interface DiffFileInfo {
    /**
     * 总删除行数
     * @type {number}
     * @memberof DiffFileInfo
     */
    'Deletions'?: number;
    /**
     * 差异信息
     * @type {Array<DifferentLine>}
     * @memberof DiffFileInfo
     */
    'DifferentLines'?: Array<DifferentLine>;
    /**
     * 总新增行数
     * @type {number}
     * @memberof DiffFileInfo
     */
    'Insertions'?: number;
}
/**
 * 文件差异信息
 * @export
 * @interface DifferentLine
 */
export interface DifferentLine {
    /**
     * 排序号，由小到大递增
     * @type {number}
     * @memberof DifferentLine
     */
    'Index'?: number;
    /**
     * 操作起始行号
     * @type {number}
     * @memberof DifferentLine
     */
    'LeftNo'?: number;
    /**
     * 操作方式:”+”表示新增,”-“表示删除,” “表示不变
     * @type {string}
     * @memberof DifferentLine
     */
    'Prefix'?: string;
    /**
     * 操作结束行号
     * @type {number}
     * @memberof DifferentLine
     */
    'RightNo'?: number;
    /**
     * 文本
     * @type {string}
     * @memberof DifferentLine
     */
    'Text'?: string;
}
/**
 * 请求之间的文件差别
 * @export
 * @interface DifferentOfCommit
 */
export interface DifferentOfCommit {
    /**
     * 修改类型
     * @type {string}
     * @memberof DifferentOfCommit
     */
    'ChangeType'?: string | null;
    /**
     * 删除的行数
     * @type {number}
     * @memberof DifferentOfCommit
     */
    'Deletions'?: number;
    /**
     * 新增的行数
     * @type {number}
     * @memberof DifferentOfCommit
     */
    'Insertions'?: number;
    /**
     * 提交的名称
     * @type {string}
     * @memberof DifferentOfCommit
     */
    'Name'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof DifferentOfCommit
     */
    'Path'?: string;
}
/**
 * 请求列表及文件差别列表
 * @export
 * @interface DifferentOfCommitDetail
 */
export interface DifferentOfCommitDetail {
    /**
     * 请求列表
     * @type {Array<GitCommit>}
     * @memberof DifferentOfCommitDetail
     */
    'Commits'?: Array<GitCommit>;
    /**
     * 总删除行数
     * @type {number}
     * @memberof DifferentOfCommitDetail
     */
    'Deletions'?: number;
    /**
     * 差异文件列表
     * @type {Array<DifferentOfCommit>}
     * @memberof DifferentOfCommitDetail
     */
    'DifferentOfCommits'?: Array<DifferentOfCommit>;
    /**
     * 总新增行数
     * @type {number}
     * @memberof DifferentOfCommitDetail
     */
    'Insertions'?: number;
    /**
     * 总文件修改数
     * @type {number}
     * @memberof DifferentOfCommitDetail
     */
    'UpdateFileNum'?: number;
}
/**
 * 
 * @export
 * @interface EnabledServiceHook200Response
 */
export interface EnabledServiceHook200Response {
    /**
     * 
     * @type {EnabledServiceHook200ResponseResponse}
     * @memberof EnabledServiceHook200Response
     */
    'Response'?: EnabledServiceHook200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface EnabledServiceHook200ResponseResponse
 */
export interface EnabledServiceHook200ResponseResponse {
    /**
     * 是否操作成功
     * @type {boolean}
     * @memberof EnabledServiceHook200ResponseResponse
     */
    'Succeed'?: boolean;
    /**
     * 请求id
     * @type {string}
     * @memberof EnabledServiceHook200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface EnabledServiceHookRequest
 */
export interface EnabledServiceHookRequest {
    /**
     * 是否开启
     * @type {boolean}
     * @memberof EnabledServiceHookRequest
     */
    'Enabled'?: boolean;
    /**
     * Service Hook 编号
     * @type {Array<string>}
     * @memberof EnabledServiceHookRequest
     */
    'Id'?: Array<string>;
    /**
     * 项目或者研发空间编号
     * @type {number}
     * @memberof EnabledServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof EnabledServiceHookRequest
     */
    'TargetType'?: EnabledServiceHookRequestTargetTypeEnum;
}

export const EnabledServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type EnabledServiceHookRequestTargetTypeEnum = typeof EnabledServiceHookRequestTargetTypeEnum[keyof typeof EnabledServiceHookRequestTargetTypeEnum];

/**
 * 史诗信息
 * @export
 * @interface Epic
 */
export interface Epic {
    /**
     * 
     * @type {User}
     * @memberof Epic
     */
    'Assignee'?: User;
    /**
     * 史诗 Code
     * @type {number}
     * @memberof Epic
     */
    'Code'?: number;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof Epic
     */
    'IssueStatusId'?: number | null;
    /**
     * 事项状态名称
     * @type {string}
     * @memberof Epic
     */
    'IssueStatusName'?: string | null;
    /**
     * 名称
     * @type {string}
     * @memberof Epic
     */
    'Name'?: string;
    /**
     * 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
     * @type {string}
     * @memberof Epic
     */
    'Priority'?: string | null;
    /**
     * 史诗 Type
     * @type {string}
     * @memberof Epic
     */
    'Type'?: string;
}
/**
 * 文件差别详情
 * @export
 * @interface FileDiff
 */
export interface FileDiff {
    /**
     * 操作类型,具体值为: ADD(添加), MODIFY(修改), DELETE(删除), REPLACE(替换)
     * @type {string}
     * @memberof FileDiff
     */
    'ChangeType'?: string;
    /**
     * 删除的行数
     * @type {number}
     * @memberof FileDiff
     */
    'Deletions'?: number;
    /**
     * Diff Line
     * @type {Array<DifferentLine>}
     * @memberof FileDiff
     */
    'DiffLines'?: Array<DifferentLine>;
    /**
     * 新增的行数
     * @type {number}
     * @memberof FileDiff
     */
    'Insertions'?: number;
    /**
     * 请求的objectid
     * @type {string}
     * @memberof FileDiff
     */
    'ObjectId'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof FileDiff
     */
    'Path'?: string;
}
/**
 * Filter 过滤参数
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 过滤字段名称 (只支持 Name )
     * @type {string}
     * @memberof Filter
     */
    'Name': string;
    /**
     * 过滤字段值
     * @type {Array<string>}
     * @memberof Filter
     */
    'Value': Array<string>;
}
/**
 * 
 * @export
 * @interface ForbiddenArtifactVersionRequest
 */
export interface ForbiddenArtifactVersionRequest {
    /**
     * FORBIDDEN 禁止下载，UNFORBIDDEN 解除禁止下载
     * @type {string}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'ForbiddenAction'?: string;
    /**
     * 禁止下载说明
     * @type {string}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'ForbiddenNote'?: string;
    /**
     * 包名
     * @type {string}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'ProjectId'?: number;
    /**
     * 仓库名
     * @type {string}
     * @memberof ForbiddenArtifactVersionRequest
     */
    'Repository'?: string;
}
/**
 * 请求标签的commit信息
 * @export
 * @interface GitAllTagCommit
 */
export interface GitAllTagCommit {
    /**
     * 作者邮箱
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'AuthorEmail'?: string | null;
    /**
     * 作者姓名
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'AuthorName'?: string | null;
    /**
     * 提交时间
     * @type {number}
     * @memberof GitAllTagCommit
     */
    'CommitDate'?: number | null;
    /**
     * 提交者邮箱
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'CommitterEmail'?: string | null;
    /**
     * 提交者姓名
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'CommitterName'?: string | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof GitAllTagCommit
     */
    'CreatedAt'?: number | null;
    /**
     * 父提交
     * @type {Array<string>}
     * @memberof GitAllTagCommit
     */
    'Parents'?: Array<string> | null;
    /**
     * 提交sha
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'Sha'?: string | null;
    /**
     * 短描述
     * @type {string}
     * @memberof GitAllTagCommit
     */
    'ShortMessage'?: string | null;
}
/**
 * 用于展示单个分支的信息
 * @export
 * @interface GitBranch
 */
export interface GitBranch {
    /**
     * 分支名称
     * @type {string}
     * @memberof GitBranch
     */
    'BranchName'?: string;
    /**
     * 是否为默认分支
     * @type {boolean}
     * @memberof GitBranch
     */
    'IsDefaultBranch'?: boolean;
    /**
     * 是否为保护分支
     * @type {boolean}
     * @memberof GitBranch
     */
    'IsProtected'?: boolean;
    /**
     * 
     * @type {GitCommit}
     * @memberof GitBranch
     */
    'LastCommit'?: GitCommit;
    /**
     * 分支的sha值
     * @type {string}
     * @memberof GitBranch
     */
    'Sha'?: string;
    /**
     * 分支的备注信息
     * @type {string}
     * @memberof GitBranch
     */
    'Content'?: string;
}
/**
 * 分支简略信息
 * @export
 * @interface GitBranchInfo
 */
export interface GitBranchInfo {
    /**
     * 分支名称
     * @type {string}
     * @memberof GitBranchInfo
     */
    'BranchName'?: string;
    /**
     * 是否禁止强制推送
     * @type {boolean}
     * @memberof GitBranchInfo
     */
    'DenyForcePush'?: boolean | null;
    /**
     * 是否可以ForceSquash
     * @type {boolean}
     * @memberof GitBranchInfo
     */
    'ForceSquash'?: boolean | null;
    /**
     * 是否默认分支
     * @type {boolean}
     * @memberof GitBranchInfo
     */
    'IsDefaultBranch'?: boolean;
    /**
     * 是否保护分支
     * @type {boolean}
     * @memberof GitBranchInfo
     */
    'IsProtected'?: boolean;
    /**
     * 是否只读
     * @type {boolean}
     * @memberof GitBranchInfo
     */
    'IsReadOnly'?: boolean | null;
    /**
     * 最后提交时间
     * @type {number}
     * @memberof GitBranchInfo
     */
    'LastCommitDate'?: number | null;
    /**
     * 分支sha值
     * @type {string}
     * @memberof GitBranchInfo
     */
    'Sha'?: string;
    /**
     * 仓库规范类型
     * @type {string}
     * @memberof GitBranchInfo
     */
    'SpecBranchType'?: string | null;
}
/**
 * 用于描述分支列表信息
 * @export
 * @interface GitBranchesData
 */
export interface GitBranchesData {
    /**
     * 分支列表
     * @type {Array<GitBranchInfo>}
     * @memberof GitBranchesData
     */
    'Branches'?: Array<GitBranchInfo>;
    /**
     * Branches的总条数
     * @type {number}
     * @memberof GitBranchesData
     */
    'TotalCount'?: number;
}
/**
 * 提交信息
 * @export
 * @interface GitCommit
 */
export interface GitCommit {
    /**
     * 作者邮箱
     * @type {string}
     * @memberof GitCommit
     */
    'AuthorEmail'?: string;
    /**
     * 作者姓名
     * @type {string}
     * @memberof GitCommit
     */
    'AuthorName'?: string;
    /**
     * 提交日期
     * @type {number}
     * @memberof GitCommit
     */
    'CommitDate'?: number;
    /**
     * 
     * @type {Committer}
     * @memberof GitCommit
     */
    'Committer'?: Committer;
    /**
     * 提交日期
     * @type {number}
     * @memberof GitCommit
     */
    'CreatedAt'?: number;
    /**
     * 父提交
     * @type {Array<string>}
     * @memberof GitCommit
     */
    'Parents'?: Array<string>;
    /**
     * 提交 ID
     * @type {string}
     * @memberof GitCommit
     */
    'Sha'?: string;
    /**
     * 提交信息
     * @type {string}
     * @memberof GitCommit
     */
    'ShortMessage'?: string;
}
/**
 * 提交评论信息带分页
 * @export
 * @interface GitCommitComment
 */
export interface GitCommitComment {
    /**
     * 提交评论详细信息
     * @type {Array<CommitComment>}
     * @memberof GitCommitComment
     */
    'CommitComments'?: Array<CommitComment>;
    /**
     * 
     * @type {PageInfo}
     * @memberof GitCommitComment
     */
    'Page'?: PageInfo;
}
/**
 * git 提交中文件路径信息
 * @export
 * @interface GitCommitFilePath
 */
export interface GitCommitFilePath {
    /**
     * 文件改动类型为 move 时，（移动、重命名），文件的新路径
     * @type {string}
     * @memberof GitCommitFilePath
     */
    'NewPath'?: string | null;
    /**
     * 改动文件的路径
     * @type {string}
     * @memberof GitCommitFilePath
     */
    'Path'?: string | null;
    /**
     * 文件改动类型 add update delete move
     * @type {string}
     * @memberof GitCommitFilePath
     */
    'Type'?: string | null;
}
/**
 * git diff 信息详情
 * @export
 * @interface GitDiff
 */
export interface GitDiff {
    /**
     * 文件改变类型
     * @type {string}
     * @memberof GitDiff
     */
    'ChangeType'?: string;
    /**
     * diff信息内容
     * @type {string}
     * @memberof GitDiff
     */
    'Content'?: string;
    /**
     * 一共删除几行
     * @type {number}
     * @memberof GitDiff
     */
    'Deletions'?: number;
    /**
     * 一共新增几行
     * @type {number}
     * @memberof GitDiff
     */
    'Insertions'?: number;
    /**
     * diff每行信息拆解后的集合信息
     * @type {Array<Line>}
     * @memberof GitDiff
     */
    'Lines'?: Array<Line>;
    /**
     * 修改后文件的权限
     * @type {string}
     * @memberof GitDiff
     */
    'NewMode'?: string;
    /**
     * 修改前文件的权限
     * @type {string}
     * @memberof GitDiff
     */
    'OldMode'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof GitDiff
     */
    'Path'?: string;
}
/**
 * git 文件
 * @export
 * @interface GitFile
 */
export interface GitFile {
    /**
     * 文件内容
     * @type {string}
     * @memberof GitFile
     */
    'Content': string;
    /**
     * 是否创建一个新路径文件
     * @type {string}
     * @memberof GitFile
     */
    'NewPath'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof GitFile
     */
    'Path': string;
}
/**
 * 文件详情
 * @export
 * @interface GitFileContent
 */
export interface GitFileContent {
    /**
     * 内容
     * @type {string}
     * @memberof GitFileContent
     */
    'Content'?: string;
    /**
     * 是否为lfs文件
     * @type {boolean}
     * @memberof GitFileContent
     */
    'IsLargeFileStorage'?: boolean;
    /**
     * 是否lfs文件
     * @type {boolean}
     * @memberof GitFileContent
     */
    'IsLfs'?: boolean;
    /**
     * 是否文本
     * @type {boolean}
     * @memberof GitFileContent
     */
    'IsText'?: boolean;
}
/**
 * 文件详情
 * @export
 * @interface GitFileItem
 */
export interface GitFileItem {
    /**
     * 加密后文件的内容
     * @type {string}
     * @memberof GitFileItem
     */
    'Content'?: string | null;
    /**
     * 文件内容的hash结果
     * @type {string}
     * @memberof GitFileItem
     */
    'ContentSha256'?: string | null;
    /**
     * 加密形式
     * @type {string}
     * @memberof GitFileItem
     */
    'Encoding'?: string;
    /**
     * 文件名
     * @type {string}
     * @memberof GitFileItem
     */
    'FileName'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof GitFileItem
     */
    'FilePath'?: string;
    /**
     * commitID
     * @type {string}
     * @memberof GitFileItem
     */
    'Sha'?: string;
    /**
     * 文件大小
     * @type {number}
     * @memberof GitFileItem
     */
    'Size'?: number;
}
/**
 * git 文件推送权限规则
 * @export
 * @interface GitFilePushRule
 */
export interface GitFilePushRule {
    /**
     * 文件推送规则 ID
     * @type {number}
     * @memberof GitFilePushRule
     */
    'FilePushRuleId'?: number;
    /**
     * 拒绝所有人推送
     * @type {boolean}
     * @memberof GitFilePushRule
     */
    'IsDenyForAllUser'?: boolean;
    /**
     * 文件路径
     * @type {string}
     * @memberof GitFilePushRule
     */
    'Pattern'?: string;
    /**
     * 特权者列表
     * @type {Array<GitFilePushRulePrivilege>}
     * @memberof GitFilePushRule
     */
    'Privileges'?: Array<GitFilePushRulePrivilege> | null;
}
/**
 * git 文件推送规则特权者
 * @export
 * @interface GitFilePushRulePrivilege
 */
export interface GitFilePushRulePrivilege {
    /**
     * 拒绝推送文件
     * @type {boolean}
     * @memberof GitFilePushRulePrivilege
     */
    'IsDeny'?: boolean;
    /**
     * 特权者是角色
     * @type {boolean}
     * @memberof GitFilePushRulePrivilege
     */
    'IsRole'?: boolean;
    /**
     * 特权者是用户
     * @type {boolean}
     * @memberof GitFilePushRulePrivilege
     */
    'IsUser'?: boolean;
    /**
     * 
     * @type {GitFilePushRuleRole}
     * @memberof GitFilePushRulePrivilege
     */
    'Role'?: GitFilePushRuleRole;
    /**
     * 
     * @type {GitFilePushRuleUser}
     * @memberof GitFilePushRulePrivilege
     */
    'User'?: GitFilePushRuleUser;
}
/**
 * git 文件推送规则角色
 * @export
 * @interface GitFilePushRuleRole
 */
export interface GitFilePushRuleRole {
    /**
     * 角色名字
     * @type {string}
     * @memberof GitFilePushRuleRole
     */
    'Name'?: string | null;
    /**
     * 角色 ID
     * @type {number}
     * @memberof GitFilePushRuleRole
     */
    'RoleId'?: number | null;
}
/**
 * git 文件推送权限用户
 * @export
 * @interface GitFilePushRuleUser
 */
export interface GitFilePushRuleUser {
    /**
     * 头像路径
     * @type {string}
     * @memberof GitFilePushRuleUser
     */
    'Avatar'?: string | null;
    /**
     * 用户全局 key
     * @type {string}
     * @memberof GitFilePushRuleUser
     */
    'GlobalKey'?: string | null;
    /**
     * 用户名
     * @type {string}
     * @memberof GitFilePushRuleUser
     */
    'Name'?: string | null;
}
/**
 * Git合并请求信息
 * @export
 * @interface GitMergeRequest
 */
export interface GitMergeRequest {
    /**
     * 代码仓库的唯一编号
     * @type {number}
     * @memberof GitMergeRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof GitMergeRequest
     */
    'DepotPath'?: string | null;
    /**
     * 定位一个项目的内的资源的 ID
     * @type {number}
     * @memberof GitMergeRequest
     */
    'IId'?: number;
    /**
     * 定位一个项目的内的MR资源的 ID
     * @type {number}
     * @memberof GitMergeRequest
     */
    'MergeId'?: number;
    /**
     * 项目 ID
     * @type {number}
     * @memberof GitMergeRequest
     */
    'ProjectId'?: number;
}
/**
 * 仓库分支
 * @export
 * @interface GitRef
 */
export interface GitRef {
    /**
     * 是否是附注标签
     * @type {boolean}
     * @memberof GitRef
     */
    'AnnotatedTag'?: boolean;
    /**
     * 展示名
     * @type {string}
     * @memberof GitRef
     */
    'DisplayName'?: string;
    /**
     * 最后一次提交全部信息
     * @type {string}
     * @memberof GitRef
     */
    'FullMessage'?: string;
    /**
     * 名字
     * @type {string}
     * @memberof GitRef
     */
    'Name'?: string;
    /**
     * 对象id
     * @type {string}
     * @memberof GitRef
     */
    'ObjectId'?: string;
    /**
     * 分支objectId
     * @type {string}
     * @memberof GitRef
     */
    'RefObjectId'?: string;
    /**
     * 最后一次提交简短信息
     * @type {string}
     * @memberof GitRef
     */
    'ShortMessage'?: string;
}
/**
 * Git 标签/分支的信息
 * @export
 * @interface GitReference
 */
export interface GitReference {
    /**
     * 分支或标签的名字
     * @type {string}
     * @memberof GitReference
     */
    'Name'?: string;
    /**
     * all：全部，branch：分支，tag：标签
     * @type {string}
     * @memberof GitReference
     */
    'Type'?: string;
}
/**
 * 用于展示GitTag相关信息
 * @export
 * @interface GitTag
 */
export interface GitTag {
    /**
     * 
     * @type {GitAllTagCommit}
     * @memberof GitTag
     */
    'Commit'?: GitAllTagCommit;
    /**
     * tag信息
     * @type {string}
     * @memberof GitTag
     */
    'Message'?: string;
    /**
     * tag的名称
     * @type {string}
     * @memberof GitTag
     */
    'TagName'?: string;
}
/**
 * git的树
 * @export
 * @interface GitTree
 */
export interface GitTree {
    /**
     * 文件或目录权限
     * @type {string}
     * @memberof GitTree
     */
    'Mode'?: string | null;
    /**
     * 路径
     * @type {string}
     * @memberof GitTree
     */
    'Path'?: string | null;
    /**
     * 哈希值
     * @type {string}
     * @memberof GitTree
     */
    'Sha'?: string | null;
    /**
     * 类型
     * @type {string}
     * @memberof GitTree
     */
    'Type'?: string | null;
}
/**
 * 仓库文件信息
 * @export
 * @interface GitTreeItem
 */
export interface GitTreeItem {
    /**
     * 文件类型
     * @type {string}
     * @memberof GitTreeItem
     */
    'Mode'?: string;
    /**
     * 文件名
     * @type {string}
     * @memberof GitTreeItem
     */
    'Name'?: string;
    /**
     * 文件路径
     * @type {string}
     * @memberof GitTreeItem
     */
    'Path'?: string;
    /**
     * commitID
     * @type {string}
     * @memberof GitTreeItem
     */
    'Sha'?: string;
}
/**
 * 授权信息
 * @export
 * @interface GrantInfo
 */
export interface GrantInfo {
    /**
     * 授权对象 ID
     * @type {string}
     * @memberof GrantInfo
     */
    'GrantObjectId': string;
    /**
     * 授权对象类型：USER,USER_GROUP,DEPARTMENT
     * @type {string}
     * @memberof GrantInfo
     */
    'GrantScope': GrantInfoGrantScopeEnum;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof GrantInfo
     */
    'PolicyId': number;
    /**
     * 身份 key，后期扩展场景使用，暂时留空即可
     * @type {string}
     * @memberof GrantInfo
     */
    'PrincipalKey'?: string;
    /**
     * 身份 value，后期扩展场景使用，暂时留空即可
     * @type {string}
     * @memberof GrantInfo
     */
    'PrincipalValue'?: string;
}

export const GrantInfoGrantScopeEnum = {
    User: 'USER',
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT'
} as const;

export type GrantInfoGrantScopeEnum = typeof GrantInfoGrantScopeEnum[keyof typeof GrantInfoGrantScopeEnum];

/**
 * 授权对象信息
 * @export
 * @interface GrantObjectInfo
 */
export interface GrantObjectInfo {
    /**
     * 创建时间
     * @type {number}
     * @memberof GrantObjectInfo
     */
    'CreatedAt': number;
    /**
     * 授权对象 ID
     * @type {string}
     * @memberof GrantObjectInfo
     */
    'GrantObjectId': string;
    /**
     * 授权对象名称
     * @type {string}
     * @memberof GrantObjectInfo
     */
    'GrantObjectName': string;
    /**
     * 授权对象类型：USER,USER_GROUP,DEPARTMENT
     * @type {string}
     * @memberof GrantObjectInfo
     */
    'GrantScope': GrantObjectInfoGrantScopeEnum;
}

export const GrantObjectInfoGrantScopeEnum = {
    User: 'USER',
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT'
} as const;

export type GrantObjectInfoGrantScopeEnum = typeof GrantObjectInfoGrantScopeEnum[keyof typeof GrantObjectInfoGrantScopeEnum];

/**
 * 代码片段数据
 * @export
 * @interface GrepLineData
 */
export interface GrepLineData {
    /**
     * 代码片段详细信息
     * @type {Array<GrepLineInfo>}
     * @memberof GrepLineData
     */
    'GrepLines'?: Array<GrepLineInfo> | null;
    /**
     * 
     * @type {PageInfo}
     * @memberof GrepLineData
     */
    'Page'?: PageInfo;
}
/**
 * 代码片段搜索信息详细列表
 * @export
 * @interface GrepLineInfo
 */
export interface GrepLineInfo {
    /**
     * 分支名称
     * @type {string}
     * @memberof GrepLineInfo
     */
    'BranchName'?: string | null;
    /**
     * 提交Id
     * @type {string}
     * @memberof GrepLineInfo
     */
    'CommitId'?: string | null;
    /**
     * 文件内容
     * @type {Array<string>}
     * @memberof GrepLineInfo
     */
    'Contents'?: Array<string> | null;
    /**
     * 文件最大行数
     * @type {number}
     * @memberof GrepLineInfo
     */
    'FileMaxLine'?: number | null;
    /**
     * 代码片段的行数
     * @type {number}
     * @memberof GrepLineInfo
     */
    'LineNum'?: number | null;
    /**
     * 页面上展现的最大行数
     * @type {number}
     * @memberof GrepLineInfo
     */
    'MaxNum'?: number | null;
    /**
     * 页面上展现的最小行数
     * @type {number}
     * @memberof GrepLineInfo
     */
    'MinNum'?: number | null;
    /**
     * 代码片段对应的文件路径
     * @type {string}
     * @memberof GrepLineInfo
     */
    'Path'?: string | null;
    /**
     * 查询代码片段的文本
     * @type {string}
     * @memberof GrepLineInfo
     */
    'Text'?: string | null;
}
/**
 * HostServerGroup 结构
 * @export
 * @interface HostServerGroup
 */
export interface HostServerGroup {
    /**
     * 主机组云账号
     * @type {string}
     * @memberof HostServerGroup
     */
    'Account'?: string;
    /**
     * 
     * @type {AgentMachine}
     * @memberof HostServerGroup
     */
    'AgentMachine'?: AgentMachine;
    /**
     * 主机组名称
     * @type {string}
     * @memberof HostServerGroup
     */
    'DisplayName'?: string;
    /**
     * 主机组 id
     * @type {number}
     * @memberof HostServerGroup
     */
    'Id'?: number;
}
/**
 * HostServerGroupDetail 结构
 * @export
 * @interface HostServerGroupDetail
 */
export interface HostServerGroupDetail {
    /**
     * 主机组云账号
     * @type {string}
     * @memberof HostServerGroupDetail
     */
    'Account'?: string;
    /**
     * 
     * @type {AgentMachine}
     * @memberof HostServerGroupDetail
     */
    'AgentMachine'?: AgentMachine;
    /**
     * SSH 认证方式
     * @type {string}
     * @memberof HostServerGroupDetail
     */
    'AuthMethod'?: string;
    /**
     * 主机组名称
     * @type {string}
     * @memberof HostServerGroupDetail
     */
    'DisplayName'?: string;
    /**
     * 主机组 id
     * @type {number}
     * @memberof HostServerGroupDetail
     */
    'Id'?: number;
    /**
     * 实例 IP 列表
     * @type {Array<string>}
     * @memberof HostServerGroupDetail
     */
    'Ips'?: Array<string>;
    /**
     * 主机组标签
     * @type {Array<HostServerGroupLabel>}
     * @memberof HostServerGroupDetail
     */
    'Labels'?: Array<HostServerGroupLabel>;
    /**
     * SSH 端口
     * @type {number}
     * @memberof HostServerGroupDetail
     */
    'Port'?: number;
    /**
     * SSH 用户名
     * @type {string}
     * @memberof HostServerGroupDetail
     */
    'UserName'?: string;
}
/**
 * HostServerGroupLabel 结构
 * @export
 * @interface HostServerGroupLabel
 */
export interface HostServerGroupLabel {
    /**
     * 主机组标签键
     * @type {string}
     * @memberof HostServerGroupLabel
     */
    'Key': string;
    /**
     * 主机组标签值
     * @type {string}
     * @memberof HostServerGroupLabel
     */
    'Value': string;
}
/**
 * 
 * @export
 * @interface InitProjectTemplateRequest
 */
export interface InitProjectTemplateRequest {
    /**
     * 项目名
     * @type {string}
     * @memberof InitProjectTemplateRequest
     */
    'ProjectName'?: string;
    /**
     * 是否同步配置方案，取值 true 或者 false，不填默认为 false
     * @type {boolean}
     * @memberof InitProjectTemplateRequest
     */
    'Sync'?: boolean;
    /**
     * 模板id，为DescribeConfigTemplateList接口返回的，如果这里TemplateType选PROJECT，则TemplateId参数有效，否则无效。
     * @type {number}
     * @memberof InitProjectTemplateRequest
     */
    'TemplateId'?: number;
    /**
     * 模板类型，取值包括 SCRUM，CLASSIC，PROJECT
     * @type {string}
     * @memberof InitProjectTemplateRequest
     */
    'TemplateType'?: string;
}
/**
 * 事项评论
 * @export
 * @interface IssueComment
 */
export interface IssueComment {
    /**
     * 评论 ID
     * @type {number}
     * @memberof IssueComment
     */
    'CommentId'?: number;
    /**
     * 解析后的内容
     * @type {string}
     * @memberof IssueComment
     */
    'Content'?: string;
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueComment
     */
    'CreatedAt'?: number;
    /**
     * 创建人 ID
     * @type {number}
     * @memberof IssueComment
     */
    'CreatorId'?: number;
    /**
     * 父评论 ID
     * @type {number}
     * @memberof IssueComment
     */
    'ParentId'?: number;
    /**
     * 内容
     * @type {string}
     * @memberof IssueComment
     */
    'RawContent'?: string;
    /**
     * 更新时间戳
     * @type {number}
     * @memberof IssueComment
     */
    'UpdatedAt'?: number;
    /**
     * 评论中图片的文件 Id 列表
     * @type {Array<number>}
     * @memberof IssueComment
     */
    'FileId'?: Array<number>;
}
/**
 * 事项筛选条件
 * @export
 * @interface IssueCondition
 */
export interface IssueCondition {
    /**
     * 常量值  \"UNSPECIFIC\" 表示未指定，例如：处理人、需求类型、标签等字段，使用此值来筛选未指定处理人、需求类型或标签的事项。
     * @type {string}
     * @memberof IssueCondition
     */
    'ConstValue'?: string;
    /**
     * 自定义字段 Id，Key 为 \"CUSTOM\" 时需设置该值，常规字段无需设置。
     * @type {number}
     * @memberof IssueCondition
     */
    'CustomFieldId'?: number;
    /**
     * 自定义字段名称
     * @type {string}
     * @memberof IssueCondition
     */
    'CustomFieldName'?: string;
    /**
     * 筛选字段 KEY，可选值如下。  DEFECT_TYPE：缺陷类型，多选  REQUIREMENT_TYPE：需求类型，多选  MISSION_TYPE：任务类型，多选  PRIORITY：优先级，多选  DUE_DATE：截止日期，日期范围  UPDATED_AT：更新时间，日期范围  CREATED_AT：创建时间，日期范围  START_DATE：开始日期，日期范围  ASSIGNEE：处理人ID，多选  CREATOR：创建者ID，多选  WATCHER：关注者ID，多选  MODULE：模块，多选  LABEL：标签，多选  STATUS：状态，多选  STATUS_TYPE：状态类型，多选  KEYWORD：事项名称、CODE 模糊搜索  ISSUE_TYPE：事项类型，多选  ISSUE_SUB_TYPE：事项的子项类型，多选  WORKING_HOURS：预估工时，数值范围  ITERATION：迭代，多选  PARENT：父需求，多选  CUSTOM：自定义字段，同时需指定 CustomFieldId
     * @type {string}
     * @memberof IssueCondition
     */
    'Key': string;
    /**
     * 筛选值，多选值用逗号隔开。  日期格式: 2020-08-01，日期时间格式: 2020-08-01 12:00:00  整数、小数、日期、日期时间类型的字段值应为一个范围，前后闭区间，范围开始值与结束值之间使用\"_\"连接，例如：\"0.1_5.0\"、\"2020-08-01_2020-08-31\"。
     * @type {string}
     * @memberof IssueCondition
     */
    'Value'?: string;
}
/**
 * 事项自定义属性
 * @export
 * @interface IssueCustomField
 */
export interface IssueCustomField {
    /**
     * 自定义属性 Id
     * @type {number}
     * @memberof IssueCustomField
     */
    'Id'?: number;
    /**
     * 自定义属性名称
     * @type {string}
     * @memberof IssueCustomField
     */
    'Name'?: string;
    /**
     * 自定义属性值  根据自定义属性的 ComponentType，返回不同类型的值：  单个成员选择（SELECT_MEMBER_SINGLE）为 User 对象 JSON，  多个成员选择（SELECT_MEMBER_MULTI）为 User 数组 JSON，  多选菜单（SELECT_MULTI）为 String 数组 JSON，  其余类型为普通字符串
     * @type {string}
     * @memberof IssueCustomField
     */
    'ValueString'?: string;
}
/**
 * 事项自定义属性表单
 * @export
 * @interface IssueCustomFieldForm
 */
export interface IssueCustomFieldForm {
    /**
     * 自定义属性值，多选值使用 \",\" 分隔
     * @type {string}
     * @memberof IssueCustomFieldForm
     */
    'Content': string;
    /**
     * 事项自定义属性 Id
     * @type {number}
     * @memberof IssueCustomFieldForm
     */
    'Id': number;
}
/**
 * 事项详情
 * @export
 * @interface IssueDetail
 */
export interface IssueDetail {
    /**
     * 
     * @type {User}
     * @memberof IssueDetail
     */
    'Assignee'?: User;
    /**
     * 事项 Code
     * @type {number}
     * @memberof IssueDetail
     */
    'Code'?: number;
    /**
     * 完成时间戳
     * @type {number}
     * @memberof IssueDetail
     */
    'CompletedAt'?: number;
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueDetail
     */
    'CreatedAt'?: number;
    /**
     * 
     * @type {User}
     * @memberof IssueDetail
     */
    'Creator'?: User;
    /**
     * 自定义属性列表
     * @type {Array<CustomFields>}
     * @memberof IssueDetail
     */
    'CustomFields'?: Array<CustomFields>;
    /**
     * 
     * @type {DefectType}
     * @memberof IssueDetail
     */
    'DefectType'?: DefectType;
    /**
     * 描述
     * @type {string}
     * @memberof IssueDetail
     */
    'Description'?: string;
    /**
     * 截止日期时间戳
     * @type {number}
     * @memberof IssueDetail
     */
    'DueDate'?: number;
    /**
     * 
     * @type {Epic}
     * @memberof IssueDetail
     */
    'Epic'?: Epic;
    /**
     * 附件列表
     * @type {Array<IssueFile>}
     * @memberof IssueDetail
     */
    'Files'?: Array<IssueFile>;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof IssueDetail
     */
    'IssueStatusId'?: number;
    /**
     * 事项状态名称
     * @type {string}
     * @memberof IssueDetail
     */
    'IssueStatusName'?: string;
    /**
     * 事项状态类型
     * @type {string}
     * @memberof IssueDetail
     */
    'IssueStatusType'?: string;
    /**
     * 
     * @type {IssueTypeDetail}
     * @memberof IssueDetail
     */
    'IssueTypeDetail'?: IssueTypeDetail;
    /**
     * 事项类型 ID
     * @type {number}
     * @memberof IssueDetail
     */
    'IssueTypeId'?: number;
    /**
     * 
     * @type {IterationSimple}
     * @memberof IssueDetail
     */
    'Iteration'?: IterationSimple;
    /**
     * 迭代 Id
     * @type {number}
     * @memberof IssueDetail
     */
    'IterationId'?: number;
    /**
     * 标签列表
     * @type {Array<IssueProjectLabel>}
     * @memberof IssueDetail
     */
    'Labels'?: Array<IssueProjectLabel>;
    /**
     * 名称
     * @type {string}
     * @memberof IssueDetail
     */
    'Name'?: string;
    /**
     * 
     * @type {IssueSimpleData}
     * @memberof IssueDetail
     */
    'Parent'?: IssueSimpleData;
    /**
     * 父事项类型
     * @type {string}
     * @memberof IssueDetail
     */
    'ParentType'?: string;
    /**
     * 优先级：  0 - 低，  1 - 中，  2 - 高，  3 - 紧急，  \"\" - 未指定
     * @type {string}
     * @memberof IssueDetail
     */
    'Priority'?: string;
    /**
     * 
     * @type {Project}
     * @memberof IssueDetail
     */
    'Project'?: Project;
    /**
     * 
     * @type {IssueProjectModule}
     * @memberof IssueDetail
     */
    'ProjectModule'?: IssueProjectModule;
    /**
     * 
     * @type {RequirementType}
     * @memberof IssueDetail
     */
    'RequirementType'?: RequirementType;
    /**
     * 开始日期时间戳
     * @type {number}
     * @memberof IssueDetail
     */
    'StartDate'?: number;
    /**
     * 故事点，例如：0.5、0、1  空字符串 \"\" 表示未指定。
     * @type {string}
     * @memberof IssueDetail
     */
    'StoryPoint'?: string;
    /**
     * 子工作项列表
     * @type {Array<SubTask>}
     * @memberof IssueDetail
     */
    'SubTasks'?: Array<SubTask>;
    /**
     * 第三方链接列表
     * @type {Array<IssueThirdLink>}
     * @memberof IssueDetail
     */
    'ThirdLinks'?: Array<IssueThirdLink>;
    /**
     * 事项类型：DEFECT - 缺陷，REQUIREMENT - 需求，MISSION - 任务，EPIC - 史诗，SUB_TASK - 子工作项, STORY - 用户故事
     * @type {string}
     * @memberof IssueDetail
     */
    'Type'?: string;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof IssueDetail
     */
    'UpdatedAt'?: number;
    /**
     * 关注人列表
     * @type {Array<User>}
     * @memberof IssueDetail
     */
    'Watchers'?: Array<User>;
    /**
     * 工时（小时数）
     * @type {number}
     * @memberof IssueDetail
     */
    'WorkingHours'?: number;
    /**
     * 经办人列表
     * @type {Array<User>}
     * @memberof IssueDetail
     */
    'Assignees'?: Array<User>;
}
/**
 * 分页查询版本发布范围
 * @export
 * @interface IssueDetailListDataWithPage
 */
export interface IssueDetailListDataWithPage {
    /**
     * 事项列表 
     * @type {Array<IssueDetail>}
     * @memberof IssueDetailListDataWithPage
     */
    'List'?: Array<IssueDetail>;
    /**
     * 页码
     * @type {number}
     * @memberof IssueDetailListDataWithPage
     */
    'PageNumber'?: number;
    /**
     * 页数
     * @type {number}
     * @memberof IssueDetailListDataWithPage
     */
    'PageSize'?: number;
    /**
     * 总共几条事项 
     * @type {number}
     * @memberof IssueDetailListDataWithPage
     */
    'TotalCount'?: number;
    /**
     * 总共几页 
     * @type {number}
     * @memberof IssueDetailListDataWithPage
     */
    'TotalPage'?: number;
}
/**
 * 事项属性
 * @export
 * @interface IssueField
 */
export interface IssueField {
    /**
     * 字段空间类型  TEXT_SINGLE_LINE - 单行文本  TEXT_MULTI_LINE - 多行文本  SELECT_SINGLE - 单选列表  SELECT_MULTI - 多选列表  RADIO - 单选框  CHECKBOX - 多选框  SELECT_MEMBER_SINGLE - 用户单选列表  SELECT_MEMBER_MULTI - 用户多选列表  TEXT_DATETIME - 日期时间选择框  TEXT_DATE - 日期选择框  TEXT_INTEGER - 整数输入框  TEXT_DECIMAL - 小数输入框
     * @type {string}
     * @memberof IssueField
     */
    'ComponentType'?: string;
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueField
     */
    'CreatedAt'?: number;
    /**
     * 创建者 ID
     * @type {number}
     * @memberof IssueField
     */
    'CreatedBy'?: number;
    /**
     * 是否可删除
     * @type {boolean}
     * @memberof IssueField
     */
    'Deletable'?: boolean;
    /**
     * 描述
     * @type {string}
     * @memberof IssueField
     */
    'Description'?: string | null;
    /**
     * 是否可修改
     * @type {boolean}
     * @memberof IssueField
     */
    'Editable'?: boolean;
    /**
     * 图标地址
     * @type {string}
     * @memberof IssueField
     */
    'IconUrl'?: string | null;
    /**
     * 属性 ID
     * @type {number}
     * @memberof IssueField
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof IssueField
     */
    'Name'?: string;
    /**
     * 选项列表
     * @type {Array<IssueFieldOption>}
     * @memberof IssueField
     */
    'Options'?: Array<IssueFieldOption> | null;
    /**
     * 是否必填
     * @type {boolean}
     * @memberof IssueField
     */
    'Required'?: boolean;
    /**
     * 项目中属性可选
     * @type {boolean}
     * @memberof IssueField
     */
    'Selectable'?: boolean;
    /**
     * 是否可排序
     * @type {boolean}
     * @memberof IssueField
     */
    'Sortable'?: boolean;
    /**
     * 字段类型
     * @type {string}
     * @memberof IssueField
     */
    'Type'?: string;
    /**
     * 单位
     * @type {string}
     * @memberof IssueField
     */
    'Unit'?: string | null;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof IssueField
     */
    'UpdatedAt'?: number;
}
/**
 * 事项属性选项
 * @export
 * @interface IssueFieldOption
 */
export interface IssueFieldOption {
    /**
     * 图标地址
     * @type {string}
     * @memberof IssueFieldOption
     */
    'Icon'?: string | null;
    /**
     * 排序
     * @type {number}
     * @memberof IssueFieldOption
     */
    'Sort'?: number;
    /**
     * 标题
     * @type {string}
     * @memberof IssueFieldOption
     */
    'Title'?: string;
    /**
     * 选项值
     * @type {string}
     * @memberof IssueFieldOption
     */
    'Value'?: string;
}
/**
 * 事项附件
 * @export
 * @interface IssueFile
 */
export interface IssueFile {
    /**
     * 文件 Id
     * @type {number}
     * @memberof IssueFile
     */
    'FileId'?: number;
    /**
     * 文件名称
     * @type {string}
     * @memberof IssueFile
     */
    'Name'?: string;
    /**
     * 文件大小
     * @type {number}
     * @memberof IssueFile
     */
    'Size'?: number;
    /**
     * 类型：  1-文本，  2-图片，  3-二进制文件，  4-SVG
     * @type {number}
     * @memberof IssueFile
     */
    'Type'?: number;
    /**
     * 临时下载地址
     * @type {string}
     * @memberof IssueFile
     */
    'Url'?: string;
}
/**
 * 事项过滤器
 * @export
 * @interface IssueFilter
 */
export interface IssueFilter {
    /**
     * 筛选组合，JSON 字符串<br />例如：`{\"filterIssueType\":\"ALL\",\"sort\":{\"key\":\"PRIORITY\",\"value\":\"DESC\"},\"conditions\":[{\"value\":[\"TODO\",\"PROCESSING\"],\"key\":\"STATUS_TYPE\",\"fixed\":true,\"filterIssueType\":\"ALL\",\"projectId\":1},{\"value\":[],\"key\":\"ASSIGNEE\",\"fixed\":true,\"constValue\":[\"UNSPECIFIC\"],\"filterIssueType\":\"ALL\",\"projectId\":1}]}`
     * @type {string}
     * @memberof IssueFilter
     */
    'ContentString'?: string;
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueFilter
     */
    'CreatedAt'?: number;
    /**
     * 创建人 ID
     * @type {number}
     * @memberof IssueFilter
     */
    'CreatorId'?: number;
    /**
     * 过滤器 ID
     * @type {number}
     * @memberof IssueFilter
     */
    'Id'?: number;
    /**
     * 默认筛选器
     * @type {boolean}
     * @memberof IssueFilter
     */
    'IsDefault'?: boolean;
    /**
     * 是否是系统自带
     * @type {boolean}
     * @memberof IssueFilter
     */
    'IsSystem'?: boolean;
    /**
     * 事项类型
     * @type {string}
     * @memberof IssueFilter
     */
    'IssueType'?: string;
    /**
     * 名称
     * @type {string}
     * @memberof IssueFilter
     */
    'Name'?: string;
    /**
     * 是否是团队筛选器
     * @type {boolean}
     * @memberof IssueFilter
     */
    'SharedTeam'?: boolean;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof IssueFilter
     */
    'UpdatedAt'?: number;
}
/**
 * 事项过滤器列表数据结构
 * @export
 * @interface IssueFilterListData
 */
export interface IssueFilterListData {
    /**
     * 自定义过滤器列表
     * @type {Array<IssueFilter>}
     * @memberof IssueFilterListData
     */
    'CustomFilterList'?: Array<IssueFilter>;
    /**
     * 系统过滤器列表
     * @type {Array<IssueFilter>}
     * @memberof IssueFilterListData
     */
    'SystemFilterList'?: Array<IssueFilter>;
}
/**
 * 事项列表信息
 * @export
 * @interface IssueListData
 */
export interface IssueListData {
    /**
     * 处理人 Id
     * @type {number}
     * @memberof IssueListData
     */
    'AssigneeId'?: number;
    /**
     * 事项 Code
     * @type {number}
     * @memberof IssueListData
     */
    'Code'?: number;
    /**
     * 完成时间时间戳
     * @type {number}
     * @memberof IssueListData
     */
    'CompletedAt'?: number | null;
    /**
     * 创建时间时间戳
     * @type {number}
     * @memberof IssueListData
     */
    'CreatedAt'?: number | null;
    /**
     * 创建人 Id
     * @type {number}
     * @memberof IssueListData
     */
    'CreatorId'?: number;
    /**
     * 自定义属性
     * @type {Array<IssueCustomField>}
     * @memberof IssueListData
     */
    'CustomFields'?: Array<IssueCustomField> | null;
    /**
     * 描述
     * @type {string}
     * @memberof IssueListData
     */
    'Description'?: string;
    /**
     * 截止日期时间戳
     * @type {number}
     * @memberof IssueListData
     */
    'DueDate'?: number | null;
    /**
     * 状态 Id
     * @type {number}
     * @memberof IssueListData
     */
    'IssueStatusId'?: number;
    /**
     * 状态名称
     * @type {string}
     * @memberof IssueListData
     */
    'IssueStatusName'?: string;
    /**
     * 状态类型：  TODO｜PROCESSING｜COMPLETED
     * @type {string}
     * @memberof IssueListData
     */
    'IssueStatusType'?: string;
    /**
     * 
     * @type {IssueTypeDetail}
     * @memberof IssueListData
     */
    'IssueTypeDetail'?: IssueTypeDetail;
    /**
     * 事项类型 ID
     * @type {number}
     * @memberof IssueListData
     */
    'IssueTypeId'?: number | null;
    /**
     * 
     * @type {IterationSimple}
     * @memberof IssueListData
     */
    'Iteration'?: IterationSimple;
    /**
     * 迭代 Id
     * @type {number}
     * @memberof IssueListData
     */
    'IterationId'?: number;
    /**
     * 事项标签
     * @type {Array<IssueProjectLabel>}
     * @memberof IssueListData
     */
    'Labels'?: Array<IssueProjectLabel> | null;
    /**
     * 名称
     * @type {string}
     * @memberof IssueListData
     */
    'Name'?: string;
    /**
     * 父事项code
     * @type {number}
     * @memberof IssueListData
     */
    'ParentCode'?: number | null;
    /**
     * 父事项ID
     * @type {number}
     * @memberof IssueListData
     */
    'ParentId'?: number | null;
    /**
     * 父事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗
     * @type {string}
     * @memberof IssueListData
     */
    'ParentType'?: string;
    /**
     * 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
     * @type {string}
     * @memberof IssueListData
     */
    'Priority'?: string;
    /**
     * 开始日期时间戳
     * @type {number}
     * @memberof IssueListData
     */
    'StartDate'?: number | null;
    /**
     * 故事点，例如：\"0.5\"、\"0\"，  空字符串 \"\" 表示未指定
     * @type {string}
     * @memberof IssueListData
     */
    'StoryPoint'?: string | null;
    /**
     * 事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗，  SUB_TASK - 子工作项
     * @type {string}
     * @memberof IssueListData
     */
    'Type'?: string;
    /**
     * 修改时间时间戳
     * @type {number}
     * @memberof IssueListData
     */
    'UpdatedAt'?: number | null;
    /**
     * 工时（小时）
     * @type {number}
     * @memberof IssueListData
     */
    'WorkingHours'?: number;
    /**
     * 经办人列表
     * @type {Array<User>}
     * @memberof IssueListData
     */
    'Assignees'?: Array<User>;
}
/**
 * 事项模块
 * @export
 * @interface IssueModule
 */
export interface IssueModule {
    /**
     * 模块ID
     * @type {number}
     * @memberof IssueModule
     */
    'Id'?: number;
    /**
     * 模块名称
     * @type {string}
     * @memberof IssueModule
     */
    'Name'?: string;
}
/**
 * 事项的项目标签
 * @export
 * @interface IssueProjectLabel
 */
export interface IssueProjectLabel {
    /**
     * 标签颜色，例如：#5A606B
     * @type {string}
     * @memberof IssueProjectLabel
     */
    'Color'?: string;
    /**
     * 项目标签 Id
     * @type {number}
     * @memberof IssueProjectLabel
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof IssueProjectLabel
     */
    'Name'?: string;
}
/**
 * 事项模块
 * @export
 * @interface IssueProjectModule
 */
export interface IssueProjectModule {
    /**
     * 模块 Id
     * @type {number}
     * @memberof IssueProjectModule
     */
    'Id'?: number;
    /**
     * 模块名称
     * @type {string}
     * @memberof IssueProjectModule
     */
    'Name'?: string;
}
/**
 * 事项登记工时表单
 * @export
 * @interface IssueRecordHourForm
 */
export interface IssueRecordHourForm {
    /**
     * 剩余工时
     * @type {number}
     * @memberof IssueRecordHourForm
     */
    'RemainingHour': number;
    /**
     * 使用工时
     * @type {number}
     * @memberof IssueRecordHourForm
     */
    'SpendHour': number;
    /**
     * 开始时间
     * @type {number}
     * @memberof IssueRecordHourForm
     */
    'StartAt': number;
    /**
     * 工作描述
     * @type {string}
     * @memberof IssueRecordHourForm
     */
    'WorkingDesc': string;
}
/**
 * 事项关联的代码仓库信息
 * @export
 * @interface IssueRelatedDepot
 */
export interface IssueRelatedDepot {
    /**
     * 仓库ID
     * @type {number}
     * @memberof IssueRelatedDepot
     */
    'DepotId'?: number | null;
    /**
     * 仓库名称 
     * @type {string}
     * @memberof IssueRelatedDepot
     */
    'Name'?: string | null;
    /**
     * 项目ID
     * @type {number}
     * @memberof IssueRelatedDepot
     */
    'ProjectId'?: number | null;
}
/**
 * 事项基础信息
 * @export
 * @interface IssueSimpleData
 */
export interface IssueSimpleData {
    /**
     * 
     * @type {User}
     * @memberof IssueSimpleData
     */
    'Assignee'?: User;
    /**
     * 事项 Code
     * @type {number}
     * @memberof IssueSimpleData
     */
    'Code'?: number;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof IssueSimpleData
     */
    'IssueStatusId'?: number;
    /**
     * 事项状态名称
     * @type {string}
     * @memberof IssueSimpleData
     */
    'IssueStatusName'?: string;
    /**
     * 事项状态类型：  TODO｜PROCESSING｜ COMPLETED
     * @type {string}
     * @memberof IssueSimpleData
     */
    'IssueStatusType'?: string;
    /**
     * 
     * @type {IssueTypeDetail}
     * @memberof IssueSimpleData
     */
    'IssueTypeDetail'?: IssueTypeDetail;
    /**
     * 名称
     * @type {string}
     * @memberof IssueSimpleData
     */
    'Name'?: string;
    /**
     * 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
     * @type {string}
     * @memberof IssueSimpleData
     */
    'Priority'?: string | null;
    /**
     * 事项类型：  DEFECT - 缺陷，  REQUIREMENT - 需求，  MISSION - 任务，  EPIC - 史诗，  SUB_TASK - 子工作项
     * @type {string}
     * @memberof IssueSimpleData
     */
    'Type'?: string;
}
/**
 * 事项状态
 * @export
 * @interface IssueStatus
 */
export interface IssueStatus {
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueStatus
     */
    'CreatedAt'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof IssueStatus
     */
    'Description'?: string | null;
    /**
     * 事项状态 ID
     * @type {number}
     * @memberof IssueStatus
     */
    'Id'?: number;
    /**
     * 状态序号
     * @type {number}
     * @memberof IssueStatus
     */
    'Index'?: number;
    /**
     * 是否是系统内置
     * @type {boolean}
     * @memberof IssueStatus
     */
    'IsSystem'?: boolean;
    /**
     * 名称
     * @type {string}
     * @memberof IssueStatus
     */
    'Name'?: string;
    /**
     * 类型：TODO、PROCESSING、COMPLETED
     * @type {string}
     * @memberof IssueStatus
     */
    'Type'?: string;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof IssueStatus
     */
    'UpdatedAt'?: number;
}
/**
 * 事项状态修改日志结构体
 * @export
 * @interface IssueStatusChangeLog
 */
export interface IssueStatusChangeLog {
    /**
     * 创建时间
     * @type {number}
     * @memberof IssueStatusChangeLog
     */
    'CreatedAt'?: number | null;
    /**
     * 事项code
     * @type {number}
     * @memberof IssueStatusChangeLog
     */
    'IssueCode'?: number | null;
    /**
     * 
     * @type {IssueStatus}
     * @memberof IssueStatusChangeLog
     */
    'IssueStatus'?: IssueStatus;
    /**
     * 状态ID
     * @type {number}
     * @memberof IssueStatusChangeLog
     */
    'StatusId'?: number | null;
    /**
     * 事项章台名称
     * @type {string}
     * @memberof IssueStatusChangeLog
     */
    'StatusName'?: string | null;
}
/**
 * 事项状态修改日志list
 * @export
 * @interface IssueStatusChangeLogList
 */
export interface IssueStatusChangeLogList {
    /**
     * 事项状态修改日志list
     * @type {Array<IssueStatusChangeLog>}
     * @memberof IssueStatusChangeLogList
     */
    'List'?: Array<IssueStatusChangeLog> | null;
}
/**
 * 事项第三方链接
 * @export
 * @interface IssueThirdLink
 */
export interface IssueThirdLink {
    /**
     * 第三方链接 Id
     * @type {number}
     * @memberof IssueThirdLink
     */
    'Id'?: number;
    /**
     * 链接地址
     * @type {string}
     * @memberof IssueThirdLink
     */
    'Link'?: string;
    /**
     * 第三方链接类型，MODAO - 墨刀
     * @type {string}
     * @memberof IssueThirdLink
     */
    'ThirdType'?: string;
    /**
     * 名称
     * @type {string}
     * @memberof IssueThirdLink
     */
    'Title'?: string;
}
/**
 * 事项第三方链接表单
 * @export
 * @interface IssueThirdLinkForm
 */
export interface IssueThirdLinkForm {
    /**
     * 链接创建时间
     * @type {number}
     * @memberof IssueThirdLinkForm
     */
    'CreatedAt'?: number;
    /**
     * 链接地址
     * @type {string}
     * @memberof IssueThirdLinkForm
     */
    'Link': string;
    /**
     * 第三方链接类型  MODAO：墨刀
     * @type {string}
     * @memberof IssueThirdLinkForm
     */
    'ThirdType': string;
    /**
     * 链接标题
     * @type {string}
     * @memberof IssueThirdLinkForm
     */
    'Title': string;
}
/**
 * 事项类型详情
 * @export
 * @interface IssueTypeDetail
 */
export interface IssueTypeDetail {
    /**
     * 描述
     * @type {string}
     * @memberof IssueTypeDetail
     */
    'Description'?: string;
    /**
     * 事项类型 ID
     * @type {number}
     * @memberof IssueTypeDetail
     */
    'Id'?: number;
    /**
     * 是否是系统类型
     * @type {boolean}
     * @memberof IssueTypeDetail
     */
    'IsSystem'?: boolean;
    /**
     * 事项类型大类
     * @type {string}
     * @memberof IssueTypeDetail
     */
    'IssueType'?: string;
    /**
     * 事项类型名称
     * @type {string}
     * @memberof IssueTypeDetail
     */
    'Name'?: string;
}
/**
 * 事项类型详情(带分解类型)
 * @export
 * @interface IssueTypeDetailWithSplit
 */
export interface IssueTypeDetailWithSplit {
    /**
     * 描述
     * @type {string}
     * @memberof IssueTypeDetailWithSplit
     */
    'Description'?: string;
    /**
     * 事项类型 ID
     * @type {number}
     * @memberof IssueTypeDetailWithSplit
     */
    'Id'?: number;
    /**
     * 是否是系统类型
     * @type {boolean}
     * @memberof IssueTypeDetailWithSplit
     */
    'IsSystem'?: boolean;
    /**
     * 事项类型大类
     * @type {string}
     * @memberof IssueTypeDetailWithSplit
     */
    'IssueType'?: string;
    /**
     * 事项类型名称
     * @type {string}
     * @memberof IssueTypeDetailWithSplit
     */
    'Name'?: string;
    /**
     * 可分解类型 ID，SplitType = SPECIFIC_TYPE 时需指定
     * @type {Array<number>}
     * @memberof IssueTypeDetailWithSplit
     */
    'SplitTargetIssueTypeId'?: Array<number>;
    /**
     * 需求分解类型，SPECIFIC_TYPE - 可分解为制定需求类型，UNSPLITTABLE - 不可分解需求，ALL_REQUIREMENT - 可分解为全部需求类型
     * @type {string}
     * @memberof IssueTypeDetailWithSplit
     */
    'SplitType'?: string;
}
/**
 * 事项工时日志信息
 * @export
 * @interface IssueWorkLog
 */
export interface IssueWorkLog {
    /**
     * 创建时间戳
     * @type {number}
     * @memberof IssueWorkLog
     */
    'CreatedAt'?: number;
    /**
     * 工时日志 Id
     * @type {number}
     * @memberof IssueWorkLog
     */
    'Id'?: number;
    /**
     * 事项编号
     * @type {number}
     * @memberof IssueWorkLog
     */
    'IssueCode'?: number;
    /**
     * 事项 Id
     * @type {number}
     * @memberof IssueWorkLog
     */
    'IssueId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof IssueWorkLog
     */
    'ProjectName'?: string;
    /**
     * 使用工时
     * @type {number}
     * @memberof IssueWorkLog
     */
    'RecordHours'?: number;
    /**
     * 剩余工时
     * @type {number}
     * @memberof IssueWorkLog
     */
    'RemainingHours'?: number;
    /**
     * 开始时间
     * @type {number}
     * @memberof IssueWorkLog
     */
    'StartAt'?: number;
    /**
     * 更新时间
     * @type {number}
     * @memberof IssueWorkLog
     */
    'UpdatedAt'?: number | null;
    /**
     * 用户 Id
     * @type {number}
     * @memberof IssueWorkLog
     */
    'UserId'?: number;
    /**
     * 工作描述
     * @type {string}
     * @memberof IssueWorkLog
     */
    'WorkingDesc'?: string;
}
/**
 * 迭代信息
 * @export
 * @interface Iteration
 */
export interface Iteration {
    /**
     * 处理人 ID ，为 0 代表没有设置
     * @type {number}
     * @memberof Iteration
     */
    'Assignee'?: number;
    /**
     * 迭代编号，项目内唯一
     * @type {number}
     * @memberof Iteration
     */
    'Code'?: number;
    /**
     * 迭代中完成事项总数
     * @type {number}
     * @memberof Iteration
     */
    'CompletedCount'?: number;
    /**
     * 迭代中事项完成比率
     * @type {number}
     * @memberof Iteration
     */
    'CompletedPercent'?: number;
    /**
     * 完成人 ID
     * @type {number}
     * @memberof Iteration
     */
    'Completer'?: number;
    /**
     * 创建时间
     * @type {number}
     * @memberof Iteration
     */
    'CreatedAt'?: number | null;
    /**
     * 创建人 ID
     * @type {number}
     * @memberof Iteration
     */
    'Creator'?: number;
    /**
     * 结束时间，时间戳，-28800000 代表没有设置
     * @type {number}
     * @memberof Iteration
     */
    'EndAt'?: number | null;
    /**
     * 迭代目标
     * @type {string}
     * @memberof Iteration
     */
    'Goal'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof Iteration
     */
    'Name'?: string;
    /**
     * 迭代中进行中事项总数
     * @type {number}
     * @memberof Iteration
     */
    'ProcessingCount'?: number;
    /**
     * 开始时间，时间戳，-28800000 代表没有设置
     * @type {number}
     * @memberof Iteration
     */
    'StartAt'?: number | null;
    /**
     * 开始人 ID
     * @type {number}
     * @memberof Iteration
     */
    'Starter'?: number;
    /**
     * 迭代状态：WAIT_PROCESS,PROCESSING,COMPLETED
     * @type {string}
     * @memberof Iteration
     */
    'Status'?: string;
    /**
     * 修改时间
     * @type {number}
     * @memberof Iteration
     */
    'UpdatedAt'?: number | null;
    /**
     * 迭代中待处理事项总数
     * @type {number}
     * @memberof Iteration
     */
    'WaitProcessCount'?: number;
}
/**
 * 迭代基础信息
 * @export
 * @interface IterationSimple
 */
export interface IterationSimple {
    /**
     * 迭代代码
     * @type {number}
     * @memberof IterationSimple
     */
    'Code'?: number;
    /**
     * 迭代Id
     * @type {number}
     * @memberof IterationSimple
     */
    'Id'?: number;
    /**
     * 迭代名称
     * @type {string}
     * @memberof IterationSimple
     */
    'Name'?: string;
    /**
     * 迭代状态：WAIT_PROCESS,PROCESSING,COMPLETED
     * @type {string}
     * @memberof IterationSimple
     */
    'Status'?: string;
}
/**
 * 
 * @export
 * @interface JobCreateJobData
 */
export interface JobCreateJobData {
    /**
     * 构建计划 ID
     * @type {number}
     * @memberof JobCreateJobData
     */
    'Id': number;
}
/**
 * KubeConfigForm 结构
 * @export
 * @interface KubeConfigForm
 */
export interface KubeConfigForm {
    /**
     * 指定访问集群 KubeConfig 文件的上下文
     * @type {string}
     * @memberof KubeConfigForm
     */
    'ClusterContext': string;
    /**
     * 是否接受非认证证书（是：true；否：false）
     * @type {boolean}
     * @memberof KubeConfigForm
     */
    'InsecureSkipTLSVerify': boolean;
    /**
     * 访问集群的 KubeConfig 文件（YAML 格式，Base64 编码），添加时必填，修改时可不填
     * @type {string}
     * @memberof KubeConfigForm
     */
    'KubeConfig'?: string | null;
    /**
     * 是否允许持续部署管理集群已有资源（是：false；否：true）
     * @type {boolean}
     * @memberof KubeConfigForm
     */
    'OnlySpinnakerManaged': boolean;
}
/**
 * git diff详情中每行的详细信息
 * @export
 * @interface Line
 */
export interface Line {
    /**
     * diff信息中的行数
     * @type {number}
     * @memberof Line
     */
    'Index'?: number | null;
    /**
     * 修改前第几行
     * @type {number}
     * @memberof Line
     */
    'LeftNo'?: number | null;
    /**
     * 前缀 + -
     * @type {string}
     * @memberof Line
     */
    'Prefix'?: string | null;
    /**
     * 修改后第几行
     * @type {number}
     * @memberof Line
     */
    'RightNo'?: number | null;
    /**
     * 文件每行的具体内容
     * @type {string}
     * @memberof Line
     */
    'Text'?: string | null;
}
/**
 * 查询制品版本可下载文件参数
 * @export
 * @interface Maven
 */
export interface Maven {
    /**
     * 附属构件
     * @type {string}
     * @memberof Maven
     */
    'Classifier': string;
    /**
     * 打包方式：pom;jar;war
     * @type {string}
     * @memberof Maven
     */
    'Packaging': string;
}
/**
 * 合并请求详情
 * @export
 * @interface MergeInfo
 */
export interface MergeInfo {
    /**
     * 仓库id
     * @type {number}
     * @memberof MergeInfo
     */
    'DepotId'?: number;
    /**
     * 合并请求id
     * @type {number}
     * @memberof MergeInfo
     */
    'MergeRequestId'?: number;
    /**
     * 
     * @type {MergeRequestInfo}
     * @memberof MergeInfo
     */
    'MergeRequestInfo'?: MergeRequestInfo;
    /**
     * 合并请求URl
     * @type {string}
     * @memberof MergeInfo
     */
    'MergeRequestUrl'?: string | null;
    /**
     * 项目id
     * @type {number}
     * @memberof MergeInfo
     */
    'ProjectId'?: number;
}
/**
 * 合并请求详情
 * @export
 * @interface MergeReqInfo
 */
export interface MergeReqInfo {
    /**
     * 描述,为 markdown 格式
     * @type {string}
     * @memberof MergeReqInfo
     */
    'Describe'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof MergeReqInfo
     */
    'SourceBranch'?: string;
    /**
     * 合并状态,状态值如下:  CANMERGE:状态可自动合并;  ACCEPTED:状态已接受;  CANNOTMERGE:状态不可自动合并;  REFUSED:状态已拒绝(关闭);  CANCEL: 取消;  MERGING:正在合并中;  ABNORMAL:状态异常;
     * @type {string}
     * @memberof MergeReqInfo
     */
    'Status'?: string;
    /**
     * 目标分支
     * @type {string}
     * @memberof MergeReqInfo
     */
    'TargetBranch'?: string;
    /**
     * 合并标题
     * @type {string}
     * @memberof MergeReqInfo
     */
    'Title'?: string;
}
/**
 * 合并请求数据
 * @export
 * @interface MergeRequestData
 */
export interface MergeRequestData {
    /**
     * 合并时间
     * @type {number}
     * @memberof MergeRequestData
     */
    'ActionAt'?: number | null;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestData
     */
    'ActionAuthor'?: CodingUser;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestData
     */
    'Author'?: CodingUser;
    /**
     * 基础sha
     * @type {string}
     * @memberof MergeRequestData
     */
    'BaseSha'?: string | null;
    /**
     * 评论数
     * @type {number}
     * @memberof MergeRequestData
     */
    'CommentCount'?: number | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof MergeRequestData
     */
    'CreatedAt'?: number | null;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof MergeRequestData
     */
    'DepotId'?: number;
    /**
     * MR描述
     * @type {string}
     * @memberof MergeRequestData
     */
    'Describe'?: string | null;
    /**
     * 授权数
     * @type {number}
     * @memberof MergeRequestData
     */
    'Granted'?: number | null;
    /**
     * 合并请求 Id
     * @type {number}
     * @memberof MergeRequestData
     */
    'Id'?: number;
    /**
     * 标签列表
     * @type {Array<string>}
     * @memberof MergeRequestData
     */
    'Labels'?: Array<string> | null;
    /**
     * 合并Commit Sha
     * @type {string}
     * @memberof MergeRequestData
     */
    'MergeCommitSha'?: string | null;
    /**
     * 合并请求 IId
     * @type {number}
     * @memberof MergeRequestData
     */
    'MergeId'?: number;
    /**
     * 合并请求 web 页面路径
     * @type {string}
     * @memberof MergeRequestData
     */
    'Path'?: string | null;
    /**
     * 项目ID
     * @type {number}
     * @memberof MergeRequestData
     */
    'ProjectId'?: number;
    /**
     * 是否提醒
     * @type {boolean}
     * @memberof MergeRequestData
     */
    'Reminded'?: boolean | null;
    /**
     * 评审者列表
     * @type {Array<CodingUser>}
     * @memberof MergeRequestData
     */
    'Reviewers'?: Array<CodingUser> | null;
    /**
     * 源分支
     * @type {string}
     * @memberof MergeRequestData
     */
    'SourceBranch'?: string | null;
    /**
     * 源分支Commit Sha
     * @type {string}
     * @memberof MergeRequestData
     */
    'SourceBranchSha'?: string | null;
    /**
     * 合并请求状态
     * @type {string}
     * @memberof MergeRequestData
     */
    'Status'?: string | null;
    /**
     * MR阻塞点
     * @type {string}
     * @memberof MergeRequestData
     */
    'StickingPoint'?: string | null;
    /**
     * 目标分支
     * @type {string}
     * @memberof MergeRequestData
     */
    'TargetBranch'?: string | null;
    /**
     * 目标分支是否保护分支
     * @type {boolean}
     * @memberof MergeRequestData
     */
    'TargetBranchProtected'?: boolean | null;
    /**
     * 目标分支Commit Sha
     * @type {string}
     * @memberof MergeRequestData
     */
    'TargetBranchSha'?: string | null;
    /**
     * 合并请求标题
     * @type {string}
     * @memberof MergeRequestData
     */
    'Title'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof MergeRequestData
     */
    'UpdateAt'?: number | null;
}
/**
 * 合并请求详细数据
 * @export
 * @interface MergeRequestDetail
 */
export interface MergeRequestDetail {
    /**
     * 是否允许合并时间
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'ActionAt'?: number | null;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestDetail
     */
    'ActionAuthor'?: CodingUser;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestDetail
     */
    'Author'?: CodingUser;
    /**
     * 合并请求描述
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'Content'?: string | null;
    /**
     * 合并请求描述（html 格式）
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'ContentHtml'?: string | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'CreateAt'?: number | null;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'DepotId'?: number | null;
    /**
     * 合并请求 Id
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'Id'?: number | null;
    /**
     * 合并请求 Iid
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'MergeId'?: number | null;
    /**
     * 合并请求状态
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'MergeStatus'?: string | null;
    /**
     * 合并 Sha
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'MergedSha'?: string | null;
    /**
     * 源分支名
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'SourceBranch'?: string | null;
    /**
     * 源分支 Sha
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'SourceSha'?: string | null;
    /**
     * 目标分支名
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'TargetBranch'?: string | null;
    /**
     * 目标分支 Sha
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'TargetSha'?: string | null;
    /**
     * 合并请求标题
     * @type {string}
     * @memberof MergeRequestDetail
     */
    'Title'?: string | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof MergeRequestDetail
     */
    'UpdateAt'?: number | null;
}
/**
 * 合并请求 diff 信息
 * @export
 * @interface MergeRequestDiff
 */
export interface MergeRequestDiff {
    /**
     * 一共减少行数
     * @type {number}
     * @memberof MergeRequestDiff
     */
    'Deletions'?: number | null;
    /**
     * 一共新增行数
     * @type {number}
     * @memberof MergeRequestDiff
     */
    'Insertions'?: number | null;
    /**
     * diff 信息是否过多，不宜于展示
     * @type {boolean}
     * @memberof MergeRequestDiff
     */
    'IsLarge'?: boolean | null;
    /**
     * 源分支对应的Sha值
     * @type {string}
     * @memberof MergeRequestDiff
     */
    'NewSha'?: string | null;
    /**
     * 目标分支对应的Sha值
     * @type {string}
     * @memberof MergeRequestDiff
     */
    'OldSha'?: string | null;
    /**
     * 文件信息
     * @type {Array<MergeRequestDiffFile>}
     * @memberof MergeRequestDiff
     */
    'Paths'?: Array<MergeRequestDiffFile> | null;
}
/**
 * diff 信息详情
 * @export
 * @interface MergeRequestDiffFile
 */
export interface MergeRequestDiffFile {
    /**
     * 文件对应的 blob Id
     * @type {string}
     * @memberof MergeRequestDiffFile
     */
    'BlobSha'?: string | null;
    /**
     * 文件改变类型
     * @type {string}
     * @memberof MergeRequestDiffFile
     */
    'ChangeType'?: string | null;
    /**
     * 一共删除几行
     * @type {number}
     * @memberof MergeRequestDiffFile
     */
    'Deletions'?: number | null;
    /**
     * 一共新增几行
     * @type {number}
     * @memberof MergeRequestDiffFile
     */
    'Insertions'?: number | null;
    /**
     * 文件路径
     * @type {string}
     * @memberof MergeRequestDiffFile
     */
    'Path'?: string | null;
    /**
     * 文件大小（字节）
     * @type {number}
     * @memberof MergeRequestDiffFile
     */
    'Size'?: number | null;
}
/**
 * 创建Diff信息行评论表单
 * @export
 * @interface MergeRequestDiffNoteForm
 */
export interface MergeRequestDiffNoteForm {
    /**
     * 提交Id
     * @type {string}
     * @memberof MergeRequestDiffNoteForm
     */
    'CommitSha': string;
    /**
     * Diff信息行数
     * @type {number}
     * @memberof MergeRequestDiffNoteForm
     */
    'Index': number;
    /**
     * 改动文件路径
     * @type {string}
     * @memberof MergeRequestDiffNoteForm
     */
    'Path': string;
}
/**
 * 文件修改记录
 * @export
 * @interface MergeRequestFileDiff
 */
export interface MergeRequestFileDiff {
    /**
     * 总删除条数
     * @type {number}
     * @memberof MergeRequestFileDiff
     */
    'Deletions'?: number;
    /**
     * 文件差异列表
     * @type {Array<FileDiff>}
     * @memberof MergeRequestFileDiff
     */
    'FileDiffs'?: Array<FileDiff>;
    /**
     * 总新增条数
     * @type {number}
     * @memberof MergeRequestFileDiff
     */
    'Insertions'?: number;
    /**
     * 新请求的 sha 值
     * @type {string}
     * @memberof MergeRequestFileDiff
     */
    'NewSha'?: string;
    /**
     * 旧请求的 sha 值
     * @type {string}
     * @memberof MergeRequestFileDiff
     */
    'OldSha'?: string;
}
/**
 * 合并请求详情
 * @export
 * @interface MergeRequestInfo
 */
export interface MergeRequestInfo {
    /**
     * 操作时间
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'ActionAt'?: number;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestInfo
     */
    'ActionAuthor'?: CodingUser;
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestInfo
     */
    'Author'?: CodingUser;
    /**
     * 基础Sha
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'BaseSha'?: string;
    /**
     * 评论数
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'CommentCount'?: number;
    /**
     * 冲突文件列表
     * @type {Array<string>}
     * @memberof MergeRequestInfo
     */
    'Conflicts'?: Array<string>;
    /**
     * 创建时间
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'CreatedAt'?: number;
    /**
     * 仓库ID
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'DepotId'?: number;
    /**
     * 描述,为 markdown 格式
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'Describe'?: string;
    /**
     * 是否授权
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'Granted'?: number;
    /**
     * 合并请求ID
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'Id'?: number;
    /**
     * 合并请求标签列表
     * @type {Array<string>}
     * @memberof MergeRequestInfo
     */
    'Labels'?: Array<string> | null;
    /**
     * 合并Commit Sha
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'MergeCommitSha'?: string;
    /**
     * 合并请求iid
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'MergeId'?: number;
    /**
     * 
     * @type {Mission}
     * @memberof MergeRequestInfo
     */
    'Mission'?: Mission;
    /**
     * 合并请求 web 页面路径
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'Path'?: string;
    /**
     * 项目ID
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'ProjectId'?: number;
    /**
     * 是否提醒
     * @type {boolean}
     * @memberof MergeRequestInfo
     */
    'Reminded'?: boolean | null;
    /**
     * MR评审者
     * @type {Array<CodingUser>}
     * @memberof MergeRequestInfo
     */
    'Reviewers'?: Array<CodingUser> | null;
    /**
     * 源分支
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'SourceBranch'?: string;
    /**
     * 源分支Commit Sha
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'SourceBranchSha'?: string;
    /**
     * 合并状态,CANMERGE(状态可自动合并),ACCEPTED(状态已接受), CANNOTMERGE(状态不可自动合并), REFUSED(状态已拒绝(关闭)), CANCEL(取消), MERGING(正在合并中), ABNORMAL(状态异常)
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'Status'?: string;
    /**
     * MR阻塞点
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'StickingPoint'?: string;
    /**
     * 目标分支
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'TargetBranch'?: string;
    /**
     * 目标分支是否为保护分支
     * @type {boolean}
     * @memberof MergeRequestInfo
     */
    'TargetBranchProtected'?: boolean;
    /**
     * 目标分支Commit Sha
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'TargetBranchSha'?: string;
    /**
     * 合并标题
     * @type {string}
     * @memberof MergeRequestInfo
     */
    'Title'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof MergeRequestInfo
     */
    'UpdatedAt'?: number;
}
/**
 * 合并请求操作记录
 * @export
 * @interface MergeRequestLog
 */
export interface MergeRequestLog {
    /**
     * 操作方式
     * @type {string}
     * @memberof MergeRequestLog
     */
    'Action'?: string;
    /**
     * 请求id
     * @type {number}
     * @memberof MergeRequestLog
     */
    'Id'?: number;
    /**
     * 操作人姓名
     * @type {string}
     * @memberof MergeRequestLog
     */
    'Name'?: string;
}
/**
 * 合并请求评论
 * @export
 * @interface MergeRequestNote
 */
export interface MergeRequestNote {
    /**
     * 
     * @type {CodingUser}
     * @memberof MergeRequestNote
     */
    'Author'?: CodingUser;
    /**
     * 合并请求中提交Id
     * @type {string}
     * @memberof MergeRequestNote
     */
    'CommitSha'?: string | null;
    /**
     * 行评论的内容
     * @type {string}
     * @memberof MergeRequestNote
     */
    'Content'?: string;
    /**
     * 行评论创建时间
     * @type {number}
     * @memberof MergeRequestNote
     */
    'CreatedAt'?: number;
    /**
     * 行评论的Id
     * @type {number}
     * @memberof MergeRequestNote
     */
    'Id'?: number;
    /**
     * diff信息中的行数
     * @type {number}
     * @memberof MergeRequestNote
     */
    'Index'?: number | null;
    /**
     * 合并请求的Iid
     * @type {number}
     * @memberof MergeRequestNote
     */
    'MergeId'?: number;
    /**
     * 子评论的父Id
     * @type {number}
     * @memberof MergeRequestNote
     */
    'ParentId'?: number;
    /**
     * 改动文件的路径
     * @type {string}
     * @memberof MergeRequestNote
     */
    'Path'?: string | null;
    /**
     * 行评论更新时间
     * @type {number}
     * @memberof MergeRequestNote
     */
    'UpdatedAt'?: number;
}
/**
 * 合并请求评论列表
 * @export
 * @interface MergeRequestNoteList
 */
export interface MergeRequestNoteList {
    /**
     * 合并请求中父子评论列表、diff信息同行评论列表
     * @type {Array<MergeRequestNote>}
     * @memberof MergeRequestNoteList
     */
    'Note'?: Array<MergeRequestNote>;
}
/**
 * Mission
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * 返回码
     * @type {number}
     * @memberof Mission
     */
    'Code'?: number | null;
    /**
     * 连接
     * @type {string}
     * @memberof Mission
     */
    'Link'?: string | null;
    /**
     * 目标id
     * @type {number}
     * @memberof Mission
     */
    'TargetId'?: number | null;
    /**
     * 目标项目名称
     * @type {string}
     * @memberof Mission
     */
    'TargetProjectName'?: string | null;
    /**
     * 类型
     * @type {string}
     * @memberof Mission
     */
    'TargetType'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof Mission
     */
    'Title'?: string | null;
}
/**
 * 
 * @export
 * @interface ModifyArtifactCredit200Response
 */
export interface ModifyArtifactCredit200Response {
    /**
     * 
     * @type {DeleteCdHostServerGroup200ResponseResponse}
     * @memberof ModifyArtifactCredit200Response
     */
    'Response'?: DeleteCdHostServerGroup200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyArtifactCreditRequest
 */
export interface ModifyArtifactCreditRequest {
    /**
     * 授信清单范围
     * @type {Array<ArtifactsOpenApiCreateArtifactCreditsRangeData>}
     * @memberof ModifyArtifactCreditRequest
     */
    'Ranges'?: Array<ArtifactsOpenApiCreateArtifactCreditsRangeData>;
    /**
     * 是否启用
     * @type {boolean}
     * @memberof ModifyArtifactCreditRequest
     */
    'Enabled'?: boolean;
    /**
     * 授信清单ID
     * @type {number}
     * @memberof ModifyArtifactCreditRequest
     */
    'Id'?: number;
    /**
     * 授信清单规则
     * @type {Array<ArtifactsOpenApiArtifactCreditsRuleData>}
     * @memberof ModifyArtifactCreditRequest
     */
    'Rules'?: Array<ArtifactsOpenApiArtifactCreditsRuleData>;
    /**
     * 授信清单名称
     * @type {string}
     * @memberof ModifyArtifactCreditRequest
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface ModifyArtifactPropertiesRequest
 */
export interface ModifyArtifactPropertiesRequest {
    /**
     * 包名
     * @type {string}
     * @memberof ModifyArtifactPropertiesRequest
     */
    'Package'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof ModifyArtifactPropertiesRequest
     */
    'PackageVersion'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof ModifyArtifactPropertiesRequest
     */
    'ProjectId'?: number;
    /**
     * 属性列表
     * @type {Array<ArtifactPropertyBean>}
     * @memberof ModifyArtifactPropertiesRequest
     */
    'PropertySet'?: Array<ArtifactPropertyBean>;
    /**
     * 仓库名
     * @type {string}
     * @memberof ModifyArtifactPropertiesRequest
     */
    'Repository'?: string;
}
/**
 * 
 * @export
 * @interface ModifyBranchProtection200Response
 */
export interface ModifyBranchProtection200Response {
    /**
     * 
     * @type {ModifyBranchProtection200ResponseResponse}
     * @memberof ModifyBranchProtection200Response
     */
    'Response'?: ModifyBranchProtection200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyBranchProtection200ResponseResponse
 */
export interface ModifyBranchProtection200ResponseResponse {
    /**
     * 
     * @type {BranchProtection}
     * @memberof ModifyBranchProtection200ResponseResponse
     */
    'BranchProtection'?: BranchProtection;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyBranchProtection200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyBranchProtectionMemberPermissionRequest
 */
export interface ModifyBranchProtectionMemberPermissionRequest {
    /**
     * 是否直接推送
     * @type {boolean}
     * @memberof ModifyBranchProtectionMemberPermissionRequest
     */
    'AllowPush'?: boolean;
    /**
     * 分支规则名称
     * @type {string}
     * @memberof ModifyBranchProtectionMemberPermissionRequest
     */
    'BranchRuleName'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyBranchProtectionMemberPermissionRequest
     */
    'DepotPath'?: string;
    /**
     * 用户GlobalKey
     * @type {string}
     * @memberof ModifyBranchProtectionMemberPermissionRequest
     */
    'UserGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface ModifyBranchProtectionRequest
 */
export interface ModifyBranchProtectionRequest {
    /**
     * 
     * @type {BranchProtection}
     * @memberof ModifyBranchProtectionRequest
     */
    'BranchProtection'?: BranchProtection;
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyBranchProtectionRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyBranchProtectionRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCdCloudAccount200Response
 */
export interface ModifyCdCloudAccount200Response {
    /**
     * 
     * @type {ModifyCdCloudAccount200ResponseResponse}
     * @memberof ModifyCdCloudAccount200Response
     */
    'Response'?: ModifyCdCloudAccount200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyCdCloudAccount200ResponseResponse
 */
export interface ModifyCdCloudAccount200ResponseResponse {
    /**
     * 
     * @type {ModifyCdCloudAccountResponseData}
     * @memberof ModifyCdCloudAccount200ResponseResponse
     */
    'Data'?: ModifyCdCloudAccountResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyCdCloudAccount200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCdCloudAccountRequest
 */
export interface ModifyCdCloudAccountRequest {
    /**
     * 
     * @type {CloudAccountCredential}
     * @memberof ModifyCdCloudAccountRequest
     */
    'Credential'?: CloudAccountCredential;
    /**
     * 云账号 ID
     * @type {number}
     * @memberof ModifyCdCloudAccountRequest
     */
    'Id'?: number;
    /**
     * 云账号名称
     * @type {string}
     * @memberof ModifyCdCloudAccountRequest
     */
    'Name'?: string;
}
/**
 * ModifyCdCloudAccountResponseData 结构
 * @export
 * @interface ModifyCdCloudAccountResponseData
 */
export interface ModifyCdCloudAccountResponseData {
    /**
     * 
     * @type {CloudAccount}
     * @memberof ModifyCdCloudAccountResponseData
     */
    'CloudAccount'?: CloudAccount;
}
/**
 * 
 * @export
 * @interface ModifyCdHostServerGroup200Response
 */
export interface ModifyCdHostServerGroup200Response {
    /**
     * 
     * @type {ModifyCdHostServerGroup200ResponseResponse}
     * @memberof ModifyCdHostServerGroup200Response
     */
    'Response'?: ModifyCdHostServerGroup200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyCdHostServerGroup200ResponseResponse
 */
export interface ModifyCdHostServerGroup200ResponseResponse {
    /**
     * 
     * @type {ModifyCdHostServerGroupResponseData}
     * @memberof ModifyCdHostServerGroup200ResponseResponse
     */
    'Data'?: ModifyCdHostServerGroupResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyCdHostServerGroup200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCdHostServerGroupRequest
 */
export interface ModifyCdHostServerGroupRequest {
    /**
     * 堡垒机 ID
     * @type {number}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'AgentMachineId'?: number;
    /**
     * SSH 认证方式（可选值：PUBLIC_KEY、PASSWORD）
     * @type {string}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'AuthMethod'?: string;
    /**
     * 主机组名称
     * @type {string}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'DisplayName'?: string;
    /**
     * 主机组 ID
     * @type {number}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'Id'?: number;
    /**
     * 实例 IP 列表
     * @type {Array<string>}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'Ips'?: Array<string>;
    /**
     * 主机组标签
     * @type {Array<HostServerGroupLabel>}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'Labels'?: Array<HostServerGroupLabel>;
    /**
     * SSH 密码
     * @type {string}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'Password'?: string;
    /**
     * SSH 端口
     * @type {number}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'Port'?: number;
    /**
     * SSH 用户名
     * @type {string}
     * @memberof ModifyCdHostServerGroupRequest
     */
    'UserName'?: string;
}
/**
 * ModifyCdHostServerGroupResponseData 结构
 * @export
 * @interface ModifyCdHostServerGroupResponseData
 */
export interface ModifyCdHostServerGroupResponseData {
    /**
     * 
     * @type {HostServerGroup}
     * @memberof ModifyCdHostServerGroupResponseData
     */
    'HostServerGroup'?: HostServerGroup;
}
/**
 * 
 * @export
 * @interface ModifyCdPipeline200Response
 */
export interface ModifyCdPipeline200Response {
    /**
     * 
     * @type {ModifyCdPipeline200ResponseResponse}
     * @memberof ModifyCdPipeline200Response
     */
    'Response'?: ModifyCdPipeline200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyCdPipeline200ResponseResponse
 */
export interface ModifyCdPipeline200ResponseResponse {
    /**
     * 
     * @type {ModifyCdPipelineResponseData}
     * @memberof ModifyCdPipeline200ResponseResponse
     */
    'Data'?: ModifyCdPipelineResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyCdPipeline200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCdPipelineRequest
 */
export interface ModifyCdPipelineRequest {
    /**
     * 部署流程 ID
     * @type {string}
     * @memberof ModifyCdPipelineRequest
     */
    'PipelineConfigId'?: string;
    /**
     * 部署流程 JSON 配置
     * @type {string}
     * @memberof ModifyCdPipelineRequest
     */
    'PipelineJsonContent'?: string;
}
/**
 * ModifyCdPipelineResponseData 结构
 * @export
 * @interface ModifyCdPipelineResponseData
 */
export interface ModifyCdPipelineResponseData {
    /**
     * 任务执行记录 ID
     * @type {string}
     * @memberof ModifyCdPipelineResponseData
     */
    'TaskExecutionId'?: string;
    /**
     * 任务执行记录引用
     * @type {string}
     * @memberof ModifyCdPipelineResponseData
     */
    'TaskExecutionRef'?: string;
}
/**
 * 
 * @export
 * @interface ModifyChooseDepotSpec200Response
 */
export interface ModifyChooseDepotSpec200Response {
    /**
     * 
     * @type {ModifyChooseDepotSpec200ResponseResponse}
     * @memberof ModifyChooseDepotSpec200Response
     */
    'Response'?: ModifyChooseDepotSpec200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyChooseDepotSpec200ResponseResponse
 */
export interface ModifyChooseDepotSpec200ResponseResponse {
    /**
     * 
     * @type {DepotSpecDetail}
     * @memberof ModifyChooseDepotSpec200ResponseResponse
     */
    'Detail'?: DepotSpecDetail;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyChooseDepotSpec200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyChooseDepotSpecRequest
 */
export interface ModifyChooseDepotSpecRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyChooseDepotSpecRequest
     */
    'DepotPath'?: string;
    /**
     * 选择的仓库规范名字（不使用仓库规范时，填空字符串）
     * @type {string}
     * @memberof ModifyChooseDepotSpecRequest
     */
    'DepotSpecName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCloseMRRequest
 */
export interface ModifyCloseMRRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyCloseMRRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyCloseMRRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求id
     * @type {number}
     * @memberof ModifyCloseMRRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyCodingCIAgentEnableRequest
 */
export interface ModifyCodingCIAgentEnableRequest {
    /**
     * 节点池 ID
     * @type {number}
     * @memberof ModifyCodingCIAgentEnableRequest
     */
    'PoolId'?: number;
    /**
     * 是否启用：启用true、禁用false
     * @type {boolean}
     * @memberof ModifyCodingCIAgentEnableRequest
     */
    'Enable'?: boolean;
    /**
     * 节点ID
     * @type {number}
     * @memberof ModifyCodingCIAgentEnableRequest
     */
    'Id'?: number;
}
/**
 * 
 * @export
 * @interface ModifyCodingCIJobRequest
 */
export interface ModifyCodingCIJobRequest {
    /**
     * 不管构建成功还是失败总是通知的用户
     * @type {Array<number>}
     * @memberof ModifyCodingCIJobRequest
     */
    'AlwaysUserIdList'?: Array<number>;
    /**
     * 自动取消相同 MR
     * @type {boolean}
     * @memberof ModifyCodingCIJobRequest
     */
    'AutoCancelSameMergeRequest'?: boolean;
    /**
     * 自动取消相同版本
     * @type {boolean}
     * @memberof ModifyCodingCIJobRequest
     */
    'AutoCancelSameRevision'?: boolean;
    /**
     * hookType 为 CUSTOME 时须指定
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'BranchRegex'?: string;
    /**
     * hookType 为 DEFAULT 时须指定
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'BranchSelector'?: string;
    /**
     * 仅构建失败时要通知的用户
     * @type {Array<number>}
     * @memberof ModifyCodingCIJobRequest
     */
    'BuildFailUserIdList'?: Array<number>;
    /**
     * 任务缓存目录配置
     * @type {Array<CodingCIJobCachePath>}
     * @memberof ModifyCodingCIJobRequest
     */
    'CachePathList'?: Array<CodingCIJobCachePath>;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyCodingCIJobRequest
     */
    'DepotId'?: number;
    /**
     * 仓库类型 CODING,TGIT,GITHUB,GITLAB,GITLAB_PRIVATE,GITEE,NONE
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'DepotType'?: string;
    /**
     * 环境变量配置
     * @type {Array<CodingCIJobEnv>}
     * @memberof ModifyCodingCIJobRequest
     */
    'EnvList'?: Array<CodingCIJobEnv>;
    /**
     * 执行方式 CVM | STATIC
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'ExecuteIn'?: string;
    /**
     * 自定义构建节点池 ID，ExecuteIn 为 AGENT 必填
     * @type {number}
     * @memberof ModifyCodingCIJobRequest
     */
    'ExecutedAgentPoolId'?: number;
    /**
     * 代码更新触发匹配规则
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'HookType'?: string;
    /**
     * 构建计划 ID
     * @type {number}
     * @memberof ModifyCodingCIJobRequest
     */
    'Id'?: number;
    /**
     * STATIC，SCM 从代码库读取
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'JenkinsFileFromType'?: string;
    /**
     * JenkinsFileFromType 为 SCM 必填
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'JenkinsFilePath'?: string;
    /**
     * JenkinsFileFromType 为 STATIC 必填
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'JenkinsFileStaticContent'?: string;
    /**
     * 构建计划来源 TKE TCB
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'JobFromType'?: string;
    /**
     * 构建计划名称
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'Name'?: string;
    /**
     * 项目 ID
     * @type {number}
     * @memberof ModifyCodingCIJobRequest
     */
    'ProjectId'?: number;
    /**
     * 针对 CRON triggerMethod 的 schedule 规则配置, 暂只用于添加
     * @type {Array<CodingCIJobSchedule>}
     * @memberof ModifyCodingCIJobRequest
     */
    'ScheduleList'?: Array<CodingCIJobSchedule>;
    /**
     * REF_CHANGE 代码更新触发      CRON = 1 定时触发      MR_CHANGE  MR变动触发  TKE 对接他们传空数组老是有问题，遂改成非必填
     * @type {Array<string>}
     * @memberof ModifyCodingCIJobRequest
     */
    'TriggerMethodList'?: Array<string>;
    /**
     * 构建结果通知触发者机制  ALWAYS -总是通知;  BUILD_FAIL -仅构建失败时通知;
     * @type {string}
     * @memberof ModifyCodingCIJobRequest
     */
    'TriggerRemind'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDefaultBranchRequest
 */
export interface ModifyDefaultBranchRequest {
    /**
     * 分支名
     * @type {string}
     * @memberof ModifyDefaultBranchRequest
     */
    'BranchName'?: string;
    /**
     * 仓库Id
     * @type {number}
     * @memberof ModifyDefaultBranchRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDefaultBranchRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDefectRelatedRequirementRequest
 */
export interface ModifyDefectRelatedRequirementRequest {
    /**
     * 缺陷 Code
     * @type {number}
     * @memberof ModifyDefectRelatedRequirementRequest
     */
    'DefectCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyDefectRelatedRequirementRequest
     */
    'ProjectName'?: string;
    /**
     * 需求 Code
     * @type {number}
     * @memberof ModifyDefectRelatedRequirementRequest
     */
    'RequirementCode'?: number;
}
/**
 * 
 * @export
 * @interface ModifyDepartment200Response
 */
export interface ModifyDepartment200Response {
    /**
     * 
     * @type {ModifyDepartment200ResponseResponse}
     * @memberof ModifyDepartment200Response
     */
    'Response'?: ModifyDepartment200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyDepartment200ResponseResponse
 */
export interface ModifyDepartment200ResponseResponse {
    /**
     * 
     * @type {DepartmentDepartmentData}
     * @memberof ModifyDepartment200ResponseResponse
     */
    'Department'?: DepartmentDepartmentData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyDepartment200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepartmentAssigneeRequest
 */
export interface ModifyDepartmentAssigneeRequest {
    /**
     * 部门ID
     * @type {number}
     * @memberof ModifyDepartmentAssigneeRequest
     */
    'DepartmentId'?: number;
    /**
     * 用户refIds 必填
     * @type {Array<number>}
     * @memberof ModifyDepartmentAssigneeRequest
     */
    'RefIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ModifyDepartmentMemberRequest
 */
export interface ModifyDepartmentMemberRequest {
    /**
     * 部门ID信息
     * @type {Array<number>}
     * @memberof ModifyDepartmentMemberRequest
     */
    'DepartmentIds'?: Array<number>;
    /**
     * 用户refIds
     * @type {Array<number>}
     * @memberof ModifyDepartmentMemberRequest
     */
    'RefIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ModifyDepartmentRequest
 */
export interface ModifyDepartmentRequest {
    /**
     * 部门ID
     * @type {number}
     * @memberof ModifyDepartmentRequest
     */
    'Id'?: number;
    /**
     * 部门名
     * @type {string}
     * @memberof ModifyDepartmentRequest
     */
    'Name'?: string;
    /**
     * 父级部门ID
     * @type {number}
     * @memberof ModifyDepartmentRequest
     */
    'ParentId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyDepotDescriptionRequest
 */
export interface ModifyDepotDescriptionRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyDepotDescriptionRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyDepotDescriptionRequest
     */
    'DepotPath'?: string;
    /**
     * 仓库描述信息
     * @type {string}
     * @memberof ModifyDepotDescriptionRequest
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotFilePushRule200Response
 */
export interface ModifyDepotFilePushRule200Response {
    /**
     * 
     * @type {ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse}
     * @memberof ModifyDepotFilePushRule200Response
     */
    'Response'?: ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyDepotFilePushRuleDenyPrivilege200Response
 */
export interface ModifyDepotFilePushRuleDenyPrivilege200Response {
    /**
     * 
     * @type {ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse}
     * @memberof ModifyDepotFilePushRuleDenyPrivilege200Response
     */
    'Response'?: ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse
 */
export interface ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse {
    /**
     * git 仓库文件推送规则列表
     * @type {Array<GitFilePushRule>}
     * @memberof ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse
     */
    'GitFilePushRule'?: Array<GitFilePushRule> | null;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyDepotFilePushRuleDenyPrivilege200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotFilePushRuleDenyPrivilegeRequest
 */
export interface ModifyDepotFilePushRuleDenyPrivilegeRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'DepotPath'?: string;
    /**
     * 文件推送规则 ID
     * @type {number}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'FilePushRuleId'?: number;
    /**
     * 拒绝推送
     * @type {boolean}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'IsDeny'?: boolean;
    /**
     * 特权者是角色（IsUser和IsRole有且只能有一个为true）
     * @type {boolean}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'IsRole'?: boolean;
    /**
     * 特权者是用户（IsUser和IsRole有且只能有一个为true）
     * @type {boolean}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'IsUser'?: boolean;
    /**
     * 角色 ID
     * @type {number}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'RoleId'?: number;
    /**
     * 用户全局 key
     * @type {string}
     * @memberof ModifyDepotFilePushRuleDenyPrivilegeRequest
     */
    'UserGlobalKey'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotFilePushRuleRequest
 */
export interface ModifyDepotFilePushRuleRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotFilePushRuleRequest
     */
    'DepotPath'?: string;
    /**
     * 文件推送规则 ID
     * @type {number}
     * @memberof ModifyDepotFilePushRuleRequest
     */
    'FilePushRuleId'?: number;
    /**
     * 拒绝所有人推送
     * @type {boolean}
     * @memberof ModifyDepotFilePushRuleRequest
     */
    'IsDenyForAllUser'?: boolean;
}
/**
 * 
 * @export
 * @interface ModifyDepotLevelDepotSpec200Response
 */
export interface ModifyDepotLevelDepotSpec200Response {
    /**
     * 
     * @type {ModifyChooseDepotSpec200ResponseResponse}
     * @memberof ModifyDepotLevelDepotSpec200Response
     */
    'Response'?: ModifyChooseDepotSpec200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyDepotLevelDepotSpecRequest
 */
export interface ModifyDepotLevelDepotSpecRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotLevelDepotSpecRequest
     */
    'DepotPath'?: string;
    /**
     * 
     * @type {DepotSpecDepotLevelParam}
     * @memberof ModifyDepotLevelDepotSpecRequest
     */
    'Param'?: DepotSpecDepotLevelParam;
}
/**
 * 
 * @export
 * @interface ModifyDepotName200Response
 */
export interface ModifyDepotName200Response {
    /**
     * 
     * @type {ModifyDepotName200ResponseResponse}
     * @memberof ModifyDepotName200Response
     */
    'Response'?: ModifyDepotName200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyDepotName200ResponseResponse
 */
export interface ModifyDepotName200ResponseResponse {
    /**
     * 
     * @type {DepotInfo}
     * @memberof ModifyDepotName200ResponseResponse
     */
    'DepotInfo'?: DepotInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyDepotName200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotNameRequest
 */
export interface ModifyDepotNameRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyDepotNameRequest
     */
    'DepotId'?: number;
    /**
     * 仓库名称
     * @type {string}
     * @memberof ModifyDepotNameRequest
     */
    'DepotName'?: string;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyDepotNameRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotPushSetting200Response
 */
export interface ModifyDepotPushSetting200Response {
    /**
     * 
     * @type {ModifyDepotPushSetting200ResponseResponse}
     * @memberof ModifyDepotPushSetting200Response
     */
    'Response'?: ModifyDepotPushSetting200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyDepotPushSetting200ResponseResponse
 */
export interface ModifyDepotPushSetting200ResponseResponse {
    /**
     * 
     * @type {DepotPushSetting}
     * @memberof ModifyDepotPushSetting200ResponseResponse
     */
    'Data'?: DepotPushSetting;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyDepotPushSetting200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotPushSettingRequest
 */
export interface ModifyDepotPushSettingRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotPushSettingRequest
     */
    'DepotPath'?: string;
    /**
     * 
     * @type {DepotPushSetting}
     * @memberof ModifyDepotPushSettingRequest
     */
    'Param'?: DepotPushSetting;
}
/**
 * 
 * @export
 * @interface ModifyDepotQuotaRequest
 */
export interface ModifyDepotQuotaRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotQuotaRequest
     */
    'DepotPath'?: string;
    /**
     * 仓库容量
     * @type {string}
     * @memberof ModifyDepotQuotaRequest
     */
    'DepotQuotaSize'?: string;
}
/**
 * 
 * @export
 * @interface ModifyDepotSettingsRequest
 */
export interface ModifyDepotSettingsRequest {
    /**
     * 仓库路径，
     * @type {string}
     * @memberof ModifyDepotSettingsRequest
     */
    'DepotPath'?: string;
    /**
     * 是否开启状态检查
     * @type {boolean}
     * @memberof ModifyDepotSettingsRequest
     */
    'DepotStatusCheckRequired'?: boolean;
}
/**
 * 
 * @export
 * @interface ModifyDepotSharedSettingRequest
 */
export interface ModifyDepotSharedSettingRequest {
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyDepotSharedSettingRequest
     */
    'DepotPath'?: string;
    /**
     * 仓库是否开源
     * @type {boolean}
     * @memberof ModifyDepotSharedSettingRequest
     */
    'IsShared'?: boolean;
}
/**
 * 
 * @export
 * @interface ModifyGitCherryPickRequest
 */
export interface ModifyGitCherryPickRequest {
    /**
     * 分支名称
     * @type {string}
     * @memberof ModifyGitCherryPickRequest
     */
    'BranchName'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitCherryPickRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyGitCherryPickRequest
     */
    'DepotPath'?: string;
    /**
     * 提交 ID
     * @type {string}
     * @memberof ModifyGitCherryPickRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitCommitRevertRequest
 */
export interface ModifyGitCommitRevertRequest {
    /**
     * 分支名
     * @type {string}
     * @memberof ModifyGitCommitRevertRequest
     */
    'BranchName'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitCommitRevertRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyGitCommitRevertRequest
     */
    'DepotPath'?: string;
    /**
     * 提交描述
     * @type {string}
     * @memberof ModifyGitCommitRevertRequest
     */
    'Message'?: string;
    /**
     * 欲还原的提交 ID
     * @type {string}
     * @memberof ModifyGitCommitRevertRequest
     */
    'Sha'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitCommitStatusRequest
 */
export interface ModifyGitCommitStatusRequest {
    /**
     * 提交id
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'CommitSha'?: string;
    /**
     * 流水线文本内容
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'Context'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyGitCommitStatusRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'DepotPath'?: string;
    /**
     * 流水线状态描述
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'Description'?: string;
    /**
     * 提交状态
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'State'?: string;
    /**
     * 流水线链接地址
     * @type {string}
     * @memberof ModifyGitCommitStatusRequest
     */
    'TargetURL'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitDepotArchiveRequest
 */
export interface ModifyGitDepotArchiveRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitDepotArchiveRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyGitDepotArchiveRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitDepotUnarchiveRequest
 */
export interface ModifyGitDepotUnarchiveRequest {
    /**
     * 仓库id
     * @type {string}
     * @memberof ModifyGitDepotUnarchiveRequest
     */
    'DepotId'?: string;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyGitDepotUnarchiveRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitFiles200Response
 */
export interface ModifyGitFiles200Response {
    /**
     * 
     * @type {ModifyGitFiles200ResponseResponse}
     * @memberof ModifyGitFiles200Response
     */
    'Response'?: ModifyGitFiles200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyGitFiles200ResponseResponse
 */
export interface ModifyGitFiles200ResponseResponse {
    /**
     * 
     * @type {GitCommit}
     * @memberof ModifyGitFiles200ResponseResponse
     */
    'GitCommit'?: GitCommit;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyGitFiles200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitFilesRequest
 */
export interface ModifyGitFilesRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitFilesRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyGitFilesRequest
     */
    'DepotPath'?: string;
    /**
     * 修改的文件
     * @type {Array<GitFile>}
     * @memberof ModifyGitFilesRequest
     */
    'GitFiles'?: Array<GitFile>;
    /**
     * 最后次提交 Sha
     * @type {string}
     * @memberof ModifyGitFilesRequest
     */
    'LastCommitSha'?: string;
    /**
     * 提交文本
     * @type {string}
     * @memberof ModifyGitFilesRequest
     */
    'Message'?: string;
    /**
     * 要提交的新分支
     * @type {string}
     * @memberof ModifyGitFilesRequest
     */
    'NewRef'?: string;
    /**
     * 基于改动的分支
     * @type {string}
     * @memberof ModifyGitFilesRequest
     */
    'Ref'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitMergeBranch200Response
 */
export interface ModifyGitMergeBranch200Response {
    /**
     * 
     * @type {ModifyGitMergeBranch200ResponseResponse}
     * @memberof ModifyGitMergeBranch200Response
     */
    'Response'?: ModifyGitMergeBranch200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyGitMergeBranch200ResponseResponse
 */
export interface ModifyGitMergeBranch200ResponseResponse {
    /**
     * 
     * @type {ModifyGitMergeBranchData}
     * @memberof ModifyGitMergeBranch200ResponseResponse
     */
    'Data'?: ModifyGitMergeBranchData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyGitMergeBranch200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 合并请求数据
 * @export
 * @interface ModifyGitMergeBranchData
 */
export interface ModifyGitMergeBranchData {
    /**
     * 
     * @type {GitCommit}
     * @memberof ModifyGitMergeBranchData
     */
    'MergeCommit'?: GitCommit;
    /**
     * 合并状态 MERGED 合并成功 FAILED 合并失败，异常原因 NOT_MERGEABLE 不可合并，有代码冲突 ALREADY_MERGED 两个分支已经合并，两个分支是一样的或者目标分支的已经合并进当前分支了
     * @type {string}
     * @memberof ModifyGitMergeBranchData
     */
    'MergeStatus'?: string | null;
}
/**
 * 
 * @export
 * @interface ModifyGitMergeBranchRequest
 */
export interface ModifyGitMergeBranchRequest {
    /**
     * 提交信息
     * @type {string}
     * @memberof ModifyGitMergeBranchRequest
     */
    'CommitMessage'?: string;
    /**
     * 仓库路径或仓库ID
     * @type {string}
     * @memberof ModifyGitMergeBranchRequest
     */
    'DepotPath'?: string;
    /**
     * 源分支
     * @type {string}
     * @memberof ModifyGitMergeBranchRequest
     */
    'FromBranch'?: string;
    /**
     * 目标分支
     * @type {string}
     * @memberof ModifyGitMergeBranchRequest
     */
    'ToBranch'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitMergeRequest200Response
 */
export interface ModifyGitMergeRequest200Response {
    /**
     * 
     * @type {ModifyMergeMR200ResponseResponse}
     * @memberof ModifyGitMergeRequest200Response
     */
    'Response'?: ModifyMergeMR200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyGitMergeRequestRebaseRequest
 */
export interface ModifyGitMergeRequestRebaseRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitMergeRequestRebaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyGitMergeRequestRebaseRequest
     */
    'DepotPat'?: string;
    /**
     * 合并请求 资源ID
     * @type {number}
     * @memberof ModifyGitMergeRequestRebaseRequest
     */
    'MergeId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyGitMergeRequestRequest
 */
export interface ModifyGitMergeRequestRequest {
    /**
     * 待修改的合并请求描述
     * @type {string}
     * @memberof ModifyGitMergeRequestRequest
     */
    'Content'?: string;
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitMergeRequestRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyGitMergeRequestRequest
     */
    'DepotPath'?: string;
    /**
     * 合并请求 IID
     * @type {number}
     * @memberof ModifyGitMergeRequestRequest
     */
    'MergeId'?: number;
    /**
     * 待修改的合并请求标题
     * @type {string}
     * @memberof ModifyGitMergeRequestRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitRebaseRequest
 */
export interface ModifyGitRebaseRequest {
    /**
     * 基础分支名字
     * @type {string}
     * @memberof ModifyGitRebaseRequest
     */
    'BaseBranchName'?: string;
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyGitRebaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyGitRebaseRequest
     */
    'DepotPath'?: string;
    /**
     * 源分支名字
     * @type {string}
     * @memberof ModifyGitRebaseRequest
     */
    'SrcBranchName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitReleaseRequest
 */
export interface ModifyGitReleaseRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyGitReleaseRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyGitReleaseRequest
     */
    'DepotPath'?: string;
    /**
     * 描述
     * @type {string}
     * @memberof ModifyGitReleaseRequest
     */
    'Description'?: string;
    /**
     * 是否预发布
     * @type {boolean}
     * @memberof ModifyGitReleaseRequest
     */
    'Pre'?: boolean;
    /**
     * 项目下仓库版本唯一标识符
     * @type {number}
     * @memberof ModifyGitReleaseRequest
     */
    'ReleaseId'?: number;
    /**
     * 标签名称
     * @type {string}
     * @memberof ModifyGitReleaseRequest
     */
    'TagName'?: string;
    /**
     * 标题
     * @type {string}
     * @memberof ModifyGitReleaseRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitTransfer200Response
 */
export interface ModifyGitTransfer200Response {
    /**
     * 
     * @type {ModifyGitTransfer200ResponseResponse}
     * @memberof ModifyGitTransfer200Response
     */
    'Response'?: ModifyGitTransfer200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyGitTransfer200ResponseResponse
 */
export interface ModifyGitTransfer200ResponseResponse {
    /**
     * 转移后 web 页面的访问路径(不包含域名)
     * @type {string}
     * @memberof ModifyGitTransfer200ResponseResponse
     */
    'NewDepotPath'?: string | null;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyGitTransfer200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyGitTransferRequest
 */
export interface ModifyGitTransferRequest {
    /**
     * 仓库 ID
     * @type {number}
     * @memberof ModifyGitTransferRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，与仓库ID二选一
     * @type {string}
     * @memberof ModifyGitTransferRequest
     */
    'DepotPath'?: string;
    /**
     * 目标项目 ID
     * @type {number}
     * @memberof ModifyGitTransferRequest
     */
    'TargetProjectId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyIssue200Response
 */
export interface ModifyIssue200Response {
    /**
     * 
     * @type {ModifyIssue200ResponseResponse}
     * @memberof ModifyIssue200Response
     */
    'Response'?: ModifyIssue200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyIssue200ResponseResponse
 */
export interface ModifyIssue200ResponseResponse {
    /**
     * 
     * @type {IssueDetail}
     * @memberof ModifyIssue200ResponseResponse
     */
    'Issue'?: IssueDetail;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyIssue200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIssueCommentRequest
 */
export interface ModifyIssueCommentRequest {
    /**
     * 评论 ID
     * @type {number}
     * @memberof ModifyIssueCommentRequest
     */
    'CommentId'?: number;
    /**
     * 评论内容
     * @type {string}
     * @memberof ModifyIssueCommentRequest
     */
    'Content'?: string;
    /**
     * 事项 Code
     * @type {number}
     * @memberof ModifyIssueCommentRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyIssueCommentRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIssueDescriptionRequest
 */
export interface ModifyIssueDescriptionRequest {
    /**
     * 事项描述
     * @type {string}
     * @memberof ModifyIssueDescriptionRequest
     */
    'Description'?: string;
    /**
     * 事项 Code
     * @type {number}
     * @memberof ModifyIssueDescriptionRequest
     */
    'IssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyIssueDescriptionRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIssueParentRequirementRequest
 */
export interface ModifyIssueParentRequirementRequest {
    /**
     * 事项 Code
     * @type {number}
     * @memberof ModifyIssueParentRequirementRequest
     */
    'IssueCode'?: number;
    /**
     * 父事项 Code
     * @type {number}
     * @memberof ModifyIssueParentRequirementRequest
     */
    'ParentIssueCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyIssueParentRequirementRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIssueRequest
 */
export interface ModifyIssueRequest {
    /**
     * 处理人 Id
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'AssigneeId'?: number;
    /**
     * 评论
     * @type {string}
     * @memberof ModifyIssueRequest
     */
    'Comment'?: string;
    /**
     * 自定义属性值列表
     * @type {Array<IssueCustomFieldForm>}
     * @memberof ModifyIssueRequest
     */
    'CustomFieldValues'?: Array<IssueCustomFieldForm>;
    /**
     * 缺陷类型 Id
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'DefectTypeId'?: number;
    /**
     * 删除的文件 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'DelFileIds'?: Array<number>;
    /**
     * 删除的标签 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'DelLabelIds'?: Array<number>;
    /**
     * 需要删除的版本jcode列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'DelReleaseCodes'?: Array<number>;
    /**
     * 删除的事项关注人 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'DelWatcherIds'?: Array<number>;
    /**
     * 截止日期，格式：2021-01-01
     * @type {object}
     * @memberof ModifyIssueRequest
     */
    'DueDate'?: object;
    /**
     * 添加的文件 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'FileIds'?: Array<number>;
    /**
     * 事项 Code
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'IssueCode'?: number;
    /**
     * 迭代code
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'IterationCode'?: number;
    /**
     * 标签 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'LabelIds'?: Array<number>;
    /**
     * 事项名称
     * @type {string}
     * @memberof ModifyIssueRequest
     */
    'Name'?: string;
    /**
     * 父事项 Code  敏捷模式：Type 为 SUB_TASK 时必须指定  经典模式：Type 为 MISSION、REQUIREMENT 时可指定
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'ParentCode'?: number;
    /**
     * 紧急程度  \"0\" - 低  \"1\" - 中  \"2\" - 高  \"3\" - 紧急
     * @type {string}
     * @memberof ModifyIssueRequest
     */
    'Priority'?: string;
    /**
     * 进度
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'Progress'?: number;
    /**
     * 项目模块 Id
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'ProjectModuleId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyIssueRequest
     */
    'ProjectName'?: string;
    /**
     * 
     * @type {IssueRecordHourForm}
     * @memberof ModifyIssueRequest
     */
    'RecordHour'?: IssueRecordHourForm;
    /**
     * 版本code列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'ReleaseCodes'?: Array<number>;
    /**
     * 需求类型 Id
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'RequirementTypeId'?: number;
    /**
     * 开始日期，格式：2021-01-01
     * @type {object}
     * @memberof ModifyIssueRequest
     */
    'StartDate'?: object;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'StatusId'?: number;
    /**
     * 故事点，例如：0.5、1
     * @type {string}
     * @memberof ModifyIssueRequest
     */
    'StoryPoint'?: string;
    /**
     * 标签 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'UpdateLabelIds'?: Array<number>;
    /**
     * 关注人 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'UpdateWatchers'?: Array<number>;
    /**
     * 添加的事项关注人 Id 列表
     * @type {Array<number>}
     * @memberof ModifyIssueRequest
     */
    'WatcherIds'?: Array<number>;
    /**
     * 工时（小时数）
     * @type {number}
     * @memberof ModifyIssueRequest
     */
    'WorkingHours'?: number;
}
/**
 * 
 * @export
 * @interface ModifyIteration200Response
 */
export interface ModifyIteration200Response {
    /**
     * 
     * @type {ModifyIteration200ResponseResponse}
     * @memberof ModifyIteration200Response
     */
    'Response'?: ModifyIteration200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyIteration200ResponseResponse
 */
export interface ModifyIteration200ResponseResponse {
    /**
     * 
     * @type {Iteration}
     * @memberof ModifyIteration200ResponseResponse
     */
    'Iteration'?: Iteration;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyIteration200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIterationRequest
 */
export interface ModifyIterationRequest {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof ModifyIterationRequest
     */
    'Assignee'?: number;
    /**
     * 结束时间，格式：2020-01-01
     * @type {object}
     * @memberof ModifyIterationRequest
     */
    'EndAt'?: object;
    /**
     * 目标
     * @type {string}
     * @memberof ModifyIterationRequest
     */
    'Goal'?: string;
    /**
     * 迭代编号
     * @type {number}
     * @memberof ModifyIterationRequest
     */
    'IterationCode'?: number;
    /**
     * 标题
     * @type {string}
     * @memberof ModifyIterationRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyIterationRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间，格式：2020-01-01
     * @type {object}
     * @memberof ModifyIterationRequest
     */
    'StartAt'?: object;
}
/**
 * 
 * @export
 * @interface ModifyIterationStatus200Response
 */
export interface ModifyIterationStatus200Response {
    /**
     * 
     * @type {ModifyIterationStatus200ResponseResponse}
     * @memberof ModifyIterationStatus200Response
     */
    'Response'?: ModifyIterationStatus200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyIterationStatus200ResponseResponse
 */
export interface ModifyIterationStatus200ResponseResponse {
    /**
     * 
     * @type {OpenApiIteration}
     * @memberof ModifyIterationStatus200ResponseResponse
     */
    'Iteration'?: OpenApiIteration;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyIterationStatus200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyIterationStatusRequest
 */
export interface ModifyIterationStatusRequest {
    /**
     * 结束时间，完成迭代必需，格式：2020-01-01
     * @type {string}
     * @memberof ModifyIterationStatusRequest
     */
    'EndAt'?: string;
    /**
     * 迭代编号
     * @type {number}
     * @memberof ModifyIterationStatusRequest
     */
    'IterationCode'?: number;
    /**
     * 移入迭代编号
     * @type {number}
     * @memberof ModifyIterationStatusRequest
     */
    'JoinIterationCode'?: number;
    /**
     * 迭代状态操作，类型：start：开始迭代、complete：完成迭代、restart：重新打开
     * @type {string}
     * @memberof ModifyIterationStatusRequest
     */
    'Operator'?: string;
    /**
     * 项目描述
     * @type {string}
     * @memberof ModifyIterationStatusRequest
     */
    'ProjectName'?: string;
    /**
     * 开始时间，开始迭代必需，格式：2020-01-01
     * @type {string}
     * @memberof ModifyIterationStatusRequest
     */
    'StartAt'?: string;
}
/**
 * 
 * @export
 * @interface ModifyMergeMR200Response
 */
export interface ModifyMergeMR200Response {
    /**
     * 
     * @type {ModifyMergeMR200ResponseResponse}
     * @memberof ModifyMergeMR200Response
     */
    'Response'?: ModifyMergeMR200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyMergeMR200ResponseResponse
 */
export interface ModifyMergeMR200ResponseResponse {
    /**
     * 
     * @type {MergeRequestInfo}
     * @memberof ModifyMergeMR200ResponseResponse
     */
    'MergeRequestInfo'?: MergeRequestInfo;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyMergeMR200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyMergeMRRequest
 */
export interface ModifyMergeMRRequest {
    /**
     * 仓库id
     * @type {number}
     * @memberof ModifyMergeMRRequest
     */
    'DepotId'?: number;
    /**
     * 仓库路径，DepotId与DepotPath二选一即可
     * @type {string}
     * @memberof ModifyMergeMRRequest
     */
    'DepotPath'?: string;
    /**
     * 是否删除源分支
     * @type {boolean}
     * @memberof ModifyMergeMRRequest
     */
    'IsDelSourceBranch'?: boolean;
    /**
     * 是否 Fast Forward 模式
     * @type {boolean}
     * @memberof ModifyMergeMRRequest
     */
    'IsFastForward'?: boolean;
    /**
     * 合并请求id
     * @type {number}
     * @memberof ModifyMergeMRRequest
     */
    'MergeId'?: number;
    /**
     * 合并信息
     * @type {string}
     * @memberof ModifyMergeMRRequest
     */
    'Message'?: string;
    /**
     * 是否需要对mr进行 Squash
     * @type {boolean}
     * @memberof ModifyMergeMRRequest
     */
    'Squash'?: boolean;
}
/**
 * 
 * @export
 * @interface ModifyMergeRequestBasicSettingsRequest
 */
export interface ModifyMergeRequestBasicSettingsRequest {
    /**
     * 合并请求源分支有新提交时是否自动取消合并授权
     * @type {boolean}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'CancelMrGrantAfterPushSrc'?: boolean;
    /**
     * 是否默认以 Fast-Forward 模式合并
     * @type {boolean}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'DefaultFastForwardMerge'?: boolean;
    /**
     * 合并请求默认分支
     * @type {string}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'DefaultTargetBranch'?: string;
    /**
     * 是否默认删除源分支
     * @type {boolean}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'DeleteSrcBranchAfterMerged'?: boolean;
    /**
     * 仓库路径，格式：<team>/<project>/<depot>
     * @type {string}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'DepotPath'?: string;
    /**
     * 是否开启状态检查
     * @type {boolean}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'DepotStatusCheckRequired'?: boolean;
    /**
     * 合并前是否必须获得所有评审者的允许合并
     * @type {boolean}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'MrCheckAllReviewersAllow'?: boolean;
    /**
     * 合并请求选择方式no_squash:默认直接合并default_squash:默认Squash合并 force_squash:只能Squash合并
     * @type {string}
     * @memberof ModifyMergeRequestBasicSettingsRequest
     */
    'SquashOnMerge'?: string;
}
/**
 * 
 * @export
 * @interface ModifyMergeRequestSquashCommitMessageTemplateRequest
 */
export interface ModifyMergeRequestSquashCommitMessageTemplateRequest {
    /**
     * 合并请求合并提交消息模版
     * @type {string}
     * @memberof ModifyMergeRequestSquashCommitMessageTemplateRequest
     */
    'CommitMessageTemplate'?: string;
    /**
     * 仓库路径
     * @type {string}
     * @memberof ModifyMergeRequestSquashCommitMessageTemplateRequest
     */
    'DepotPath'?: string;
}
/**
 * 
 * @export
 * @interface ModifyPolicy200Response
 */
export interface ModifyPolicy200Response {
    /**
     * 
     * @type {ModifyPolicy200ResponseResponse}
     * @memberof ModifyPolicy200Response
     */
    'Response'?: ModifyPolicy200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyPolicy200ResponseResponse
 */
export interface ModifyPolicy200ResponseResponse {
    /**
     * 权限组 ID
     * @type {number}
     * @memberof ModifyPolicy200ResponseResponse
     */
    'PolicyId'?: number;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyPolicy200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyPolicyRequest
 */
export interface ModifyPolicyRequest {
    /**
     * 显示名称
     * @type {string}
     * @memberof ModifyPolicyRequest
     */
    'Alias'?: string;
    /**
     * 描述
     * @type {string}
     * @memberof ModifyPolicyRequest
     */
    'Description'?: string;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof ModifyPolicyRequest
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof ModifyPolicyRequest
     */
    'Name'?: string;
    /**
     * 
     * @type {PolicyDocument}
     * @memberof ModifyPolicyRequest
     */
    'PolicyDocument'?: PolicyDocument;
    /**
     * 适用的资源类型
     * @type {Array<string>}
     * @memberof ModifyPolicyRequest
     */
    'ResourceType'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ModifyProjectAnnouncement200Response
 */
export interface ModifyProjectAnnouncement200Response {
    /**
     * 
     * @type {CreateProjectAnnouncement200ResponseResponse}
     * @memberof ModifyProjectAnnouncement200Response
     */
    'Response'?: CreateProjectAnnouncement200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyProjectAnnouncementRequest
 */
export interface ModifyProjectAnnouncementRequest {
    /**
     * 项目名
     * @type {string}
     * @memberof ModifyProjectAnnouncementRequest
     */
    'ProjectName'?: string;
    /**
     * 公告内容
     * @type {string}
     * @memberof ModifyProjectAnnouncementRequest
     */
    'Content'?: string;
    /**
     * 公告id
     * @type {number}
     * @memberof ModifyProjectAnnouncementRequest
     */
    'Id'?: number;
}
/**
 * 
 * @export
 * @interface ModifyProjectLabel200Response
 */
export interface ModifyProjectLabel200Response {
    /**
     * 
     * @type {ModifyProjectLabel200ResponseResponse}
     * @memberof ModifyProjectLabel200Response
     */
    'Response'?: ModifyProjectLabel200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyProjectLabel200ResponseResponse
 */
export interface ModifyProjectLabel200ResponseResponse {
    /**
     * 
     * @type {ProjectLabelLabels}
     * @memberof ModifyProjectLabel200ResponseResponse
     */
    'Label'?: ProjectLabelLabels;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyProjectLabel200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyProjectLabelRequest
 */
export interface ModifyProjectLabelRequest {
    /**
     * 项目ID
     * @type {number}
     * @memberof ModifyProjectLabelRequest
     */
    'ProjectId'?: number;
    /**
     * 标签Id
     * @type {number}
     * @memberof ModifyProjectLabelRequest
     */
    'LabelId'?: number;
    /**
     * 标签名
     * @type {string}
     * @memberof ModifyProjectLabelRequest
     */
    'Name'?: string;
    /**
     * 颜色
     * @type {string}
     * @memberof ModifyProjectLabelRequest
     */
    'Color'?: string;
}
/**
 * 
 * @export
 * @interface ModifyProjectRequest
 */
export interface ModifyProjectRequest {
    /**
     * 项目描述
     * @type {string}
     * @memberof ModifyProjectRequest
     */
    'Description'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyProjectRequest
     */
    'DisplayName'?: string;
    /**
     * 结束时间
     * @type {string}
     * @memberof ModifyProjectRequest
     */
    'EndDate'?: string;
    /**
     * 项目标识
     * @type {string}
     * @memberof ModifyProjectRequest
     */
    'Name'?: string;
    /**
     * 项目编号
     * @type {number}
     * @memberof ModifyProjectRequest
     */
    'ProjectId'?: number;
    /**
     * 开始时间
     * @type {string}
     * @memberof ModifyProjectRequest
     */
    'StartDate'?: string;
}
/**
 * 
 * @export
 * @interface ModifyRelease200Response
 */
export interface ModifyRelease200Response {
    /**
     * 
     * @type {ModifyRelease200ResponseResponse}
     * @memberof ModifyRelease200Response
     */
    'Response'?: ModifyRelease200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyRelease200ResponseResponse
 */
export interface ModifyRelease200ResponseResponse {
    /**
     * 
     * @type {OpenApiRelease}
     * @memberof ModifyRelease200ResponseResponse
     */
    'Release'?: OpenApiRelease;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyRelease200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyReleaseRequest
 */
export interface ModifyReleaseRequest {
    /**
     * 修改之后的处理人ID
     * @type {number}
     * @memberof ModifyReleaseRequest
     */
    'Assignee'?: number;
    /**
     * 需要删除的版本已关联的迭代的列表
     * @type {Array<number>}
     * @memberof ModifyReleaseRequest
     */
    'DelIterationCodes'?: Array<number>;
    /**
     * 需要删除的标签的ID列表
     * @type {Array<number>}
     * @memberof ModifyReleaseRequest
     */
    'DelLabelIds'?: Array<number>;
    /**
     * 修改之后的版本描述
     * @type {string}
     * @memberof ModifyReleaseRequest
     */
    'Description'?: string;
    /**
     * 版本关联的迭代code列表
     * @type {Array<number>}
     * @memberof ModifyReleaseRequest
     */
    'IterationCodes'?: Array<number>;
    /**
     * 需要添加的标签的ID列表
     * @type {Array<number>}
     * @memberof ModifyReleaseRequest
     */
    'LabelIds'?: Array<number>;
    /**
     * 修改之后的版本名
     * @type {string}
     * @memberof ModifyReleaseRequest
     */
    'Name'?: string;
    /**
     * 项目名称 
     * @type {string}
     * @memberof ModifyReleaseRequest
     */
    'ProjectName'?: string;
    /**
     * 页面上版本ID
     * @type {number}
     * @memberof ModifyReleaseRequest
     */
    'ReleaseCode'?: number;
    /**
     * 修改之后的版本发布日期
     * @type {string}
     * @memberof ModifyReleaseRequest
     */
    'ReleaseDate'?: string;
    /**
     * 修改之后的版本开始日期
     * @type {string}
     * @memberof ModifyReleaseRequest
     */
    'StartDate'?: string;
    /**
     * 修改之后的状态ID
     * @type {number}
     * @memberof ModifyReleaseRequest
     */
    'StatusId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyServiceHook200Response
 */
export interface ModifyServiceHook200Response {
    /**
     * 
     * @type {ModifyServiceHook200ResponseResponse}
     * @memberof ModifyServiceHook200Response
     */
    'Response'?: ModifyServiceHook200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyServiceHook200ResponseResponse
 */
export interface ModifyServiceHook200ResponseResponse {
    /**
     * 
     * @type {ServiceHook}
     * @memberof ModifyServiceHook200ResponseResponse
     */
    'ServiceHook'?: ServiceHook;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyServiceHook200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyServiceHookRequest
 */
export interface ModifyServiceHookRequest {
    /**
     * 发送方式属性
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'ActionProperty'?: string;
    /**
     * 事件开关
     * @type {boolean}
     * @memberof ModifyServiceHookRequest
     */
    'Enabled'?: boolean;
    /**
     * 事件名，取值范围：ITERATION_CREATED,ITERATION_DELETED,ITERATION_UPDATED,ISSUE_CREATED,ISSUE_DELETED,ISSUE_COMMENT_CREATED,ISSUE_STATUS_UPDATED,ISSUE_ASSIGNEE_CHANGED,ISSUE_ITERATION_CHANGED,ISSUE_RELATIONSHIP_CHANGED,ISSUE_UPDATED,GIT_PUSHED,GIT_MR_CREATED,GIT_MR_UPDATED,GIT_MR_MERGED,GIT_MR_CLOSED,ARTIFACTS_VERSION_CREATED,ARTIFACTS_VERSION_UPDATED,ARTIFACTS_VERSION_DOWNLOADED,ARTIFACTS_VERSION_DELETED,ARTIFACTS_VERSION_RELEASED,ARTIFACTS_VERSION_DOWNLOAD_FORBIDDEN,ARTIFACTS_VERSION_DOWNLOAD_ALLOWED,ARTIFACTS_VERSION_DOWNLOAD_BLOCKED,ARTIFACTS_REPO_CREATED,ARTIFACTS_REPO_UPDATED,ARTIFACTS_REPO_DELETED,CI_JOB_CREATED,CI_JOB_UPDATED,CI_JOB_DELETED,CI_JOB_STARTED,CI_JOB_FINISHED,FILE_CREATED,FILE_UPDATED,FILE_RENAMED,FILE_SHARE_UPDATED,FILE_MOVED,FILE_COPIED,FILE_MOVED_TO_RECYCLE_BIN,FILE_RESTORED_FROM_RECYCLE_BIN,FILE_DELETED,WIKI_CREATED,WIKI_UPDATED,WIKI_MOVED,WIKI_SHARE_UPDATED,WIKI_ACCESS_UPDATED,WIKI_COPIED,WIKI_MOVED_TO_RECYCLE_BIN,WIKI_RESTORED_FROM_RECYCLE_BIN,WIKI_DELETED,MEMBER_CREATED,MEMBER_DELETED,MEMBER_ROLE_UPDATED,TEST_PLAN_CREATED, TEST_PLAN_UPDATED, TEST_PLAN_FINISHED, TEST_TASK_ASSIGNED, TEST_REPORT_CREATED, FLEXIBLE_TESTX_REVIEW_CREATED, FLEXIBLE_TESTX_REVIEW_COMMENTED, FLEXIBLE_TESTX_REVIEW_UPDATED, FLEXIBLE_TESTX_REVIEW_COMPLETED, FLEXIBLE_TESTX_PLAN_CREATED, FLEXIBLE_TESTX_PLAN_TASK_ASSIGNED, FLEXIBLE_TESTX_PLAN_UPDATED, FLEXIBLE_TESTX_PLAN_FINISHED, FLEXIBLE_TESTX_REPORT_CREATED, CODE_DOG_CREATE_JOB, CODE_DOG_RESULT_NOTIFY, PLAN_CREATED, PLAN_DELETED, PLAN_COMMENT_CREATED, PLAN_STATUE_CHANGED, PLAN_ASSIGNEE_CHANGED, PLAN_UPDATED, RISK_CREATED, RISK_DELETED, RISK_COMMENT_CREATED, RISK_STATUS_CHANGED, RISK_ASSIGNEE_CHANGED, RISK_UPDATED
     * @type {Array<string>}
     * @memberof ModifyServiceHookRequest
     */
    'Event'?: ModifyServiceHookRequestEventEnum;
    /**
     * 过滤器属性
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'FilterProperty'?: string;
    /**
     * Service Hook 编号
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'Id'?: string;
    /**
     * 备注名
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'Name'?: string;
    /**
     * 项目编号或者研发空间编号
     * @type {number}
     * @memberof ModifyServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 服务名，取值范围：WebHook、WeCom、DingDing、Jenkins、FeiShu。
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'Service'?: ModifyServiceHookRequestServiceEnum;
    /**
     * 发送方式，取值范围：dingding_group_chat_robot,wecom_group_chat_robot,jenkins_generic_build_job,feishu_group_chat_robot,webhook_http_post,webhook_http_get
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'ServiceAction'?: ModifyServiceHookRequestServiceActionEnum;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof ModifyServiceHookRequest
     */
    'TargetType'?: ModifyServiceHookRequestTargetTypeEnum;
}

export const ModifyServiceHookRequestEventEnum = {
} as const;

export type ModifyServiceHookRequestEventEnum = typeof ModifyServiceHookRequestEventEnum[keyof typeof ModifyServiceHookRequestEventEnum];
export const ModifyServiceHookRequestServiceEnum = {
    WebHook: 'WebHook',
    WeCom: 'WeCom',
    DingDing: 'DingDing',
    Jenkins: 'Jenkins',
    FeiShu: 'FeiShu'
} as const;

export type ModifyServiceHookRequestServiceEnum = typeof ModifyServiceHookRequestServiceEnum[keyof typeof ModifyServiceHookRequestServiceEnum];
export const ModifyServiceHookRequestServiceActionEnum = {
    DingdingGroupChatRobot: 'dingding_group_chat_robot',
    WecomGroupChatRobot: 'wecom_group_chat_robot',
    JenkinsGenericBuildJob: 'jenkins_generic_build_job',
    FeishuGroupChatRobot: 'feishu_group_chat_robot',
    WebhookHttpPost: 'webhook_http_post',
    WebhookHttpGet: 'webhook_http_get'
} as const;

export type ModifyServiceHookRequestServiceActionEnum = typeof ModifyServiceHookRequestServiceActionEnum[keyof typeof ModifyServiceHookRequestServiceActionEnum];
export const ModifyServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type ModifyServiceHookRequestTargetTypeEnum = typeof ModifyServiceHookRequestTargetTypeEnum[keyof typeof ModifyServiceHookRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface ModifyTeamLevelDepotSpec200Response
 */
export interface ModifyTeamLevelDepotSpec200Response {
    /**
     * 
     * @type {ModifyChooseDepotSpec200ResponseResponse}
     * @memberof ModifyTeamLevelDepotSpec200Response
     */
    'Response'?: ModifyChooseDepotSpec200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyTeamLevelDepotSpecRequest
 */
export interface ModifyTeamLevelDepotSpecRequest {
    /**
     * 
     * @type {DepotSpecTeamLevelParam}
     * @memberof ModifyTeamLevelDepotSpecRequest
     */
    'Param'?: DepotSpecTeamLevelParam;
}
/**
 * 
 * @export
 * @interface ModifyTeamMemberUnlockedRequest
 */
export interface ModifyTeamMemberUnlockedRequest {
    /**
     * 用户Id
     * @type {number}
     * @memberof ModifyTeamMemberUnlockedRequest
     */
    'UserId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyTestCase200Response
 */
export interface ModifyTestCase200Response {
    /**
     * 
     * @type {ModifyTestCase200ResponseResponse}
     * @memberof ModifyTestCase200Response
     */
    'Response'?: ModifyTestCase200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyTestCase200ResponseResponse
 */
export interface ModifyTestCase200ResponseResponse {
    /**
     * 
     * @type {CaseData}
     * @memberof ModifyTestCase200ResponseResponse
     */
    'Data'?: CaseData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyTestCase200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyTestCaseRequest
 */
export interface ModifyTestCaseRequest {
    /**
     * 附件 ID 数组：来自“生成附件预上传信息”接口
     * @type {Array<number>}
     * @memberof ModifyTestCaseRequest
     */
    'AttachmentIds'?: Array<number>;
    /**
     * 用例 ID
     * @type {number}
     * @memberof ModifyTestCaseRequest
     */
    'CaseId'?: number;
    /**
     * 自定义步骤（步骤用例必填）
     * @type {Array<CustomStep>}
     * @memberof ModifyTestCaseRequest
     */
    'CustomSteps'?: Array<CustomStep>;
    /**
     * 预期结果（适用于文本用例）
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'Expected'?: string;
    /**
     * 前置步骤
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'Preconds'?: string;
    /**
     * 优先级，默认2（中），可选值：0（紧急）,1（高）,2（中）,3（低）
     * @type {number}
     * @memberof ModifyTestCaseRequest
     */
    'Priority'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'ProjectName'?: string;
    /**
     * 分组ID
     * @type {number}
     * @memberof ModifyTestCaseRequest
     */
    'SectionId'?: number;
    /**
     * 文本描述（适用于文本用例）
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'Steps'?: string;
    /**
     * 用例类型，可选值：STEPS(步骤用例)，TEXT(文本用例)
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'TemplateType'?: string;
    /**
     * 用例标题
     * @type {string}
     * @memberof ModifyTestCaseRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface ModifyTestCaseSection200Response
 */
export interface ModifyTestCaseSection200Response {
    /**
     * 
     * @type {ModifyTestCaseSection200ResponseResponse}
     * @memberof ModifyTestCaseSection200Response
     */
    'Response'?: ModifyTestCaseSection200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyTestCaseSection200ResponseResponse
 */
export interface ModifyTestCaseSection200ResponseResponse {
    /**
     * 
     * @type {SectionData}
     * @memberof ModifyTestCaseSection200ResponseResponse
     */
    'Data'?: SectionData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyTestCaseSection200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyTestCaseSectionRequest
 */
export interface ModifyTestCaseSectionRequest {
    /**
     * 分组名称
     * @type {string}
     * @memberof ModifyTestCaseSectionRequest
     */
    'Name'?: string;
    /**
     * 父级 ID，默认 0
     * @type {number}
     * @memberof ModifyTestCaseSectionRequest
     */
    'ParentId'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyTestCaseSectionRequest
     */
    'ProjectName'?: string;
    /**
     * 分组 ID
     * @type {number}
     * @memberof ModifyTestCaseSectionRequest
     */
    'SectionId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyTestRun200Response
 */
export interface ModifyTestRun200Response {
    /**
     * 
     * @type {ModifyTestRun200ResponseResponse}
     * @memberof ModifyTestRun200Response
     */
    'Response'?: ModifyTestRun200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyTestRun200ResponseResponse
 */
export interface ModifyTestRun200ResponseResponse {
    /**
     * 
     * @type {RunData}
     * @memberof ModifyTestRun200ResponseResponse
     */
    'Data'?: RunData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyTestRun200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyTestRunRequest
 */
export interface ModifyTestRunRequest {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'AssignedToId'?: number;
    /**
     * 包含的用例 ID 列表，IncludeAll=false 必填
     * @type {Array<number>}
     * @memberof ModifyTestRunRequest
     */
    'Cases'?: Array<number>;
    /**
     * 环境标识
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'ConfigEnvironmentId'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof ModifyTestRunRequest
     */
    'Description'?: string;
    /**
     * 执行类型：1-手动执行 2-自动化流水线执行
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'ExecuteType'?: number;
    /**
     * 项目代码库 ID
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'GitDepotId'?: number;
    /**
     * 发布版本 ID
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'GitReleaseId'?: number;
    /**
     * 是否包含全部用例
     * @type {boolean}
     * @memberof ModifyTestRunRequest
     */
    'IncludeAll'?: boolean;
    /**
     * 标题
     * @type {string}
     * @memberof ModifyTestRunRequest
     */
    'Name'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyTestRunRequest
     */
    'ProjectName'?: string;
    /**
     * 计划 ID
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'RunId'?: number;
    /**
     * 分组 ID
     * @type {number}
     * @memberof ModifyTestRunRequest
     */
    'SectionId'?: number;
}
/**
 * 
 * @export
 * @interface ModifyWiki200Response
 */
export interface ModifyWiki200Response {
    /**
     * 
     * @type {ModifyWiki200ResponseResponse}
     * @memberof ModifyWiki200Response
     */
    'Response'?: ModifyWiki200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ModifyWiki200ResponseResponse
 */
export interface ModifyWiki200ResponseResponse {
    /**
     * 
     * @type {WikiData}
     * @memberof ModifyWiki200ResponseResponse
     */
    'Data'?: WikiData;
    /**
     * 请求id
     * @type {string}
     * @memberof ModifyWiki200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ModifyWikiByZipRequest
 */
export interface ModifyWikiByZipRequest {
    /**
     * 验证文件的token
     * @type {string}
     * @memberof ModifyWikiByZipRequest
     */
    'AuthToken'?: string;
    /**
     * 文件名
     * @type {string}
     * @memberof ModifyWikiByZipRequest
     */
    'FileName'?: string;
    /**
     * wiki的Iid
     * @type {number}
     * @memberof ModifyWikiByZipRequest
     */
    'Iid'?: number;
    /**
     * 上传文件的uuid名称 b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png
     * @type {string}
     * @memberof ModifyWikiByZipRequest
     */
    'Key'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyWikiByZipRequest
     */
    'ProjectName'?: string;
    /**
     * 获取token的时间
     * @type {number}
     * @memberof ModifyWikiByZipRequest
     */
    'Time'?: number;
}
/**
 * 
 * @export
 * @interface ModifyWikiOrderRequest
 */
export interface ModifyWikiOrderRequest {
    /**
     * 在第几层级之后
     * @type {number}
     * @memberof ModifyWikiOrderRequest
     */
    'After'?: number;
    /**
     * 在第几层级之前
     * @type {number}
     * @memberof ModifyWikiOrderRequest
     */
    'Before'?: number;
    /**
     * 是否检查权限,默认false
     * @type {boolean}
     * @memberof ModifyWikiOrderRequest
     */
    'Forced'?: boolean;
    /**
     * wiki Iid
     * @type {number}
     * @memberof ModifyWikiOrderRequest
     */
    'Iid'?: number;
    /**
     * 父级 Iid
     * @type {number}
     * @memberof ModifyWikiOrderRequest
     */
    'ParentIid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyWikiOrderRequest
     */
    'ProjectName'?: string;
}
/**
 * 
 * @export
 * @interface ModifyWikiRequest
 */
export interface ModifyWikiRequest {
    /**
     * 内容
     * @type {string}
     * @memberof ModifyWikiRequest
     */
    'Content'?: string;
    /**
     * wiki编号
     * @type {number}
     * @memberof ModifyWikiRequest
     */
    'Iid'?: number;
    /**
     * 备注
     * @type {string}
     * @memberof ModifyWikiRequest
     */
    'Msg'?: string;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyWikiRequest
     */
    'ProjectName'?: string;
    /**
     * 标题
     * @type {string}
     * @memberof ModifyWikiRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface ModifyWikiTitle200Response
 */
export interface ModifyWikiTitle200Response {
    /**
     * 
     * @type {ModifyWiki200ResponseResponse}
     * @memberof ModifyWikiTitle200Response
     */
    'Response'?: ModifyWiki200ResponseResponse;
}
/**
 * 
 * @export
 * @interface ModifyWikiTitleRequest
 */
export interface ModifyWikiTitleRequest {
    /**
     * wiki 编号
     * @type {number}
     * @memberof ModifyWikiTitleRequest
     */
    'Iid'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof ModifyWikiTitleRequest
     */
    'ProjectName'?: string;
    /**
     * wiki 标题
     * @type {string}
     * @memberof ModifyWikiTitleRequest
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface ModifyWorkItemSplitIssuesRequest
 */
export interface ModifyWorkItemSplitIssuesRequest {
    /**
     * 目标项目中的事项ID
     * @type {string}
     * @memberof ModifyWorkItemSplitIssuesRequest
     */
    'IssueCode'?: string;
    /**
     * 项目集名称
     * @type {string}
     * @memberof ModifyWorkItemSplitIssuesRequest
     */
    'ProgramName'?: string;
    /**
     * 目标项目名称 
     * @type {string}
     * @memberof ModifyWorkItemSplitIssuesRequest
     */
    'ProjectName'?: string;
    /**
     * true 表示分解， false 表示取消分解
     * @type {string}
     * @memberof ModifyWorkItemSplitIssuesRequest
     */
    'Split'?: string;
    /**
     * 页面上工作项ID
     * @type {number}
     * @memberof ModifyWorkItemSplitIssuesRequest
     */
    'WorkItemCode'?: number;
}
/**
 * 分页查询事项
 * @export
 * @interface OpenApiIssueListDataWithPage
 */
export interface OpenApiIssueListDataWithPage {
    /**
     * 所有事项数据
     * @type {Array<IssueListData>}
     * @memberof OpenApiIssueListDataWithPage
     */
    'List'?: Array<IssueListData>;
    /**
     * 页码
     * @type {number}
     * @memberof OpenApiIssueListDataWithPage
     */
    'PageNumber'?: number;
    /**
     * 分页的大小
     * @type {number}
     * @memberof OpenApiIssueListDataWithPage
     */
    'PageSize'?: number;
    /**
     * 所有行数
     * @type {number}
     * @memberof OpenApiIssueListDataWithPage
     */
    'TotalCount'?: number;
    /**
     * 全部页
     * @type {number}
     * @memberof OpenApiIssueListDataWithPage
     */
    'TotalPage'?: number;
}
/**
 * 迭代信息
 * @export
 * @interface OpenApiIteration
 */
export interface OpenApiIteration {
    /**
     * 全部故事点
     * @type {number}
     * @memberof OpenApiIteration
     */
    'AllStoryPoint'?: number | null;
    /**
     * 处理人
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Assignee': number | null;
    /**
     * 迭代编号
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Code': number | null;
    /**
     * 迭代中完成事项总数
     * @type {number}
     * @memberof OpenApiIteration
     */
    'CompletedCount': number | null;
    /**
     * 迭代中事项完成比率
     * @type {number}
     * @memberof OpenApiIteration
     */
    'CompletedPercent': number | null;
    /**
     * 已完成故事点
     * @type {number}
     * @memberof OpenApiIteration
     */
    'CompletedStoryPoint'?: number | null;
    /**
     * 完成人 ID
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Completer': number | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof OpenApiIteration
     */
    'CreatedAt': number | null;
    /**
     * 创建人id
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Creator': number | null;
    /**
     * 删除人id
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Deleter': number | null;
    /**
     * 结束时间
     * @type {number}
     * @memberof OpenApiIteration
     */
    'EndAt': number | null;
    /**
     * 迭代目标
     * @type {string}
     * @memberof OpenApiIteration
     */
    'Goal': string | null;
    /**
     * 迭代id
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Id': number | null;
    /**
     * 迭代名称
     * @type {string}
     * @memberof OpenApiIteration
     */
    'Name': string | null;
    /**
     * 进行中的故事点
     * @type {number}
     * @memberof OpenApiIteration
     */
    'ProcessStoryPoint'?: number | null;
    /**
     * 迭代中进行中事项总数
     * @type {number}
     * @memberof OpenApiIteration
     */
    'ProcessingCount': number | null;
    /**
     * 开始时间，时间戳，-28800000 代表没有设置
     * @type {number}
     * @memberof OpenApiIteration
     */
    'StartAt': number | null;
    /**
     * 开始人id
     * @type {number}
     * @memberof OpenApiIteration
     */
    'Starter': number | null;
    /**
     * 迭代状态：WAIT_PROCESS,PROCESSING,COMPLETED
     * @type {string}
     * @memberof OpenApiIteration
     */
    'Status': string | null;
    /**
     * 待处理故事点
     * @type {number}
     * @memberof OpenApiIteration
     */
    'TodoStoryPoint'?: number | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof OpenApiIteration
     */
    'UpdatedAt': number | null;
    /**
     * 迭代中待处理事项总数
     * @type {number}
     * @memberof OpenApiIteration
     */
    'WaitProcessCount': number | null;
}
/**
 * open-api 版本数据类型
 * @export
 * @interface OpenApiRelease
 */
export interface OpenApiRelease {
    /**
     * 处理人
     * @type {number}
     * @memberof OpenApiRelease
     */
    'Assignee'?: number;
    /**
     * 版本code
     * @type {number}
     * @memberof OpenApiRelease
     */
    'Code'?: number;
    /**
     * 已完成事项数目 
     * @type {number}
     * @memberof OpenApiRelease
     */
    'CompletedCount'?: number;
    /**
     * 事项完成率 
     * @type {number}
     * @memberof OpenApiRelease
     */
    'CompletedPercent'?: number | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof OpenApiRelease
     */
    'CreatedAt'?: number;
    /**
     * 创建人
     * @type {number}
     * @memberof OpenApiRelease
     */
    'Creator'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof OpenApiRelease
     */
    'Description'?: string | null;
    /**
     * 版本ID
     * @type {number}
     * @memberof OpenApiRelease
     */
    'Id'?: number;
    /**
     * 版本关联迭代列表 
     * @type {Array<IterationSimple>}
     * @memberof OpenApiRelease
     */
    'Iterations'?: Array<IterationSimple>;
    /**
     * 版本名称
     * @type {string}
     * @memberof OpenApiRelease
     */
    'Name'?: string;
    /**
     * 处理中事项数目 
     * @type {number}
     * @memberof OpenApiRelease
     */
    'ProcessingCount'?: number;
    /**
     * 项目ID
     * @type {number}
     * @memberof OpenApiRelease
     */
    'ProjectId'?: number;
    /**
     * 发表日期
     * @type {number}
     * @memberof OpenApiRelease
     */
    'ReleaseDate'?: number;
    /**
     * 开始日期
     * @type {number}
     * @memberof OpenApiRelease
     */
    'StartDate'?: number;
    /**
     * 状态
     * @type {string}
     * @memberof OpenApiRelease
     */
    'Status'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof OpenApiRelease
     */
    'UpdatedAt'?: number;
    /**
     * 待处理事项数目 
     * @type {number}
     * @memberof OpenApiRelease
     */
    'WaitProcessCount'?: number;
}
/**
 * 版本列表
 * @export
 * @interface OpenApiReleaseListDataWithPage
 */
export interface OpenApiReleaseListDataWithPage {
    /**
     * 版本信息列表
     * @type {Array<OpenApiRelease>}
     * @memberof OpenApiReleaseListDataWithPage
     */
    'List'?: Array<OpenApiRelease> | null;
    /**
     * 页码
     * @type {number}
     * @memberof OpenApiReleaseListDataWithPage
     */
    'PageNumber'?: number | null;
    /**
     * 页数
     * @type {number}
     * @memberof OpenApiReleaseListDataWithPage
     */
    'PageSize'?: number | null;
    /**
     * 数据总条数
     * @type {number}
     * @memberof OpenApiReleaseListDataWithPage
     */
    'TotalCount'?: number | null;
    /**
     * 总页数
     * @type {number}
     * @memberof OpenApiReleaseListDataWithPage
     */
    'TotalPage'?: number | null;
}
/**
 * 工作台个人事项
 * @export
 * @interface OpenApiTeamIssueData
 */
export interface OpenApiTeamIssueData {
    /**
     * 工作台事项
     * @type {Array<OpenApiWorkbenchIssue>}
     * @memberof OpenApiTeamIssueData
     */
    'IssueList'?: Array<OpenApiWorkbenchIssue>;
    /**
     * 页码
     * @type {number}
     * @memberof OpenApiTeamIssueData
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof OpenApiTeamIssueData
     */
    'PageSize'?: number;
    /**
     * 所有数据条目
     * @type {number}
     * @memberof OpenApiTeamIssueData
     */
    'TotalCount'?: number;
    /**
     * 总页数
     * @type {number}
     * @memberof OpenApiTeamIssueData
     */
    'TotalPage'?: number;
}
/**
 * 工作台事项数据
 * @export
 * @interface OpenApiWorkbenchIssue
 */
export interface OpenApiWorkbenchIssue {
    /**
     * 
     * @type {User}
     * @memberof OpenApiWorkbenchIssue
     */
    'Assignee'?: User;
    /**
     * 子
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'ChildCompletedCount'?: number | null;
    /**
     * 子
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'ChildCount'?: number | null;
    /**
     * 事项code
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'Code'?: number | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'CreatedAt'?: number | null;
    /**
     * 
     * @type {User}
     * @memberof OpenApiWorkbenchIssue
     */
    'Creator'?: User;
    /**
     * 描述
     * @type {boolean}
     * @memberof OpenApiWorkbenchIssue
     */
    'Description'?: boolean | null;
    /**
     * 截止时间
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'DueDate'?: number | null;
    /**
     * 
     * @type {Epic}
     * @memberof OpenApiWorkbenchIssue
     */
    'Epic'?: Epic;
    /**
     * 
     * @type {IssueStatus}
     * @memberof OpenApiWorkbenchIssue
     */
    'IssueStatus'?: IssueStatus;
    /**
     * 
     * @type {IssueTypeDetail}
     * @memberof OpenApiWorkbenchIssue
     */
    'IssueType'?: IssueTypeDetail;
    /**
     * 
     * @type {IterationSimple}
     * @memberof OpenApiWorkbenchIssue
     */
    'Iteration'?: IterationSimple;
    /**
     * 事项名称
     * @type {string}
     * @memberof OpenApiWorkbenchIssue
     */
    'Name'?: string | null;
    /**
     * 父事项code
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'ParentCode'?: number | null;
    /**
     * 
     * @type {IssueSimpleData}
     * @memberof OpenApiWorkbenchIssue
     */
    'ParentIssue'?: IssueSimpleData;
    /**
     * 优先级
     * @type {string}
     * @memberof OpenApiWorkbenchIssue
     */
    'Priority'?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof OpenApiWorkbenchIssue
     */
    'Project'?: Project;
    /**
     * 项目ID
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'ProjectId'?: number | null;
    /**
     * 子工作项
     * @type {Array<SubTask>}
     * @memberof OpenApiWorkbenchIssue
     */
    'SubTasks'?: Array<SubTask> | null;
    /**
     * 事项类型
     * @type {string}
     * @memberof OpenApiWorkbenchIssue
     */
    'Type'?: string | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof OpenApiWorkbenchIssue
     */
    'UpdatedAt'?: number | null;
}
/**
 * 页码信息
 * @export
 * @interface PageInfo
 */
export interface PageInfo {
    /**
     * 页码数量
     * @type {number}
     * @memberof PageInfo
     */
    'PageNumber'?: number | null;
    /**
     * 每页大小
     * @type {number}
     * @memberof PageInfo
     */
    'PageSize'?: number | null;
    /**
     * 页码总数量
     * @type {number}
     * @memberof PageInfo
     */
    'TotalPage'?: number | null;
    /**
     * 数据总行数
     * @type {number}
     * @memberof PageInfo
     */
    'TotalRow'?: number | null;
}
/**
 * 
 * @export
 * @interface PingServiceHookRequest
 */
export interface PingServiceHookRequest {
    /**
     * Service Hook 编号
     * @type {Array<string>}
     * @memberof PingServiceHookRequest
     */
    'Id'?: Array<string>;
    /**
     * 项目编号或者研发空间标号
     * @type {number}
     * @memberof PingServiceHookRequest
     */
    'ProjectId'?: number;
    /**
     * 目标数据类型：PROJECT,SPACE_NODE,PROGRAM,默认PROJECT
     * @type {string}
     * @memberof PingServiceHookRequest
     */
    'TargetType'?: PingServiceHookRequestTargetTypeEnum;
}

export const PingServiceHookRequestTargetTypeEnum = {
    Project: 'PROJECT',
    SpaceNode: 'SPACE_NODE',
    Program: 'PROGRAM'
} as const;

export type PingServiceHookRequestTargetTypeEnum = typeof PingServiceHookRequestTargetTypeEnum[keyof typeof PingServiceHookRequestTargetTypeEnum];

/**
 * 
 * @export
 * @interface PinyinPinyinArray
 */
export interface PinyinPinyinArray {
    /**
     * 拼音列表
     * @type {Array<string>}
     * @memberof PinyinPinyinArray
     */
    'Value': Array<string>;
}
/**
 * 
 * @export
 * @interface PinyinPinyinResult
 */
export interface PinyinPinyinResult {
    /**
     * 拼音分词列表
     * @type {Array<PinyinPinyinArray>}
     * @memberof PinyinPinyinResult
     */
    'Array': Array<PinyinPinyinArray>;
    /**
     * 拼音
     * @type {Array<string>}
     * @memberof PinyinPinyinResult
     */
    'Value': Array<string>;
}
/**
 * PipelineConfig 结构
 * @export
 * @interface PipelineConfig
 */
export interface PipelineConfig {
    /**
     * 部署流程 ID
     * @type {string}
     * @memberof PipelineConfig
     */
    'Id'?: string;
    /**
     * 部署流程 JSON 配置
     * @type {string}
     * @memberof PipelineConfig
     */
    'JsonContent'?: string;
    /**
     * 部署流程名称
     * @type {string}
     * @memberof PipelineConfig
     */
    'Name'?: string;
}
/**
 * PipelineIdIndex 结构
 * @export
 * @interface PipelineIdIndex
 */
export interface PipelineIdIndex {
    /**
     * 排序索引
     * @type {number}
     * @memberof PipelineIdIndex
     */
    'Index': number;
    /**
     * 部署流程 ID
     * @type {string}
     * @memberof PipelineIdIndex
     */
    'PipelineId': string;
}
/**
 * 
 * @export
 * @interface PlanIterationIssueRequest
 */
export interface PlanIterationIssueRequest {
    /**
     * 需要规划的事项编号列表
     * @type {Array<number>}
     * @memberof PlanIterationIssueRequest
     */
    'IssueCode'?: Array<number>;
    /**
     * 迭代编号，将事项移出迭代请传 0
     * @type {number}
     * @memberof PlanIterationIssueRequest
     */
    'IterationCode'?: number;
    /**
     * 项目名称
     * @type {string}
     * @memberof PlanIterationIssueRequest
     */
    'ProjectName'?: string;
    /**
     * 单个事项移动模式，即未规划的子事项的迭代跟随传入的事项一同规划，否则仅规划传入的事项
     * @type {boolean}
     * @memberof PlanIterationIssueRequest
     */
    'SingleMode'?: boolean;
}
/**
 * 权限信息
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * 项目成员
     * @type {string}
     * @memberof Policy
     */
    'PolicyAlias'?: string;
    /**
     * 1
     * @type {number}
     * @memberof Policy
     */
    'PolicyId'?: number;
    /**
     * ProjectMember类型
     * @type {string}
     * @memberof Policy
     */
    'PolicyName'?: string;
}
/**
 * 权限组详情
 * @export
 * @interface PolicyDetail
 */
export interface PolicyDetail {
    /**
     * 显示名称
     * @type {string}
     * @memberof PolicyDetail
     */
    'Alias'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof PolicyDetail
     */
    'CurrentVersion'?: string;
    /**
     * 版本记录 ID
     * @type {number}
     * @memberof PolicyDetail
     */
    'CurrentVersionId'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof PolicyDetail
     */
    'Description'?: string | null;
    /**
     * 名称
     * @type {string}
     * @memberof PolicyDetail
     */
    'Name'?: string;
    /**
     * 
     * @type {PolicyDocument}
     * @memberof PolicyDetail
     */
    'PolicyDocument'?: PolicyDocument;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof PolicyDetail
     */
    'PolicyId'?: number;
    /**
     * 权限组类型：IDENTITY | RESOURCE
     * @type {string}
     * @memberof PolicyDetail
     */
    'PolicyType'?: string;
    /**
     * 作用范围： SYSTEM | CUSTOM
     * @type {string}
     * @memberof PolicyDetail
     */
    'Scope'?: string;
}
/**
 * 权限组 Document
 * @export
 * @interface PolicyDocument
 */
export interface PolicyDocument {
    /**
     * 授权句柄
     * @type {Array<PolicyStatement>}
     * @memberof PolicyDocument
     */
    'Statement': Array<PolicyStatement>;
}
/**
 * 权限组信息
 * @export
 * @interface PolicyInfo
 */
export interface PolicyInfo {
    /**
     * 显示名称
     * @type {string}
     * @memberof PolicyInfo
     */
    'Alias'?: string;
    /**
     * 版本号
     * @type {string}
     * @memberof PolicyInfo
     */
    'CurrentVersion'?: string;
    /**
     * 版本记录 ID
     * @type {number}
     * @memberof PolicyInfo
     */
    'CurrentVersionId'?: number;
    /**
     * 描述
     * @type {string}
     * @memberof PolicyInfo
     */
    'Description'?: string | null;
    /**
     * 名称
     * @type {string}
     * @memberof PolicyInfo
     */
    'Name'?: string;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof PolicyInfo
     */
    'PolicyId'?: number;
    /**
     * 类型：IDENTITY | RESOURCE
     * @type {string}
     * @memberof PolicyInfo
     */
    'PolicyType'?: string;
    /**
     * 作用范围：SYSTEM | CUSTOM
     * @type {string}
     * @memberof PolicyInfo
     */
    'Scope'?: string;
}
/**
 * 权限组的可用资源范围信息
 * @export
 * @interface PolicyResourceScopeInfo
 */
export interface PolicyResourceScopeInfo {
    /**
     * 创建时间
     * @type {number}
     * @memberof PolicyResourceScopeInfo
     */
    'CreatedAt'?: number;
    /**
     * 权限组 ID
     * @type {number}
     * @memberof PolicyResourceScopeInfo
     */
    'PolicyId'?: number;
    /**
     * 
     * @type {ResourceInfoOfPolicyScope}
     * @memberof PolicyResourceScopeInfo
     */
    'Resource'?: ResourceInfoOfPolicyScope;
}
/**
 * 权限组授权句柄
 * @export
 * @interface PolicyStatement
 */
export interface PolicyStatement {
    /**
     * 权限 action 的二段式描述
     * @type {Array<string>}
     * @memberof PolicyStatement
     */
    'Action': Array<string>;
    /**
     * 效能：ALLOW | DENY
     * @type {string}
     * @memberof PolicyStatement
     */
    'Effect': PolicyStatementEffectEnum;
    /**
     * 授权资源的三段式描述，一般填 * 即可
     * @type {Array<string>}
     * @memberof PolicyStatement
     */
    'Resource': Array<string>;
}

export const PolicyStatementEffectEnum = {
    Allow: 'ALLOW',
    Deny: 'DENY'
} as const;

export type PolicyStatementEffectEnum = typeof PolicyStatementEffectEnum[keyof typeof PolicyStatementEffectEnum];

/**
 * 资源权限判定策略信息
 * @export
 * @interface PredicatePolicy
 */
export interface PredicatePolicy {
    /**
     * 是否存在admin授权
     * @type {boolean}
     * @memberof PredicatePolicy
     */
    'HasAdministrator'?: boolean;
    /**
     *   SELF_PARENT  // 同时使用父级资源+当前资源   SELF_NONE  // 只使用当前资源   NONE_PARENT  // 只使用父级资源
     * @type {string}
     * @memberof PredicatePolicy
     */
    'ResourcePredicatePolicy'?: PredicatePolicyResourcePredicatePolicyEnum;
}

export const PredicatePolicyResourcePredicatePolicyEnum = {
    SelfParent: 'SELF_PARENT',
    SelfNone: 'SELF_NONE',
    NoneParent: 'NONE_PARENT'
} as const;

export type PredicatePolicyResourcePredicatePolicyEnum = typeof PredicatePolicyResourcePredicatePolicyEnum[keyof typeof PredicatePolicyResourcePredicatePolicyEnum];

/**
 * 添加项目成员主体 成员对象
 * @export
 * @interface PrincipalAdd
 */
export interface PrincipalAdd {
    /**
     * 权限组ID
     * @type {Array<number>}
     * @memberof PrincipalAdd
     */
    'PolicyIds': Array<number>;
    /**
     * 主体ID
     * @type {string}
     * @memberof PrincipalAdd
     */
    'PrincipalId': string;
    /**
     * 主体类型
     * @type {string}
     * @memberof PrincipalAdd
     */
    'PrincipalType': PrincipalAddPrincipalTypeEnum;
}

export const PrincipalAddPrincipalTypeEnum = {
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT',
    User: 'USER'
} as const;

export type PrincipalAddPrincipalTypeEnum = typeof PrincipalAddPrincipalTypeEnum[keyof typeof PrincipalAddPrincipalTypeEnum];

/**
 * 查询项目成员主体 响应信息
 * @export
 * @interface PrincipalData
 */
export interface PrincipalData {
    /**
     * 页数
     * @type {number}
     * @memberof PrincipalData
     */
    'PageNumber'?: number;
    /**
     * 条数
     * @type {number}
     * @memberof PrincipalData
     */
    'PageSize'?: number;
    /**
     * 成员主体信息
     * @type {Array<PrincipalResp>}
     * @memberof PrincipalData
     */
    'Principals'?: Array<PrincipalResp>;
    /**
     * 总条数
     * @type {number}
     * @memberof PrincipalData
     */
    'TotalCount'?: number;
}
/**
 * 删除项目成员主体 成员对象
 * @export
 * @interface PrincipalDel
 */
export interface PrincipalDel {
    /**
     * 主体ID
     * @type {string}
     * @memberof PrincipalDel
     */
    'PrincipalId': string;
    /**
     * 主体类型，支持USER_GROUP、DEPARTMENT、USER
     * @type {string}
     * @memberof PrincipalDel
     */
    'PrincipalType': PrincipalDelPrincipalTypeEnum;
}

export const PrincipalDelPrincipalTypeEnum = {
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT',
    User: 'USER'
} as const;

export type PrincipalDelPrincipalTypeEnum = typeof PrincipalDelPrincipalTypeEnum[keyof typeof PrincipalDelPrincipalTypeEnum];

/**
 * 成员主体返回信息
 * @export
 * @interface PrincipalResp
 */
export interface PrincipalResp {
    /**
     * 添加时间
     * @type {number}
     * @memberof PrincipalResp
     */
    'CreatedAt'?: number;
    /**
     * 权限组Id
     * @type {Array<Policy>}
     * @memberof PrincipalResp
     */
    'Policies'?: Array<Policy> | null;
    /**
     * 成员主体Id
     * @type {string}
     * @memberof PrincipalResp
     */
    'PrincipalId'?: string;
    /**
     * 成员主体名称
     * @type {string}
     * @memberof PrincipalResp
     */
    'PrincipalName'?: string;
    /**
     * 成员主体类型
     * @type {string}
     * @memberof PrincipalResp
     */
    'PrincipalType'?: PrincipalRespPrincipalTypeEnum;
}

export const PrincipalRespPrincipalTypeEnum = {
    UserGroup: 'USER_GROUP',
    Department: 'DEPARTMENT',
    User: 'USER'
} as const;

export type PrincipalRespPrincipalTypeEnum = typeof PrincipalRespPrincipalTypeEnum[keyof typeof PrincipalRespPrincipalTypeEnum];

/**
 * 项目/项目集数据
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 结束时间
     * @type {number}
     * @memberof Program
     */
    'CreatedAt'?: number;
    /**
     * 描述信息
     * @type {string}
     * @memberof Program
     */
    'Description'?: string;
    /**
     * 展示名称
     * @type {string}
     * @memberof Program
     */
    'DisplayName'?: string;
    /**
     * 结束时间
     * @type {number}
     * @memberof Program
     */
    'EndDate'?: number;
    /**
     * 图标
     * @type {string}
     * @memberof Program
     */
    'Icon'?: string;
    /**
     * ID
     * @type {number}
     * @memberof Program
     */
    'Id'?: number;
    /**
     * 标识
     * @type {string}
     * @memberof Program
     */
    'Name'?: string;
    /**
     * 名称拼音
     * @type {string}
     * @memberof Program
     */
    'NamePinyin'?: string;
    /**
     * 开始时间
     * @type {number}
     * @memberof Program
     */
    'StartDate'?: number;
    /**
     * 修改时间
     * @type {number}
     * @memberof Program
     */
    'UpdatedAt'?: number;
}
/**
 * 项目集分页参数
 * @export
 * @interface ProgramData
 */
export interface ProgramData {
    /**
     * 请求页数
     * @type {number}
     * @memberof ProgramData
     */
    'PageNumber'?: number;
    /**
     * 请求条数
     * @type {number}
     * @memberof ProgramData
     */
    'PageSize'?: number;
    /**
     * 项目集列表
     * @type {Array<Program>}
     * @memberof ProgramData
     */
    'Programs'?: Array<Program>;
    /**
     * 总条数
     * @type {number}
     * @memberof ProgramData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ProgramProgram
 */
export interface ProgramProgram {
    /**
     * 创建时间
     * @type {number}
     * @memberof ProgramProgram
     */
    'CreatedAt': number;
    /**
     * 描述信息
     * @type {string}
     * @memberof ProgramProgram
     */
    'Description': string;
    /**
     * 展示名
     * @type {string}
     * @memberof ProgramProgram
     */
    'DisplayName': string;
    /**
     * 截止时间
     * @type {number}
     * @memberof ProgramProgram
     */
    'EndDate': number;
    /**
     * 图标
     * @type {string}
     * @memberof ProgramProgram
     */
    'Icon': string;
    /**
     * 项目集ID
     * @type {number}
     * @memberof ProgramProgram
     */
    'Id': number;
    /**
     * 项目集名
     * @type {string}
     * @memberof ProgramProgram
     */
    'Name': string;
    /**
     * 项目集名-拼音
     * @type {string}
     * @memberof ProgramProgram
     */
    'NamePinyin': string;
    /**
     * 开始时间
     * @type {number}
     * @memberof ProgramProgram
     */
    'StartDate': number;
    /**
     * 更新时间
     * @type {number}
     * @memberof ProgramProgram
     */
    'UpdatedAt': number;
}
/**
 * 
 * @export
 * @interface ProgramProgramMemberPolicy
 */
export interface ProgramProgramMemberPolicy {
    /**
     * 策略别名
     * @type {string}
     * @memberof ProgramProgramMemberPolicy
     */
    'PolicyAlias': string;
    /**
     * 策略 ID
     * @type {string}
     * @memberof ProgramProgramMemberPolicy
     */
    'PolicyId': string;
    /**
     * 策略名
     * @type {string}
     * @memberof ProgramProgramMemberPolicy
     */
    'PolicyName': string;
}
/**
 * 项目信息
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 是否压缩
     * @type {boolean}
     * @memberof Project
     */
    'Archived'?: boolean | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof Project
     */
    'CreatedAt'?: number | null;
    /**
     * 描述
     * @type {string}
     * @memberof Project
     */
    'Description'?: string | null;
    /**
     * 显示名称
     * @type {string}
     * @memberof Project
     */
    'DisplayName'?: string | null;
    /**
     * 项目结束时间
     * @type {number}
     * @memberof Project
     */
    'EndDate'?: number | null;
    /**
     * 图标
     * @type {string}
     * @memberof Project
     */
    'Icon'?: string | null;
    /**
     * 项目 ID
     * @type {number}
     * @memberof Project
     */
    'Id'?: number;
    /**
     * 是否为模板项目
     * @type {boolean}
     * @memberof Project
     */
    'IsDemo'?: boolean | null;
    /**
     * 最大团员数
     * @type {number}
     * @memberof Project
     */
    'MaxMember'?: number | null;
    /**
     * 名称
     * @type {string}
     * @memberof Project
     */
    'Name'?: string | null;
    /**
     * 项目开始时间
     * @type {number}
     * @memberof Project
     */
    'StartDate'?: number | null;
    /**
     * 状态 默认都为1
     * @type {number}
     * @memberof Project
     */
    'Status'?: number | null;
    /**
     * 团队 ID
     * @type {number}
     * @memberof Project
     */
    'TeamId'?: number | null;
    /**
     * 团队所有者 ID
     * @type {number}
     * @memberof Project
     */
    'TeamOwnerId'?: number | null;
    /**
     * 项目类型, 项目集为0，公开项目为1，私密项目为2
     * @type {number}
     * @memberof Project
     */
    'Type'?: number | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof Project
     */
    'UpdatedAt'?: number | null;
    /**
     * 个人所有者 ID
     * @type {number}
     * @memberof Project
     */
    'UserOwnerId'?: number | null;
    /**
     * 项目集id
     * @type {Array<number>}
     * @memberof Project
     */
    'ProgramIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ProjectAnnouncementProjectAnnouncement
 */
export interface ProjectAnnouncementProjectAnnouncement {
    /**
     * 公告内容
     * @type {string}
     * @memberof ProjectAnnouncementProjectAnnouncement
     */
    'ContentHtml': string;
    /**
     * markdown 源文本
     * @type {string}
     * @memberof ProjectAnnouncementProjectAnnouncement
     */
    'ContentOrigin': string;
    /**
     * 公告id
     * @type {number}
     * @memberof ProjectAnnouncementProjectAnnouncement
     */
    'Id': number;
}
/**
 * 项目的事项属性
 * @export
 * @interface ProjectIssueField
 */
export interface ProjectIssueField {
    /**
     * 创建时间戳
     * @type {number}
     * @memberof ProjectIssueField
     */
    'CreatedAt'?: number;
    /**
     * 
     * @type {IssueField}
     * @memberof ProjectIssueField
     */
    'IssueField'?: IssueField;
    /**
     * 关联属性 ID
     * @type {number}
     * @memberof ProjectIssueField
     */
    'IssueFieldId'?: number;
    /**
     * 事项类型
     * @type {string}
     * @memberof ProjectIssueField
     */
    'IssueType'?: string;
    /**
     * 是否有默认值
     * @type {boolean}
     * @memberof ProjectIssueField
     */
    'NeedDefault'?: boolean;
    /**
     * 是否必填
     * @type {boolean}
     * @memberof ProjectIssueField
     */
    'Required'?: boolean;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof ProjectIssueField
     */
    'UpdatedAt'?: number;
    /**
     * 默认值， JSON 字符串。例如：{\"type\":\"VARIABLE\",\"value\":\"CREATOR\"}  type：默认值类型，VARIABLE（变量）、CONSTANT（常量）；  value：默认值，根据 IssueField.ComponentType，可能为不同类型的值（数值、字符串、数组）；常量值 CREATOR 表示创建者
     * @type {string}
     * @memberof ProjectIssueField
     */
    'ValueString'?: string | null;
}
/**
 * 项目的事项状态
 * @export
 * @interface ProjectIssueStatus
 */
export interface ProjectIssueStatus {
    /**
     * 创建时间戳
     * @type {number}
     * @memberof ProjectIssueStatus
     */
    'CreatedAt'?: number;
    /**
     * 是否是默认值
     * @type {boolean}
     * @memberof ProjectIssueStatus
     */
    'IsDefault'?: boolean;
    /**
     * 
     * @type {IssueStatus}
     * @memberof ProjectIssueStatus
     */
    'IssueStatus'?: IssueStatus;
    /**
     * 事项状态 ID
     * @type {number}
     * @memberof ProjectIssueStatus
     */
    'IssueStatusId'?: number;
    /**
     * 事项类型
     * @type {string}
     * @memberof ProjectIssueStatus
     */
    'IssueType'?: string;
    /**
     * 排序
     * @type {number}
     * @memberof ProjectIssueStatus
     */
    'Sort'?: number;
    /**
     * 修改时间戳
     * @type {number}
     * @memberof ProjectIssueStatus
     */
    'UpdatedAt'?: number;
}
/**
 * 
 * @export
 * @interface ProjectLabelLabels
 */
export interface ProjectLabelLabels {
    /**
     * 标签名
     * @type {string}
     * @memberof ProjectLabelLabels
     */
    'Name': string;
    /**
     * 颜色
     * @type {string}
     * @memberof ProjectLabelLabels
     */
    'Color': string;
    /**
     * 标签id
     * @type {number}
     * @memberof ProjectLabelLabels
     */
    'Id': number;
    /**
     * 项目id
     * @type {number}
     * @memberof ProjectLabelLabels
     */
    'ProjectId': number;
    /**
     * 创建人用户id
     * @type {number}
     * @memberof ProjectLabelLabels
     */
    'CreatorId': number;
}
/**
 * 项目成员分页信息
 * @export
 * @interface ProjectMemberData
 */
export interface ProjectMemberData {
    /**
     * 第几页
     * @type {number}
     * @memberof ProjectMemberData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof ProjectMemberData
     */
    'PageSize'?: number;
    /**
     * 项目成员列表信息
     * @type {Array<ProjectMemberUserData>}
     * @memberof ProjectMemberData
     */
    'ProjectMembers'?: Array<ProjectMemberUserData>;
    /**
     * 总条数
     * @type {number}
     * @memberof ProjectMemberData
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ProjectMemberDepartmentMember
 */
export interface ProjectMemberDepartmentMember {
    /**
     * 部门成员refId
     * @type {number}
     * @memberof ProjectMemberDepartmentMember
     */
    'RefId': number | null;
    /**
     * 关联信息
     * @type {Array<ProjectMemberMemberRef>}
     * @memberof ProjectMemberDepartmentMember
     */
    'Refs': Array<ProjectMemberMemberRef> | null;
    /**
     * 三方头像
     * @type {string}
     * @memberof ProjectMemberDepartmentMember
     */
    'ThirdPartyAvatar': string | null;
    /**
     * 三方名
     * @type {string}
     * @memberof ProjectMemberDepartmentMember
     */
    'ThirdPartyName': string | null;
    /**
     * 三方ID，目前仅支持ldap的用户id信息
     * @type {string}
     * @memberof ProjectMemberDepartmentMember
     */
    'ThirdPartyId'?: string;
}
/**
 * 
 * @export
 * @interface ProjectMemberMemberRef
 */
export interface ProjectMemberMemberRef {
    /**
     * 是否管理员
     * @type {boolean}
     * @memberof ProjectMemberMemberRef
     */
    'Assignee': boolean | null;
    /**
     * 部门ID
     * @type {number}
     * @memberof ProjectMemberMemberRef
     */
    'DepartmentId': number | null;
    /**
     * 部门成员ID
     * @type {number}
     * @memberof ProjectMemberMemberRef
     */
    'DepartmentMemberId': number | null;
    /**
     * 部门名
     * @type {string}
     * @memberof ProjectMemberMemberRef
     */
    'DepartmentName': string | null;
    /**
     * 描述ID
     * @type {string}
     * @memberof ProjectMemberMemberRef
     */
    'DescribeId': string | null;
    /**
     * 是否是当前查询部门的直接成员
     * @type {boolean}
     * @memberof ProjectMemberMemberRef
     */
    'Pointer': boolean | null;
}
/**
 * 用户成员信息
 * @export
 * @interface ProjectMemberUserData
 */
export interface ProjectMemberUserData {
    /**
     * 头像
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'Avatar'?: string;
    /**
     * 邮箱
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'Email'?: string;
    /**
     * 邮箱是否验证 0 否 /1 是
     * @type {number}
     * @memberof ProjectMemberUserData
     */
    'EmailValidation'?: ProjectMemberUserDataEmailValidationEnum;
    /**
     * 用户 GK
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'GlobalKey'?: string;
    /**
     * 用户Id
     * @type {number}
     * @memberof ProjectMemberUserData
     */
    'Id'?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'Name'?: string;
    /**
     * 用户名拼音
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'NamePinYin'?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'Phone'?: string;
    /**
     * 手机是否验证 0 否 /1 是
     * @type {number}
     * @memberof ProjectMemberUserData
     */
    'PhoneValidation'?: ProjectMemberUserDataPhoneValidationEnum;
    /**
     * 用户组
     * @type {Array<Role>}
     * @memberof ProjectMemberUserData
     */
    'Roles'?: Array<Role>;
    /**
     * 用户状态 0不活跃，1活跃，-1被锁定，-2锁定登录，-3退出团队
     * @type {number}
     * @memberof ProjectMemberUserData
     */
    'Status'?: ProjectMemberUserDataStatusEnum;
    /**
     * 团队Id
     * @type {number}
     * @memberof ProjectMemberUserData
     */
    'TeamId'?: number;
    /**
     * 拓展字段
     * @type {string}
     * @memberof ProjectMemberUserData
     */
    'UniqueExtField'?: string;
    /**
     * 
     * @type {ProjectMemberDepartmentMember}
     * @memberof ProjectMemberUserData
     */
    'DepartmentMember'?: ProjectMemberDepartmentMember;
}

export const ProjectMemberUserDataEmailValidationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectMemberUserDataEmailValidationEnum = typeof ProjectMemberUserDataEmailValidationEnum[keyof typeof ProjectMemberUserDataEmailValidationEnum];
export const ProjectMemberUserDataPhoneValidationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProjectMemberUserDataPhoneValidationEnum = typeof ProjectMemberUserDataPhoneValidationEnum[keyof typeof ProjectMemberUserDataPhoneValidationEnum];
export const ProjectMemberUserDataStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_MINUS_1: -1,
    NUMBER_MINUS_2: -2,
    NUMBER_MINUS_3: -3
} as const;

export type ProjectMemberUserDataStatusEnum = typeof ProjectMemberUserDataStatusEnum[keyof typeof ProjectMemberUserDataStatusEnum];

/**
 * 查询团队内所有项目
 * @export
 * @interface ProjectsData
 */
export interface ProjectsData {
    /**
     * 第几页
     * @type {number}
     * @memberof ProjectsData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof ProjectsData
     */
    'PageSize'?: number;
    /**
     * 项目集合
     * @type {Array<Project>}
     * @memberof ProjectsData
     */
    'ProjectList'?: Array<Project> | null;
    /**
     * 总条数
     * @type {number}
     * @memberof ProjectsData
     */
    'TotalCount'?: number;
}
/**
 * 保护分支详情
 * @export
 * @interface ProtectedBranch
 */
export interface ProtectedBranch {
    /**
     * 提交时间戳,单位毫秒
     * @type {number}
     * @memberof ProtectedBranch
     */
    'CommitDate'?: number;
    /**
     * 是否禁止强制推送
     * @type {boolean}
     * @memberof ProtectedBranch
     */
    'DenyForcePush'?: boolean;
    /**
     * 是否使用 squash 推送
     * @type {boolean}
     * @memberof ProtectedBranch
     */
    'ForceSquash'?: boolean;
    /**
     * 名称
     * @type {string}
     * @memberof ProtectedBranch
     */
    'Name'?: string;
    /**
     * 是否开启状态检查
     * @type {boolean}
     * @memberof ProtectedBranch
     */
    'StatusCheck'?: boolean;
}
/**
 * 保护分支用户信息
 * @export
 * @interface ProtectedBranchMember
 */
export interface ProtectedBranchMember {
    /**
     * 成员global_key
     * @type {string}
     * @memberof ProtectedBranchMember
     */
    'GlobalKey'?: string;
    /**
     * 是否允许强制推送
     * @type {boolean}
     * @memberof ProtectedBranchMember
     */
    'HasPushAccess'?: boolean;
    /**
     * 是否允许合并修改分支
     * @type {boolean}
     * @memberof ProtectedBranchMember
     */
    'HasUpdateAccess'?: boolean;
    /**
     * 成员姓名
     * @type {string}
     * @memberof ProtectedBranchMember
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface QcloudApiGitDepotDiffFileInfo
 */
export interface QcloudApiGitDepotDiffFileInfo {
    /**
     * 总删除行数
     * @type {number}
     * @memberof QcloudApiGitDepotDiffFileInfo
     */
    'Deletions': number;
    /**
     * 
     * @type {Array<QcloudApiGitDepotDifferentLine>}
     * @memberof QcloudApiGitDepotDiffFileInfo
     */
    'DifferentLines': Array<QcloudApiGitDepotDifferentLine>;
    /**
     * 总新增行数
     * @type {number}
     * @memberof QcloudApiGitDepotDiffFileInfo
     */
    'Insertions': number;
}
/**
 * 
 * @export
 * @interface QcloudApiGitDepotDifferentLine
 */
export interface QcloudApiGitDepotDifferentLine {
    /**
     * 排序号
     * @type {number}
     * @memberof QcloudApiGitDepotDifferentLine
     */
    'Index': number;
    /**
     * 操作起始行号
     * @type {number}
     * @memberof QcloudApiGitDepotDifferentLine
     */
    'LeftNo': number;
    /**
     * 操作方式:\"+\"表示新增,\"-\"表示删除,\" \"表示不变
     * @type {string}
     * @memberof QcloudApiGitDepotDifferentLine
     */
    'Prefix': string;
    /**
     * 操作结束行号
     * @type {number}
     * @memberof QcloudApiGitDepotDifferentLine
     */
    'RightNo': number;
    /**
     * 文本
     * @type {string}
     * @memberof QcloudApiGitDepotDifferentLine
     */
    'Text': string;
}
/**
 * 
 * @export
 * @interface RamGrantResourceInfoRequest
 */
export interface RamGrantResourceInfoRequest {
    /**
     * 资源 ID 
     * @type {string}
     * @memberof RamGrantResourceInfoRequest
     */
    'ResourceId': string;
    /**
     * 资源类型
     * @type {string}
     * @memberof RamGrantResourceInfoRequest
     */
    'ResourceType': RamGrantResourceInfoRequestResourceTypeEnum;
}

export const RamGrantResourceInfoRequestResourceTypeEnum = {
    Team: 'team',
    Project: 'project',
    Program: 'program',
    Depot: 'depot',
    Artifact: 'artifact',
    CdAgentServer: 'cd_agentServer',
    CdHostServerGroup: 'cd_hostServerGroup',
    CdCloudAccount: 'cd_cloudAccount',
    CdApplication: 'cd_application',
    CdPipeline: 'cd_pipeline',
    OrbitCluster: 'orbit_cluster',
    OrbitDbInstance: 'orbit_dbInstance',
    OrbitAgentServer: 'orbit_agentServer',
    OrbitHostServerGroup: 'orbit_hostServerGroup',
    CredentialGroup: 'credential_group',
    EcologyApplication: 'ecology_application',
    EcologyInstallation: 'ecology_installation',
    AgentPools: 'agent-pools',
    CiJob: 'ci-job'
} as const;

export type RamGrantResourceInfoRequestResourceTypeEnum = typeof RamGrantResourceInfoRequestResourceTypeEnum[keyof typeof RamGrantResourceInfoRequestResourceTypeEnum];

/**
 * 用于描述分支信息
 * @export
 * @interface RefInfo
 */
export interface RefInfo {
    /**
     * 分支名称
     * @type {string}
     * @memberof RefInfo
     */
    'Ref'?: string;
}
/**
 * 测试用例
 * @export
 * @interface RelatedCase
 */
export interface RelatedCase {
    /**
     * 用例ID
     * @type {number}
     * @memberof RelatedCase
     */
    'Id'?: number;
    /**
     * 用例名称
     * @type {string}
     * @memberof RelatedCase
     */
    'Name'?: string;
    /**
     * 优先级, 0 => \'紧急\', 1 => \'高\', 2 => \'中\', 3 => \'低
     * @type {number}
     * @memberof RelatedCase
     */
    'Priority'?: RelatedCasePriorityEnum;
}

export const RelatedCasePriorityEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type RelatedCasePriorityEnum = typeof RelatedCasePriorityEnum[keyof typeof RelatedCasePriorityEnum];

/**
 * git 版本
 * @export
 * @interface Release
 */
export interface Release {
    /**
     * 内容
     * @type {string}
     * @memberof Release
     */
    'Body'?: string | null;
    /**
     * commit Sha 值
     * @type {string}
     * @memberof Release
     */
    'CommitSha'?: string | null;
    /**
     * 创建时间
     * @type {number}
     * @memberof Release
     */
    'CreatedAt'?: number | null;
    /**
     * 创建者
     * @type {number}
     * @memberof Release
     */
    'CreatorId'?: number | null;
    /**
     * 仓库 Id
     * @type {number}
     * @memberof Release
     */
    'DepotId'?: number | null;
    /**
     * html内容
     * @type {string}
     * @memberof Release
     */
    'Html'?: string | null;
    /**
     * 版本 Id
     * @type {number}
     * @memberof Release
     */
    'Id'?: number | null;
    /**
     * 是否预发布
     * @type {boolean}
     * @memberof Release
     */
    'Pre'?: boolean | null;
    /**
     * 项目 Id
     * @type {number}
     * @memberof Release
     */
    'ProjectId'?: number | null;
    /**
     * 版本序号Id
     * @type {number}
     * @memberof Release
     */
    'ReleaseId'?: number | null;
    /**
     * 标签名字
     * @type {string}
     * @memberof Release
     */
    'TagName'?: string | null;
    /**
     * 目标 commit Sha 值
     * @type {string}
     * @memberof Release
     */
    'TargetCommitBranch'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof Release
     */
    'Title'?: string | null;
    /**
     * 更新时间
     * @type {number}
     * @memberof Release
     */
    'UpdatedAt'?: number | null;
    /**
     * 
     * @type {ReleaseAttachment}
     * @memberof Release
     */
    'ReleaseAttachment'?: ReleaseAttachment;
}
/**
 * 附件信息
 * @export
 * @interface ReleaseAttachment
 */
export interface ReleaseAttachment {
    /**
     * 附件下载地址
     * @type {string}
     * @memberof ReleaseAttachment
     */
    'AttachmentDownloadUrl'?: string;
    /**
     * 附件名
     * @type {string}
     * @memberof ReleaseAttachment
     */
    'AttachmentName'?: string;
    /**
     * 附件大小
     * @type {string}
     * @memberof ReleaseAttachment
     */
    'AttachmentSize'?: string;
}
/**
 * git 版本分页列表信息
 * @export
 * @interface ReleaseListPage
 */
export interface ReleaseListPage {
    /**
     * 版本分页列表
     * @type {Array<Release>}
     * @memberof ReleaseListPage
     */
    'Releases'?: Array<Release>;
    /**
     * 总共数量
     * @type {number}
     * @memberof ReleaseListPage
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ReorderCdPipelines200Response
 */
export interface ReorderCdPipelines200Response {
    /**
     * 
     * @type {ReorderCdPipelines200ResponseResponse}
     * @memberof ReorderCdPipelines200Response
     */
    'Response'?: ReorderCdPipelines200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ReorderCdPipelines200ResponseResponse
 */
export interface ReorderCdPipelines200ResponseResponse {
    /**
     * 
     * @type {ReorderCdPipelinesResponseData}
     * @memberof ReorderCdPipelines200ResponseResponse
     */
    'Data'?: ReorderCdPipelinesResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof ReorderCdPipelines200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ReorderCdPipelinesRequest
 */
export interface ReorderCdPipelinesRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof ReorderCdPipelinesRequest
     */
    'Application'?: string;
    /**
     * 部署流程排序列表
     * @type {Array<PipelineIdIndex>}
     * @memberof ReorderCdPipelinesRequest
     */
    'PipelineIdsIndices'?: Array<PipelineIdIndex>;
}
/**
 * ReorderCdPipelinesResponseData 结构
 * @export
 * @interface ReorderCdPipelinesResponseData
 */
export interface ReorderCdPipelinesResponseData {
    /**
     * 任务执行记录 JSON
     * @type {string}
     * @memberof ReorderCdPipelinesResponseData
     */
    'TaskExecutionJsonContent'?: string;
    /**
     * 任务执行状态
     * @type {string}
     * @memberof ReorderCdPipelinesResponseData
     */
    'TaskExecutionStatus'?: string;
}
/**
 * 测试报告信息
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 附件列表
     * @type {Array<Attachment>}
     * @memberof Report
     */
    'Attachments'?: Array<Attachment> | null;
    /**
     * 创建时间
     * @type {string}
     * @memberof Report
     */
    'CreatedAt'?: string | null;
    /**
     * 创建人
     * @type {number}
     * @memberof Report
     */
    'CreatedBy'?: number | null;
    /**
     * ID 主键
     * @type {number}
     * @memberof Report
     */
    'Id'?: number | null;
    /**
     * 迭代 ID
     * @type {string}
     * @memberof Report
     */
    'IterationId'?: string | null;
    /**
     * 迭代名称
     * @type {string}
     * @memberof Report
     */
    'IterationName'?: string | null;
    /**
     * 报告名称
     * @type {string}
     * @memberof Report
     */
    'Name'?: string | null;
    /**
     * 项目名称
     * @type {string}
     * @memberof Report
     */
    'ProjectName'?: string | null;
    /**
     * 
     * @type {ReportOverview}
     * @memberof Report
     */
    'ReportOverview'?: ReportOverview;
    /**
     * 测试计划 ID
     * @type {Array<string>}
     * @memberof Report
     */
    'RunIds'?: Array<string> | null;
    /**
     * 测试计划名称
     * @type {Array<string>}
     * @memberof Report
     */
    'RunNames'?: Array<string> | null;
    /**
     * 数据统计结束时间
     * @type {string}
     * @memberof Report
     */
    'StatisticsEndTime'?: string | null;
    /**
     * 数据统计开始时间
     * @type {string}
     * @memberof Report
     */
    'StatisticsStartTime'?: string | null;
    /**
     * 报告状态：CREATING 创建中，AVAILABLE 可用，UNAVAILABLE 不可用
     * @type {string}
     * @memberof Report
     */
    'Status'?: string | null;
    /**
     * 报告总结
     * @type {string}
     * @memberof Report
     */
    'Summary'?: string | null;
    /**
     * 模板 ID
     * @type {number}
     * @memberof Report
     */
    'TemplateId'?: number | null;
}
/**
 * 测试报告详情
 * @export
 * @interface ReportData
 */
export interface ReportData {
    /**
     * 
     * @type {Report}
     * @memberof ReportData
     */
    'Report'?: Report;
}
/**
 * 测试报告信息-简单
 * @export
 * @interface ReportLittle
 */
export interface ReportLittle {
    /**
     * 创建时间
     * @type {string}
     * @memberof ReportLittle
     */
    'CreatedAt'?: string | null;
    /**
     * ID 主键
     * @type {number}
     * @memberof ReportLittle
     */
    'Id'?: number | null;
    /**
     * 报告名称
     * @type {string}
     * @memberof ReportLittle
     */
    'Name'?: string | null;
    /**
     * 数据统计结束时间
     * @type {string}
     * @memberof ReportLittle
     */
    'StatisticsEndTime'?: string | null;
    /**
     * 数据统计开始时间
     * @type {string}
     * @memberof ReportLittle
     */
    'StatisticsStartTime'?: string | null;
    /**
     * 报告状态：CREATING 创建中，AVAILABLE 可用，UNAVAILABLE 不可用
     * @type {string}
     * @memberof ReportLittle
     */
    'Status'?: string | null;
    /**
     * 报告总结
     * @type {string}
     * @memberof ReportLittle
     */
    'Summary'?: string | null;
}
/**
 * 测试报告详情
 * @export
 * @interface ReportLittleData
 */
export interface ReportLittleData {
    /**
     * 
     * @type {ReportLittle}
     * @memberof ReportLittleData
     */
    'Report'?: ReportLittle;
}
/**
 * 测试报告概览
 * @export
 * @interface ReportOverview
 */
export interface ReportOverview {
    /**
     * 自动化覆盖率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'AutomationPercent'?: number | null;
    /**
     * 平均关闭时长
     * @type {number}
     * @memberof ReportOverview
     */
    'AvgClosedSeconds'?: number | null;
    /**
     * 用例总数
     * @type {number}
     * @memberof ReportOverview
     */
    'CaseSum'?: number | null;
    /**
     * 已完成数量
     * @type {number}
     * @memberof ReportOverview
     */
    'CompletedSum'?: number | null;
    /**
     * 缺陷修复率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'DefectFixPercent'?: number | null;
    /**
     * 重新激活率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'DefectReopenPercent'?: number | null;
    /**
     * 缺陷总数
     * @type {number}
     * @memberof ReportOverview
     */
    'DefectSum'?: number | null;
    /**
     * 85%解决时长
     * @type {number}
     * @memberof ReportOverview
     */
    'DurationFixed'?: number | null;
    /**
     * 执行率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'ExecPercent'?: number | null;
    /**
     * 需求总数
     * @type {number}
     * @memberof ReportOverview
     */
    'IssuesSum'?: number | null;
    /**
     * 通过率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'PassPercent'?: number | null;
    /**
     * 处理中数量
     * @type {number}
     * @memberof ReportOverview
     */
    'ProcessingSum'?: number | null;
    /**
     * 需求覆盖率：百分比
     * @type {number}
     * @memberof ReportOverview
     */
    'RequirementCoverPercent'?: number | null;
    /**
     * 未开始数量
     * @type {number}
     * @memberof ReportOverview
     */
    'TodoSum'?: number | null;
}
/**
 * 测试报告详情
 * @export
 * @interface ReportsLittleData
 */
export interface ReportsLittleData {
    /**
     * 测试报告详情
     * @type {Array<ReportLittle>}
     * @memberof ReportsLittleData
     */
    'Reports'?: Array<ReportLittle> | null;
}
/**
 * 需求类型
 * @export
 * @interface RequirementType
 */
export interface RequirementType {
    /**
     * 需求类型 Id
     * @type {number}
     * @memberof RequirementType
     */
    'Id'?: number;
    /**
     * 需求类型名称
     * @type {string}
     * @memberof RequirementType
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface ResendServiceHookLog200Response
 */
export interface ResendServiceHookLog200Response {
    /**
     * 
     * @type {ResendServiceHookLog200ResponseResponse}
     * @memberof ResendServiceHookLog200Response
     */
    'Response'?: ResendServiceHookLog200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface ResendServiceHookLog200ResponseResponse
 */
export interface ResendServiceHookLog200ResponseResponse {
    /**
     * 
     * @type {ServiceHookResendServiceHookResult}
     * @memberof ResendServiceHookLog200ResponseResponse
     */
    'Data'?: ServiceHookResendServiceHookResult;
    /**
     * 请求id
     * @type {string}
     * @memberof ResendServiceHookLog200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface ResendServiceHookLogRequest
 */
export interface ResendServiceHookLogRequest {
    /**
     * logId
     * @type {string}
     * @memberof ResendServiceHookLogRequest
     */
    'ServiceHookLogId'?: string;
}
/**
 * 授权的资源信息
 * @export
 * @interface ResourceInfo
 */
export interface ResourceInfo {
    /**
     * 资源三段式描述的资源定位描述，支持 path 形式及模糊表达匹配
     * @type {string}
     * @memberof ResourceInfo
     */
    'RelativeResource'?: string;
    /**
     * 资源 ID
     * @type {string}
     * @memberof ResourceInfo
     */
    'ResourceId': string;
    /**
     * 资源三段式描述的 scope，目前固定 coding
     * @type {string}
     * @memberof ResourceInfo
     */
    'ResourceScope'?: ResourceInfoResourceScopeEnum;
    /**
     * 资源类型：例如 project
     * @type {string}
     * @memberof ResourceInfo
     */
    'ResourceType': ResourceInfoResourceTypeEnum;
    /**
     * 资源三段式描述的 serviceName 部分，表示业务模块
     * @type {string}
     * @memberof ResourceInfo
     */
    'ServiceName'?: string;
}

export const ResourceInfoResourceScopeEnum = {
    Coding: 'coding'
} as const;

export type ResourceInfoResourceScopeEnum = typeof ResourceInfoResourceScopeEnum[keyof typeof ResourceInfoResourceScopeEnum];
export const ResourceInfoResourceTypeEnum = {
    Team: 'team',
    Project: 'project',
    Program: 'program',
    Depot: 'depot',
    Artifact: 'artifact',
    CdAgentServer: 'cd_agentServer',
    CdHostServerGroup: 'cd_hostServerGroup',
    CdCloudAccount: 'cd_cloudAccount',
    CdApplication: 'cd_application',
    CdPipeline: 'cd_pipeline',
    OrbitCluster: 'orbit_cluster',
    OrbitDbInstance: 'orbit_dbInstance',
    OrbitAgentServer: 'orbit_agentServer',
    OrbitHostServerGroup: 'orbit_hostServerGroup',
    CredentialGroup: 'credential_group',
    EcologyApplication: 'ecology_application',
    EcologyInstallation: 'ecology_installation',
    AgentPools: 'agent-pools',
    CiJob: 'ci-job'
} as const;

export type ResourceInfoResourceTypeEnum = typeof ResourceInfoResourceTypeEnum[keyof typeof ResourceInfoResourceTypeEnum];

/**
 * 权限组可用资源范围的资源信息
 * @export
 * @interface ResourceInfoOfPolicyScope
 */
export interface ResourceInfoOfPolicyScope {
    /**
     * 资源 ID
     * @type {string}
     * @memberof ResourceInfoOfPolicyScope
     */
    'ResourceId': string;
    /**
     * 资源类型：例如 project
     * @type {string}
     * @memberof ResourceInfoOfPolicyScope
     */
    'ResourceType': ResourceInfoOfPolicyScopeResourceTypeEnum;
}

export const ResourceInfoOfPolicyScopeResourceTypeEnum = {
    Project: 'project'
} as const;

export type ResourceInfoOfPolicyScopeResourceTypeEnum = typeof ResourceInfoOfPolicyScopeResourceTypeEnum[keyof typeof ResourceInfoOfPolicyScopeResourceTypeEnum];

/**
 * 协同事项引用资源
 * @export
 * @interface ResourceReference
 */
export interface ResourceReference {
    /**
     * 项目ID
     * @type {number}
     * @memberof ResourceReference
     */
    'ProjectId'?: number | null;
    /**
     * 项目名称
     * @type {string}
     * @memberof ResourceReference
     */
    'ProjectName'?: string | null;
    /**
     * 资源code
     * @type {number}
     * @memberof ResourceReference
     */
    'ResourceCode'?: number | null;
    /**
     * 资源ID
     * @type {number}
     * @memberof ResourceReference
     */
    'ResourceId'?: number | null;
    /**
     * 资源名称
     * @type {string}
     * @memberof ResourceReference
     */
    'ResourceName'?: string | null;
    /**
     * 资源状态
     * @type {string}
     * @memberof ResourceReference
     */
    'ResourceStatus'?: string | null;
    /**
     * 资源类型
     * @type {string}
     * @memberof ResourceReference
     */
    'ResourceType'?: string | null;
}
/**
 * 资源信息
 * @export
 * @interface ResourceReferenceResource
 */
export interface ResourceReferenceResource {
    /**
     * 资源附加信息，json格式
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'Meta': string;
    /**
     * 资源code
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'ResourceCode': string;
    /**
     * 资源类型名
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'ResourceTypeName': string;
    /**
     * 资源 ID
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'ResourceId': string;
    /**
     * 资源名
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'Title': string;
    /**
     * 资源类型
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'ResourceType': ResourceReferenceResourceResourceTypeEnum;
    /**
     * 资源图标
     * @type {string}
     * @memberof ResourceReferenceResource
     */
    'Icon': string;
}

export const ResourceReferenceResourceResourceTypeEnum = {
    Defect: 'Defect',
    Iteration: 'Iteration',
    Mission: 'Mission',
    IssueRelease: 'IssueRelease',
    Requirement: 'Requirement',
    SubTask: 'SubTask',
    Epic: 'Epic',
    MergeRequestBean: 'MergeRequestBean',
    Commit: 'Commit',
    Release: 'Release',
    Milestone: 'Milestone',
    WorkItem: 'WorkItem',
    Risk: 'Risk',
    ProjectFile: 'ProjectFile',
    Wiki: 'Wiki',
    TestingCase: 'TestingCase',
    TestingRun: 'TestingRun',
    Testing: 'Testing',
    TestingReport: 'TestingReport',
    Knowledge: 'Knowledge'
} as const;

export type ResourceReferenceResourceResourceTypeEnum = typeof ResourceReferenceResourceResourceTypeEnum[keyof typeof ResourceReferenceResourceResourceTypeEnum];

/**
 * 资源相关信息
 * @export
 * @interface ResourceReferenceResourceInfo
 */
export interface ResourceReferenceResourceInfo {
    /**
     * 
     * @type {ResourceReferenceResourceScope}
     * @memberof ResourceReferenceResourceInfo
     */
    'Scope': ResourceReferenceResourceScope;
    /**
     * 
     * @type {ResourceReferenceResource}
     * @memberof ResourceReferenceResourceInfo
     */
    'Resource': ResourceReferenceResource;
}
/**
 * 资源所属主体信息
 * @export
 * @interface ResourceReferenceResourceScope
 */
export interface ResourceReferenceResourceScope {
    /**
     * 所属主体类型： 1项目、2团队
     * @type {number}
     * @memberof ResourceReferenceResourceScope
     */
    'ScopeType': ResourceReferenceResourceScopeScopeTypeEnum;
    /**
     * 所属主体名
     * @type {string}
     * @memberof ResourceReferenceResourceScope
     */
    'ScopeName': string;
    /**
     * 所属主体展示名
     * @type {string}
     * @memberof ResourceReferenceResourceScope
     */
    'ScopeDisplayName': string;
    /**
     * 所属主体ID
     * @type {number}
     * @memberof ResourceReferenceResourceScope
     */
    'ScopeId': number;
}

export const ResourceReferenceResourceScopeScopeTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ResourceReferenceResourceScopeScopeTypeEnum = typeof ResourceReferenceResourceScopeScopeTypeEnum[keyof typeof ResourceReferenceResourceScopeScopeTypeEnum];

/**
 * 用户组
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 用户组Id
     * @type {number}
     * @memberof Role
     */
    'RoleId'?: number;
    /**
     * 用户组类型： UserDefined 用户自定义的角色， EnterpriseOwner 企业所有者，EnterpriseAdmin 企业管理员， EnterpriseMember 企业普通成员， ProjectAdmin 项目管理员， ProjectMember 项目成员-> 新的权限系统里面叫\"开发\"，ProjectGuest 项目受限成员 -> 新的权限系统里面叫\"测试\"，ProjectManager 项目经理，ProductManager 产品经理，ProjectOperation 运维 ProgramOwner 项目集负责人，ProgramAdmin 项目集管理员，ProgramMember 项目集成员， ProgramProjectMember 项目集-项目成员
     * @type {string}
     * @memberof Role
     */
    'RoleType'?: RoleRoleTypeEnum;
    /**
     * 用户组类型名称
     * @type {string}
     * @memberof Role
     */
    'RoleTypeName'?: string;
}

export const RoleRoleTypeEnum = {
    UserDefined: 'UserDefined',
    EnterpriseOwner: 'EnterpriseOwner',
    EnterpriseAdmin: 'EnterpriseAdmin',
    EnterpriseMember: 'EnterpriseMember',
    ProjectAdmin: 'ProjectAdmin',
    ProjectMember: 'ProjectMember',
    ProjectGuest: 'ProjectGuest',
    ProjectManager: 'ProjectManager',
    ProductManager: 'ProductManager',
    ProjectOperation: 'ProjectOperation',
    ProgramOwner: 'ProgramOwner',
    ProgramAdmin: 'ProgramAdmin',
    ProgramMember: 'ProgramMember',
    ProgramProjectMember: 'ProgramProjectMember'
} as const;

export type RoleRoleTypeEnum = typeof RoleRoleTypeEnum[keyof typeof RoleRoleTypeEnum];

/**
 * 测试计划详情
 * @export
 * @interface Run
 */
export interface Run {
    /**
     * 处理人ID
     * @type {number}
     * @memberof Run
     */
    'AssignedToId'?: number | null;
    /**
     * 计划内阻塞测试数量
     * @type {number}
     * @memberof Run
     */
    'BlockedCount'?: number | null;
    /**
     * 归档时间
     * @type {string}
     * @memberof Run
     */
    'CompletedAt'?: string | null;
    /**
     * 环境标识
     * @type {number}
     * @memberof Run
     */
    'ConfigEnvironmentId'?: number | null;
    /**
     * 创建时间
     * @type {string}
     * @memberof Run
     */
    'CreatedAt'?: string | null;
    /**
     * 创建人ID
     * @type {number}
     * @memberof Run
     */
    'CreatedBy'?: number | null;
    /**
     * 持续天数
     * @type {number}
     * @memberof Run
     */
    'Days'?: number | null;
    /**
     * 描述
     * @type {string}
     * @memberof Run
     */
    'Description'?: string | null;
    /**
     * 执行方式: 1-手动执行 2-自动化流水线执行
     * @type {number}
     * @memberof Run
     */
    'ExecuteType'?: number | null;
    /**
     * 计划内失败测试数量
     * @type {number}
     * @memberof Run
     */
    'FailedCount'?: number | null;
    /**
     * 代码仓库 ID
     * @type {number}
     * @memberof Run
     */
    'GitDepotId'?: number | null;
    /**
     * 代码仓库名名称
     * @type {string}
     * @memberof Run
     */
    'GitDepotName'?: string | null;
    /**
     * 发布版本 ID（资源 ID）
     * @type {number}
     * @memberof Run
     */
    'GitReleaseId'?: number | null;
    /**
     * 发布版本名称
     * @type {string}
     * @memberof Run
     */
    'GitReleaseName'?: string | null;
    /**
     * 发布版本名称状态：0-未发布 1-已发布
     * @type {number}
     * @memberof Run
     */
    'GitReleaseState'?: number | null;
    /**
     * ID 主键
     * @type {number}
     * @memberof Run
     */
    'Id'?: number | null;
    /**
     * 是否包含全部用例
     * @type {boolean}
     * @memberof Run
     */
    'IncludeAll'?: boolean | null;
    /**
     * 是否归档
     * @type {boolean}
     * @memberof Run
     */
    'IsCompleted'?: boolean | null;
    /**
     * 所属迭代 ID
     * @type {number}
     * @memberof Run
     */
    'IterationId'?: number | null;
    /**
     * 迭代名称
     * @type {string}
     * @memberof Run
     */
    'IterationName'?: string | null;
    /**
     * 名称
     * @type {string}
     * @memberof Run
     */
    'Name'?: string | null;
    /**
     * 计划内通过测试数量
     * @type {number}
     * @memberof Run
     */
    'PassedCount'?: number | null;
    /**
     * 计划内重新测试数量
     * @type {number}
     * @memberof Run
     */
    'RetestCount'?: number | null;
    /**
     * 分组 ID
     * @type {number}
     * @memberof Run
     */
    'SectionId'?: number | null;
    /**
     * 分组名
     * @type {string}
     * @memberof Run
     */
    'SectionName'?: string | null;
    /**
     * 状态: 0-未开始 1-进行中 2-已测完
     * @type {number}
     * @memberof Run
     */
    'State'?: number | null;
    /**
     * 计划内未测试数量
     * @type {number}
     * @memberof Run
     */
    'UntestedCount'?: number | null;
}
/**
 * 测试计划数据
 * @export
 * @interface RunData
 */
export interface RunData {
    /**
     * 
     * @type {Run}
     * @memberof RunData
     */
    'Run'?: Run;
}
/**
 * 测试计划列表
 * @export
 * @interface RunsData
 */
export interface RunsData {
    /**
     * 测试计划列表
     * @type {Array<Run>}
     * @memberof RunsData
     */
    'Runs'?: Array<Run> | null;
}
/**
 * 分组信息
 * @export
 * @interface Section
 */
export interface Section {
    /**
     * 分组ID
     * @type {number}
     * @memberof Section
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof Section
     */
    'Name'?: string;
    /**
     * 父级 ID
     * @type {number}
     * @memberof Section
     */
    'ParentId'?: number;
    /**
     * 排序值
     * @type {number}
     * @memberof Section
     */
    'Sort'?: number;
}
/**
 * 分组信息
 * @export
 * @interface SectionData
 */
export interface SectionData {
    /**
     * 
     * @type {Section}
     * @memberof SectionData
     */
    'Section'?: Section;
}
/**
 * 分组列表
 * @export
 * @interface SectionsData
 */
export interface SectionsData {
    /**
     * 分组列表
     * @type {Array<Section>}
     * @memberof SectionsData
     */
    'Sections'?: Array<Section> | null;
}
/**
 * ServiceAccountForm 结构
 * @export
 * @interface ServiceAccountForm
 */
export interface ServiceAccountForm {
    /**
     * 是否接受非认证证书（是：true；否：false）
     * @type {boolean}
     * @memberof ServiceAccountForm
     */
    'InsecureSkipTLSVerify': boolean;
    /**
     * 是否允许持续部署管理集群已有资源（是：false；否：true）
     * @type {boolean}
     * @memberof ServiceAccountForm
     */
    'OnlySpinnakerManaged': boolean;
    /**
     * ServiceAccount 关联的 Secret（YAML 格式，Base64 编码），添加时必填，修改时可不填
     * @type {string}
     * @memberof ServiceAccountForm
     */
    'Secret'?: string | null;
    /**
     * API Server URL
     * @type {string}
     * @memberof ServiceAccountForm
     */
    'Server': string;
}
/**
 * ServiceHook 对象
 * @export
 * @interface ServiceHook
 */
export interface ServiceHook {
    /**
     * 发送类型
     * @type {string}
     * @memberof ServiceHook
     */
    'Action'?: string;
    /**
     * 发送类型描述
     * @type {string}
     * @memberof ServiceHook
     */
    'ActionLabel'?: string;
    /**
     * 发送行为属性
     * @type {string}
     * @memberof ServiceHook
     */
    'ActionProperties'?: string;
    /**
     * 创建时间
     * @type {number}
     * @memberof ServiceHook
     */
    'CreatedAt'?: number;
    /**
     * 创建者编号
     * @type {number}
     * @memberof ServiceHook
     */
    'CreatorBy'?: number;
    /**
     * 
     * @type {ServiceHookUser}
     * @memberof ServiceHook
     */
    'CreatorByUser'?: ServiceHookUser;
    /**
     * 事件开关
     * @type {boolean}
     * @memberof ServiceHook
     */
    'Enabled'?: boolean;
    /**
     * 事件列表
     * @type {Array<string>}
     * @memberof ServiceHook
     */
    'Event'?: Array<string>;
    /**
     * 事件描述列表
     * @type {Array<string>}
     * @memberof ServiceHook
     */
    'EventLabel'?: Array<string>;
    /**
     * 过滤器属性
     * @type {string}
     * @memberof ServiceHook
     */
    'FilterProperties'?: string;
    /**
     * Service Hook 编号
     * @type {string}
     * @memberof ServiceHook
     */
    'Id'?: string;
    /**
     * 最近发送成功时间
     * @type {number}
     * @memberof ServiceHook
     */
    'LastSucceedAt'?: number;
    /**
     * Service Hook 名称
     * @type {string}
     * @memberof ServiceHook
     */
    'Name'?: string;
    /**
     * 服务类型
     * @type {string}
     * @memberof ServiceHook
     */
    'Service'?: string;
    /**
     * 服务名
     * @type {string}
     * @memberof ServiceHook
     */
    'ServiceName'?: string;
    /**
     * 发送状态
     * @type {number}
     * @memberof ServiceHook
     */
    'Status'?: number;
    /**
     * 目标数据编号
     * @type {number}
     * @memberof ServiceHook
     */
    'TargetId'?: number;
    /**
     * 目标数据类型：Project、Team,Space,Program
     * @type {string}
     * @memberof ServiceHook
     */
    'TargetType'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof ServiceHook
     */
    'UpdatedAt'?: number;
    /**
     * 更新者编号
     * @type {number}
     * @memberof ServiceHook
     */
    'UpdatedBy'?: number;
    /**
     * 
     * @type {ServiceHookUser}
     * @memberof ServiceHook
     */
    'UpdatedByUser'?: ServiceHookUser;
    /**
     * 版本
     * @type {number}
     * @memberof ServiceHook
     */
    'Version'?: number;
}
/**
 * 事件详情
 * @export
 * @interface ServiceHookEvent
 */
export interface ServiceHookEvent {
    /**
     * 分组名
     * @type {string}
     * @memberof ServiceHookEvent
     */
    'GroupLabel'?: string;
    /**
     * 分组标识
     * @type {string}
     * @memberof ServiceHookEvent
     */
    'GroupName'?: string;
    /**
     * 事件名
     * @type {string}
     * @memberof ServiceHookEvent
     */
    'Label'?: string;
    /**
     * 事件标识
     * @type {string}
     * @memberof ServiceHookEvent
     */
    'Name'?: string;
}
/**
 * Service Hook 发送记录
 * @export
 * @interface ServiceHookLog
 */
export interface ServiceHookLog {
    /**
     * 创建时间
     * @type {number}
     * @memberof ServiceHookLog
     */
    'CreatedAt'?: number | null;
    /**
     * 事件名
     * @type {string}
     * @memberof ServiceHookLog
     */
    'Event'?: string | null;
    /**
     * 日志记录编号
     * @type {string}
     * @memberof ServiceHookLog
     */
    'Id'?: string;
    /**
     * 发送请求内容
     * @type {string}
     * @memberof ServiceHookLog
     */
    'RequestContent'?: string | null;
    /**
     * 发送请求头
     * @type {string}
     * @memberof ServiceHookLog
     */
    'RequestHeaders'?: string | null;
    /**
     * 发送请求编号
     * @type {string}
     * @memberof ServiceHookLog
     */
    'RequestId'?: string | null;
    /**
     * 响应事件
     * @type {number}
     * @memberof ServiceHookLog
     */
    'ResponseAt'?: number | null;
    /**
     * 响应内容
     * @type {string}
     * @memberof ServiceHookLog
     */
    'ResponseBody'?: string | null;
    /**
     * 响应头
     * @type {string}
     * @memberof ServiceHookLog
     */
    'ResponseHeaders'?: string | null;
    /**
     * 响应状态码
     * @type {number}
     * @memberof ServiceHookLog
     */
    'ResponseStatus'?: number | null;
    /**
     * 发送事件
     * @type {number}
     * @memberof ServiceHookLog
     */
    'SendAt'?: number | null;
    /**
     * Service Hook 编号
     * @type {string}
     * @memberof ServiceHookLog
     */
    'ServiceHookId'?: string | null;
    /**
     * 发送状态
     * @type {number}
     * @memberof ServiceHookLog
     */
    'Status'?: number | null;
}
/**
 * Service Hook 发送记录分页
 * @export
 * @interface ServiceHookLogPage
 */
export interface ServiceHookLogPage {
    /**
     * Service Hook 发送记录列表
     * @type {Array<ServiceHookLog>}
     * @memberof ServiceHookLogPage
     */
    'Log'?: Array<ServiceHookLog>;
    /**
     * 分页页码
     * @type {number}
     * @memberof ServiceHookLogPage
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof ServiceHookLogPage
     */
    'PageSize'?: number;
    /**
     * 总记录数
     * @type {number}
     * @memberof ServiceHookLogPage
     */
    'TotalCount'?: number;
}
/**
 * Service Hook 分页数据
 * @export
 * @interface ServiceHookPage
 */
export interface ServiceHookPage {
    /**
     * 分页页码
     * @type {number}
     * @memberof ServiceHookPage
     */
    'PageNumber'?: number;
    /**
     * 分页大小
     * @type {number}
     * @memberof ServiceHookPage
     */
    'PageSize'?: number;
    /**
     * Service Hook 列表
     * @type {Array<ServiceHook>}
     * @memberof ServiceHookPage
     */
    'ServiceHook'?: Array<ServiceHook>;
    /**
     * 总记录数
     * @type {number}
     * @memberof ServiceHookPage
     */
    'TotalCount'?: number;
}
/**
 * 
 * @export
 * @interface ServiceHookResendServiceHookResult
 */
export interface ServiceHookResendServiceHookResult {
    /**
     * 是否成功
     * @type {boolean}
     * @memberof ServiceHookResendServiceHookResult
     */
    'Success': boolean;
}
/**
 * ServiceHook User 对象
 * @export
 * @interface ServiceHookUser
 */
export interface ServiceHookUser {
    /**
     * 用户头像
     * @type {string}
     * @memberof ServiceHookUser
     */
    'Avatar'?: string;
    /**
     * 用户编号
     * @type {number}
     * @memberof ServiceHookUser
     */
    'Id'?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof ServiceHookUser
     */
    'Name'?: string;
    /**
     * 用户名拼音
     * @type {string}
     * @memberof ServiceHookUser
     */
    'NamePinyin'?: string;
}
/**
 * 
 * @export
 * @interface SetGrantToResourceRequest
 */
export interface SetGrantToResourceRequest {
    /**
     * 授权信息
     * @type {Array<GrantInfo>}
     * @memberof SetGrantToResourceRequest
     */
    'Grants'?: Array<GrantInfo>;
    /**
     * 
     * @type {ResourceInfo}
     * @memberof SetGrantToResourceRequest
     */
    'Resource'?: ResourceInfo;
}
/**
 * 
 * @export
 * @interface SetPredicatePolicyOnResourceRequest
 */
export interface SetPredicatePolicyOnResourceRequest {
    /**
     * 
     * @type {ResourceInfo}
     * @memberof SetPredicatePolicyOnResourceRequest
     */
    'Resource'?: ResourceInfo;
    /**
     *   SELF_PARENT // 同时使用父级资源+当前资源   SELF_NONE  // 只使用当前消息   NONE_PARENT  // 只使用父级资源
     * @type {string}
     * @memberof SetPredicatePolicyOnResourceRequest
     */
    'ResourcePredicatePolicy'?: SetPredicatePolicyOnResourceRequestResourcePredicatePolicyEnum;
}

export const SetPredicatePolicyOnResourceRequestResourcePredicatePolicyEnum = {
    SelfParent: 'SELF_PARENT',
    SelfNone: 'SELF_NONE',
    NoneParent: 'NONE_PARENT'
} as const;

export type SetPredicatePolicyOnResourceRequestResourcePredicatePolicyEnum = typeof SetPredicatePolicyOnResourceRequestResourcePredicatePolicyEnum[keyof typeof SetPredicatePolicyOnResourceRequestResourcePredicatePolicyEnum];

/**
 * 指定的制品
 * @export
 * @interface SpecifiedArtifact
 */
export interface SpecifiedArtifact {
    /**
     * 制品包名称（必须配合 VersionName 使用）
     * @type {string}
     * @memberof SpecifiedArtifact
     */
    'PackageName'?: string;
    /**
     * 制品版本（必须配合 PackageName 使用）
     * @type {string}
     * @memberof SpecifiedArtifact
     */
    'VersionName'?: string;
}
/**
 * SSH 公钥详细信息
 * @export
 * @interface SshKeyInfo
 */
export interface SshKeyInfo {
    /**
     * 创建时间
     * @type {number}
     * @memberof SshKeyInfo
     */
    'CreatedAt'?: number;
    /**
     * 过期时间
     * @type {string}
     * @memberof SshKeyInfo
     */
    'ExpirationDate'?: string;
    /**
     * 指纹信息
     * @type {string}
     * @memberof SshKeyInfo
     */
    'FingerPrint'?: string;
    /**
     * 是否过期
     * @type {boolean}
     * @memberof SshKeyInfo
     */
    'HasExpired'?: boolean;
    /**
     * 公钥Id
     * @type {number}
     * @memberof SshKeyInfo
     */
    'Id'?: number;
    /**
     * 公钥所属者Id
     * @type {number}
     * @memberof SshKeyInfo
     */
    'OwnerId'?: number;
    /**
     * 公钥标题
     * @type {string}
     * @memberof SshKeyInfo
     */
    'Title'?: string;
}
/**
 * 查询提交对应的流水线状态
 * @export
 * @interface StatusCheckResult
 */
export interface StatusCheckResult {
    /**
     * 提交sha
     * @type {string}
     * @memberof StatusCheckResult
     */
    'CommitSha'?: string | null;
    /**
     * 流水线文本内容
     * @type {string}
     * @memberof StatusCheckResult
     */
    'Context'?: string | null;
    /**
     * 记录创建时间
     * @type {number}
     * @memberof StatusCheckResult
     */
    'CreateDate'?: number | null;
    /**
     * 仓库路径
     * @type {number}
     * @memberof StatusCheckResult
     */
    'DepotId'?: number | null;
    /**
     * 流水线状态描述
     * @type {string}
     * @memberof StatusCheckResult
     */
    'Description'?: string | null;
    /**
     * 构建状态
     * @type {string}
     * @memberof StatusCheckResult
     */
    'State'?: string | null;
    /**
     * 流水线链接地址
     * @type {string}
     * @memberof StatusCheckResult
     */
    'TargetURL'?: string | null;
}
/**
 * 子工作项信息
 * @export
 * @interface SubTask
 */
export interface SubTask {
    /**
     * 
     * @type {User}
     * @memberof SubTask
     */
    'Assignee'?: User;
    /**
     * 子工作项 Code
     * @type {number}
     * @memberof SubTask
     */
    'Code'?: number;
    /**
     * 事项状态 Id
     * @type {number}
     * @memberof SubTask
     */
    'IssueStatusId'?: number | null;
    /**
     * 事项状态名称
     * @type {string}
     * @memberof SubTask
     */
    'IssueStatusName'?: string | null;
    /**
     * 名称
     * @type {string}
     * @memberof SubTask
     */
    'Name'?: string;
    /**
     * 优先级：  \"0\" - 低，  \"1\" - 中，  \"2\" - 高，  \"3\" - 紧急，  \"\" - 未指定
     * @type {string}
     * @memberof SubTask
     */
    'Priority'?: string | null;
    /**
     * 事项类型名称
     * @type {string}
     * @memberof SubTask
     */
    'Type'?: string | null;
}
/**
 * TKEConfigForm 结构
 * @export
 * @interface TKEConfigForm
 */
export interface TKEConfigForm {
    /**
     * TKE 集群 ID
     * @type {string}
     * @memberof TKEConfigForm
     */
    'ClusterId': string;
    /**
     * 将为选择的每个命名空间自动生成用于访问 CODING Docker 仓库的凭据（ImagePullSecrets）
     * @type {Array<string>}
     * @memberof TKEConfigForm
     */
    'Namespaces'?: Array<string> | null;
    /**
     * 是否允许持续部署管理集群已有资源（是：false；否：true）
     * @type {boolean}
     * @memberof TKEConfigForm
     */
    'OnlySpinnakerManaged': boolean;
    /**
     * TKE 地域
     * @type {string}
     * @memberof TKEConfigForm
     */
    'Region': string;
}
/**
 * 团队管理员信息
 * @export
 * @interface TeamAdminMember
 */
export interface TeamAdminMember {
    /**
     * 头像
     * @type {string}
     * @memberof TeamAdminMember
     */
    'Avatar'?: string;
    /**
     * 用户 GK
     * @type {string}
     * @memberof TeamAdminMember
     */
    'GlobalKey'?: string;
    /**
     * 用户Id
     * @type {number}
     * @memberof TeamAdminMember
     */
    'Id'?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof TeamAdminMember
     */
    'Name'?: string;
    /**
     * 用户名拼音
     * @type {string}
     * @memberof TeamAdminMember
     */
    'NamePinYin'?: string;
    /**
     * 团队Id
     * @type {number}
     * @memberof TeamAdminMember
     */
    'TeamId'?: number;
}
/**
 * 团队管理员分页数据
 * @export
 * @interface TeamAdminMemberData
 */
export interface TeamAdminMemberData {
    /**
     * 团队管理员列表信息
     * @type {Array<TeamAdminMember>}
     * @memberof TeamAdminMemberData
     */
    'Members'?: Array<TeamAdminMember>;
    /**
     * 第几页
     * @type {number}
     * @memberof TeamAdminMemberData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof TeamAdminMemberData
     */
    'PageSize'?: number;
    /**
     * 总条数
     * @type {number}
     * @memberof TeamAdminMemberData
     */
    'TotalCount'?: number;
}
/**
 * 制品完整信息
 * @export
 * @interface TeamArtifact
 */
export interface TeamArtifact {
    /**
     * 制品类型（1-generic;2-docker;3-maven;4-npm;5-pypi;6-helm;7-composer;8-nuget;9-conan;10-cocoapods;11-rpm）
     * @type {number}
     * @memberof TeamArtifact
     */
    'ArtifactType'?: number;
    /**
     * 推送时间
     * @type {number}
     * @memberof TeamArtifact
     */
    'CreatedAt'?: number;
    /**
     * 制品描述
     * @type {string}
     * @memberof TeamArtifact
     */
    'Description'?: string;
    /**
     * 下载次数
     * @type {string}
     * @memberof TeamArtifact
     */
    'DownloadCount'?: string;
    /**
     * 制品hash
     * @type {string}
     * @memberof TeamArtifact
     */
    'Hash'?: string;
    /**
     * 制品名称
     * @type {string}
     * @memberof TeamArtifact
     */
    'Package'?: string;
    /**
     * 制品版本
     * @type {string}
     * @memberof TeamArtifact
     */
    'PackageVersion'?: string;
    /**
     * 制品包ID
     * @type {number}
     * @memberof TeamArtifact
     */
    'PkgId'?: number;
    /**
     * 项目ID
     * @type {number}
     * @memberof TeamArtifact
     */
    'ProjectId'?: number;
    /**
     * 项目名称
     * @type {boolean}
     * @memberof TeamArtifact
     */
    'ProjectName'?: boolean;
    /**
     * 发布状态（1=未发布，2=已发布）
     * @type {number}
     * @memberof TeamArtifact
     */
    'ReleaseStatus'?: number;
    /**
     * 制品仓库ID
     * @type {number}
     * @memberof TeamArtifact
     */
    'RepoId'?: number;
    /**
     * 制品仓库名称
     * @type {string}
     * @memberof TeamArtifact
     */
    'Repository'?: string;
    /**
     * 制品代销
     * @type {number}
     * @memberof TeamArtifact
     */
    'Size'?: number;
    /**
     * 制品版本ID
     * @type {number}
     * @memberof TeamArtifact
     */
    'VersionId'?: number;
}
/**
 * 团队制品列表分页实体
 * @export
 * @interface TeamArtifactPage
 */
export interface TeamArtifactPage {
    /**
     * 当前页的版本列表
     * @type {Array<TeamArtifact>}
     * @memberof TeamArtifactPage
     */
    'InstanceSet'?: Array<TeamArtifact>;
    /**
     * 页码
     * @type {number}
     * @memberof TeamArtifactPage
     */
    'PageNumber'?: number;
    /**
     * 每页展示数量
     * @type {number}
     * @memberof TeamArtifactPage
     */
    'PageSize'?: number;
    /**
     * 总数
     * @type {number}
     * @memberof TeamArtifactPage
     */
    'TotalCount'?: number;
}
/**
 * 团队和团队所有者信息
 * @export
 * @interface TeamData
 */
export interface TeamData {
    /**
     * 团队域名
     * @type {string}
     * @memberof TeamData
     */
    'TeamHost'?: string;
    /**
     * 团队名-拼音
     * @type {string}
     * @memberof TeamData
     */
    'NamePinYin'?: string;
    /**
     * 团队ID
     * @type {number}
     * @memberof TeamData
     */
    'Id'?: number;
    /**
     * 
     * @type {UserData}
     * @memberof TeamData
     */
    'TeamOwner'?: UserData;
    /**
     * 团队图标
     * @type {string}
     * @memberof TeamData
     */
    'Avatar'?: string;
    /**
     * 团队名
     * @type {string}
     * @memberof TeamData
     */
    'Name'?: string;
    /**
     * 是否实名认证
     * @type {boolean}
     * @memberof TeamData
     */
    'IsVerification'?: boolean;
}
/**
 * 事项筛选条件
 * @export
 * @interface TeamIssueCondition
 */
export interface TeamIssueCondition {
    /**
     * 常量值  \"UNSPECIFIC\" 表示未指定，例如：处理人、需求类型、标签等字段，使用此值来筛选未指定处理人、需求类型或标签的事项。
     * @type {string}
     * @memberof TeamIssueCondition
     */
    'ConstValue'?: string;
    /**
     * 自定义字段 Id，Key 为 \"CUSTOM\" 时需设置该值，常规字段无需设置。
     * @type {number}
     * @memberof TeamIssueCondition
     */
    'CustomFieldId'?: number;
    /**
     * 筛选字段 KEY，可选值如下。ISSUE_TYPE_ID: 具体的事项类型, 可以调用https://coding.net/help/openapi#/operations/DescribeTeamIssueTypeList获取, 多选; PROJECT: 项目/项目集 多选; DEFECT_TYPE：缺陷类型，多选; REQUIREMENT_TYPE：需求类型，多选; MISSION_TYPE：任务类型，多选; PRIORITY;  优先级，多选;DUE_DATE：截止日期，日期范围; UPDATED_AT：更新时间，日期范围; CREATED_AT：创建时间，日期范围; START_DATE：开始日期，日期范围; ASSIGNEE：处理人ID，多选; CREATOR：创建者ID，多选;WATCHER：关注者ID，多选;MODULE：模块，多选; LABEL：标签，多选;STATUS：状态，多选;STATUS_TYPE：状态类型，多选;KEYWORD：事项名称、CODE 模糊搜索;  ISSUE_SUB_TYPE：事项的子项类型，多选; WORKING_HOURS：预估工时，数值范围; ITERATION：迭代，多选; PARTICIPANT 经办人 多选; ASSOCIATE_PROGRAM 关联项目集 多选; ASSOCIATE_RELEASE 版本 多选; PROGRESS 进度 数字范围(例如: {start: \"1\", end: \"19\"}); PARENT：父需求，多选;CUSTOM：自定义字段，同时需指定 CustomFieldId
     * @type {string}
     * @memberof TeamIssueCondition
     */
    'Key': string;
    /**
     * 筛选值，多选值用逗号隔开。日期格式: 2020-08-01，日期时间格式: 2020-08-01 12:00:00整数、小数、日期、日期时间类型的字段值应为一个范围，前后闭区间，范围开始值与结束值之间使用_连接，例如：0.1_5.0、2020-08-01_2020-08-31。Key为ITERATION时, Value为数据库ID
     * @type {string}
     * @memberof TeamIssueCondition
     */
    'Value'?: string;
}
/**
 * 事项筛选条件
 * @export
 * @interface TeamIssueSortCondition
 */
export interface TeamIssueSortCondition {
    /**
     * 自定义字段 Id，Key 为 \"CUSTOM\" 时需设置该值，常规字段无需设置。
     * @type {number}
     * @memberof TeamIssueSortCondition
     */
    'CustomFieldId'?: number;
    /**
     * 筛选字段 KEY，可选值如下。  DEFECT_TYPE：缺陷类型;   REQUIREMENT_TYPE：需求类型;   MISSION_TYPE：任务类型;   PRIORITY; 优先级;   DUE_DATE：截止日期;   UPDATED_AT：更新时间;   CREATED_AT：创建时间;   START_DATE：开始日期;   ASSIGNEE：处理人;   CREATOR：创建者;  WATCHER：关注者;  MODULE：模块  LABEL：标签;  STATUS：状态;  STATUS_TYPE：状态类型;  KEYWORD：事项名称、CODE 模糊搜索  ISSUE_TYPE：事项类型;  ISSUE_SUB_TYPE：事项的子项类型;  WORKING_HOURS：预估工时  ITERATION：迭代;  PARENT：父需求;  CUSTOM：自定义字段，同时需指定 CustomFieldId
     * @type {string}
     * @memberof TeamIssueSortCondition
     */
    'Key': string;
    /**
     * 排序值, DESC/ASC
     * @type {string}
     * @memberof TeamIssueSortCondition
     */
    'Value'?: string;
}
/**
 * 团队成员分页信息
 * @export
 * @interface TeamMemberData
 */
export interface TeamMemberData {
    /**
     * 第几页
     * @type {number}
     * @memberof TeamMemberData
     */
    'PageNumber'?: number;
    /**
     * 每页条数
     * @type {number}
     * @memberof TeamMemberData
     */
    'PageSize'?: number;
    /**
     * 成员列表信息
     * @type {Array<UserData>}
     * @memberof TeamMemberData
     */
    'TeamMembers'?: Array<UserData>;
    /**
     * 总条数
     * @type {number}
     * @memberof TeamMemberData
     */
    'TotalCount'?: number;
}
/**
 * TencentCloudAccountForm 结构
 * @export
 * @interface TencentCloudAccountForm
 */
export interface TencentCloudAccountForm {
    /**
     * CVM 地域
     * @type {Array<string>}
     * @memberof TencentCloudAccountForm
     */
    'Regions': Array<string> | null;
    /**
     * 腾讯云 API 密钥 ID
     * @type {string}
     * @memberof TencentCloudAccountForm
     */
    'SecretId': string | null;
    /**
     * 腾讯云 API 密钥 Key
     * @type {string}
     * @memberof TencentCloudAccountForm
     */
    'SecretKey'?: string | null;
}
/**
 * 测试任务信息
 * @export
 * @interface Test
 */
export interface Test {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof Test
     */
    'AssignedToId'?: number | null;
    /**
     * 用例 ID
     * @type {number}
     * @memberof Test
     */
    'CaseId'?: number | null;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof Test
     */
    'Id'?: number | null;
    /**
     * 是否归档
     * @type {boolean}
     * @memberof Test
     */
    'IsCompleted'?: boolean | null;
    /**
     * 优先级
     * @type {number}
     * @memberof Test
     */
    'Priority'?: number | null;
    /**
     * 分组 ID
     * @type {number}
     * @memberof Test
     */
    'SectionId'?: number | null;
    /**
     * 排序
     * @type {number}
     * @memberof Test
     */
    'Sort'?: number | null;
    /**
     * 状态
     * @type {string}
     * @memberof Test
     */
    'Status'?: string | null;
    /**
     * 测试时间
     * @type {string}
     * @memberof Test
     */
    'TestedAt'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof Test
     */
    'Title'?: string | null;
}
/**
 * 测试任务详情
 * @export
 * @interface TestData
 */
export interface TestData {
    /**
     * 
     * @type {TestFull}
     * @memberof TestData
     */
    'Test'?: TestFull;
}
/**
 * 测试任务的缺陷信息
 * @export
 * @interface TestDefect
 */
export interface TestDefect {
    /**
     * 处理人
     * @type {string}
     * @memberof TestDefect
     */
    'AssignedTo'?: string | null;
    /**
     * 创建人
     * @type {string}
     * @memberof TestDefect
     */
    'Author'?: string | null;
    /**
     * 创建时间
     * @type {string}
     * @memberof TestDefect
     */
    'CreatedAt'?: string | null;
    /**
     * 描述
     * @type {string}
     * @memberof TestDefect
     */
    'Description'?: string | null;
    /**
     * 缺陷 ID
     * @type {number}
     * @memberof TestDefect
     */
    'Id'?: number | null;
    /**
     * 标题
     * @type {string}
     * @memberof TestDefect
     */
    'Name'?: string | null;
    /**
     * 状态
     * @type {string}
     * @memberof TestDefect
     */
    'Status'?: string | null;
    /**
     * 状态名称
     * @type {string}
     * @memberof TestDefect
     */
    'StatusName'?: string | null;
}
/**
 * 测试任务缺陷数据
 * @export
 * @interface TestDefectsData
 */
export interface TestDefectsData {
    /**
     * 测试任务的缺陷信息
     * @type {Array<TestDefect>}
     * @memberof TestDefectsData
     */
    'Defects'?: Array<TestDefect>;
}
/**
 * 测试任务详细信息
 * @export
 * @interface TestFull
 */
export interface TestFull {
    /**
     * 处理人 ID
     * @type {number}
     * @memberof TestFull
     */
    'AssignedToId'?: number | null;
    /**
     * 
     * @type {Case}
     * @memberof TestFull
     */
    'Case'?: Case;
    /**
     * 用例 ID
     * @type {number}
     * @memberof TestFull
     */
    'CaseId'?: number | null;
    /**
     * 测试任务 ID
     * @type {number}
     * @memberof TestFull
     */
    'Id'?: number | null;
    /**
     * 是否归档
     * @type {boolean}
     * @memberof TestFull
     */
    'IsCompleted'?: boolean | null;
    /**
     * 优先级
     * @type {number}
     * @memberof TestFull
     */
    'Priority'?: number | null;
    /**
     * 分组 ID
     * @type {number}
     * @memberof TestFull
     */
    'SectionId'?: number | null;
    /**
     * 用例所属分组（按层级由上到下排序）
     * @type {Array<string>}
     * @memberof TestFull
     */
    'SectionPath'?: Array<string> | null;
    /**
     * 排序
     * @type {number}
     * @memberof TestFull
     */
    'Sort'?: number | null;
    /**
     * 状态
     * @type {string}
     * @memberof TestFull
     */
    'Status'?: string | null;
    /**
     * 测试时间
     * @type {string}
     * @memberof TestFull
     */
    'TestedAt'?: string | null;
    /**
     * 测试人 ID
     * @type {number}
     * @memberof TestFull
     */
    'TestedBy'?: number | null;
    /**
     * 标题
     * @type {string}
     * @memberof TestFull
     */
    'Title'?: string | null;
}
/**
 * 测试任务列表
 * @export
 * @interface TestsData
 */
export interface TestsData {
    /**
     * 测试任务信息
     * @type {Array<Test>}
     * @memberof TestsData
     */
    'Tests'?: Array<Test> | null;
}
/**
 * 用于wiki 压缩包导入时的验证
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 验证文件的Token（用于导入wiki zip import 使用）
     * @type {string}
     * @memberof Token
     */
    'AuthToken'?: string;
    /**
     * cos存储对象
     * @type {string}
     * @memberof Token
     */
    'Provider'?: string;
    /**
     * cos上传的Id
     * @type {string}
     * @memberof Token
     */
    'SecretId'?: string;
    /**
     * cos上传的key （用于导入wiki zip import 使用）
     * @type {string}
     * @memberof Token
     */
    'SecretKey'?: string;
    /**
     * 获取token 的时间（用于导入wiki zip import使用）
     * @type {number}
     * @memberof Token
     */
    'Time'?: number;
    /**
     * 上传文件的Token
     * @type {string}
     * @memberof Token
     */
    'UpToken'?: string;
    /**
     * 上传地址
     * @type {string}
     * @memberof Token
     */
    'UploadLink'?: string;
}
/**
 * 
 * @export
 * @interface TriggerCdPipeline200Response
 */
export interface TriggerCdPipeline200Response {
    /**
     * 
     * @type {TriggerCdPipeline200ResponseResponse}
     * @memberof TriggerCdPipeline200Response
     */
    'Response'?: TriggerCdPipeline200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface TriggerCdPipeline200ResponseResponse
 */
export interface TriggerCdPipeline200ResponseResponse {
    /**
     * 
     * @type {TriggerCdPipelineResponseData}
     * @memberof TriggerCdPipeline200ResponseResponse
     */
    'Data'?: TriggerCdPipelineResponseData;
    /**
     * 请求id
     * @type {string}
     * @memberof TriggerCdPipeline200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 
 * @export
 * @interface TriggerCdPipelineRequest
 */
export interface TriggerCdPipelineRequest {
    /**
     * CD 应用名
     * @type {string}
     * @memberof TriggerCdPipelineRequest
     */
    'Application'?: string;
    /**
     * 部署流程名称或 ID
     * @type {string}
     * @memberof TriggerCdPipelineRequest
     */
    'PipelineNameOrId'?: string;
    /**
     * 触发参数 JSON 配置
     * @type {string}
     * @memberof TriggerCdPipelineRequest
     */
    'TriggerJsonContent'?: string;
}
/**
 * TriggerCdPipelineResponseData 结构
 * @export
 * @interface TriggerCdPipelineResponseData
 */
export interface TriggerCdPipelineResponseData {
    /**
     * 部署流程执行记录 ID
     * @type {string}
     * @memberof TriggerCdPipelineResponseData
     */
    'PipelineExecutionId'?: string;
    /**
     * 部署流程执行记录引用
     * @type {string}
     * @memberof TriggerCdPipelineResponseData
     */
    'PipelineExecutionRef'?: string;
}
/**
 * 
 * @export
 * @interface TriggerCodingCIBuild200Response
 */
export interface TriggerCodingCIBuild200Response {
    /**
     * 
     * @type {TriggerCodingCIBuild200ResponseResponse}
     * @memberof TriggerCodingCIBuild200Response
     */
    'Response'?: TriggerCodingCIBuild200ResponseResponse;
}
/**
 * 公共返回体
 * @export
 * @interface TriggerCodingCIBuild200ResponseResponse
 */
export interface TriggerCodingCIBuild200ResponseResponse {
    /**
     * 
     * @type {TriggerCodingCIBuildData}
     * @memberof TriggerCodingCIBuild200ResponseResponse
     */
    'Data'?: TriggerCodingCIBuildData;
    /**
     * 请求id
     * @type {string}
     * @memberof TriggerCodingCIBuild200ResponseResponse
     */
    'RequestId'?: string;
}
/**
 * 触发构建返回数据
 * @export
 * @interface TriggerCodingCIBuildData
 */
export interface TriggerCodingCIBuildData {
    /**
     * 
     * @type {CodingCIBuild}
     * @memberof TriggerCodingCIBuildData
     */
    'Build'?: CodingCIBuild;
}
/**
 * 
 * @export
 * @interface TriggerCodingCIBuildRequest
 */
export interface TriggerCodingCIBuildRequest {
    /**
     * 构建计划 Id
     * @type {number}
     * @memberof TriggerCodingCIBuildRequest
     */
    'JobId'?: number;
    /**
     * 构建附加的环境变量
     * @type {Array<CodingCIJobEnv>}
     * @memberof TriggerCodingCIBuildRequest
     */
    'ParamList'?: Array<CodingCIJobEnv>;
    /**
     * 可重入字符串
     * @type {string}
     * @memberof TriggerCodingCIBuildRequest
     */
    'Reentrant'?: string;
    /**
     * 分支名或 CommitId，当为构建计划的 DepotType 为 NONE 是可不传
     * @type {string}
     * @memberof TriggerCodingCIBuildRequest
     */
    'Revision'?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserGroupByIdRequest
 */
export interface UpdateUserGroupByIdRequest {
    /**
     * 用户组描述
     * @type {string}
     * @memberof UpdateUserGroupByIdRequest
     */
    'Description'?: string;
    /**
     * 用户组ID
     * @type {number}
     * @memberof UpdateUserGroupByIdRequest
     */
    'GroupId'?: number;
    /**
     * 用户组名称
     * @type {string}
     * @memberof UpdateUserGroupByIdRequest
     */
    'Name'?: string;
}
/**
 * 用户信息
 * @export
 * @interface User
 */
export interface User {
    /**
     * 头像地址
     * @type {string}
     * @memberof User
     */
    'Avatar'?: string;
    /**
     * 邮箱
     * @type {string}
     * @memberof User
     */
    'Email'?: string;
    /**
     * gk
     * @type {string}
     * @memberof User
     */
    'GlobalKey'?: string;
    /**
     * userId
     * @type {number}
     * @memberof User
     */
    'Id'?: number;
    /**
     * 名称
     * @type {string}
     * @memberof User
     */
    'Name'?: string;
    /**
     * 电话
     * @type {string}
     * @memberof User
     */
    'Phone'?: string;
    /**
     * 状态
     * @type {number}
     * @memberof User
     */
    'Status'?: number | null;
    /**
     * 团队gk
     * @type {string}
     * @memberof User
     */
    'TeamGlobalKey'?: string;
    /**
     * 团队Id
     * @type {number}
     * @memberof User
     */
    'TeamId'?: number;
}
/**
 * 用户成员信息
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 头像
     * @type {string}
     * @memberof UserData
     */
    'Avatar'?: string;
    /**
     * 邮箱
     * @type {string}
     * @memberof UserData
     */
    'Email'?: string;
    /**
     * 邮箱是否验证 0 否 /1 是
     * @type {number}
     * @memberof UserData
     */
    'EmailValidation'?: UserDataEmailValidationEnum;
    /**
     * 用户 GK
     * @type {string}
     * @memberof UserData
     */
    'GlobalKey'?: string;
    /**
     * 用户Id
     * @type {number}
     * @memberof UserData
     */
    'Id'?: number;
    /**
     * 用户名
     * @type {string}
     * @memberof UserData
     */
    'Name'?: string;
    /**
     * 用户名拼音
     * @type {string}
     * @memberof UserData
     */
    'NamePinYin'?: string;
    /**
     * 手机号
     * @type {string}
     * @memberof UserData
     */
    'Phone'?: string;
    /**
     * 手机是否验证 0 否 /1 是
     * @type {number}
     * @memberof UserData
     */
    'PhoneValidation'?: UserDataPhoneValidationEnum;
    /**
     * 用户组
     * @type {Array<Role>}
     * @memberof UserData
     */
    'Roles'?: Array<Role>;
    /**
     * 用户状态 0不活跃，1活跃，-1被锁定，-2锁定登录，-3退出团队
     * @type {number}
     * @memberof UserData
     */
    'Status'?: UserDataStatusEnum;
    /**
     * 团队Id
     * @type {number}
     * @memberof UserData
     */
    'TeamId'?: number;
    /**
     * 
     * @type {ProjectMemberDepartmentMember}
     * @memberof UserData
     */
    'DepartmentMember'?: ProjectMemberDepartmentMember;
    /**
     * 团队用户扩展字段、唯一。非必填
     * @type {string}
     * @memberof UserData
     */
    'UniqueExtField'?: string;
}

export const UserDataEmailValidationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type UserDataEmailValidationEnum = typeof UserDataEmailValidationEnum[keyof typeof UserDataEmailValidationEnum];
export const UserDataPhoneValidationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type UserDataPhoneValidationEnum = typeof UserDataPhoneValidationEnum[keyof typeof UserDataPhoneValidationEnum];
export const UserDataStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_MINUS_1: -1,
    NUMBER_MINUS_2: -2,
    NUMBER_MINUS_3: -3
} as const;

export type UserDataStatusEnum = typeof UserDataStatusEnum[keyof typeof UserDataStatusEnum];

/**
 * 用户组
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * 用户组创建时间
     * @type {number}
     * @memberof UserGroup
     */
    'CreatedAt'?: number | null;
    /**
     * 用户组描述
     * @type {string}
     * @memberof UserGroup
     */
    'Description'?: string | null;
    /**
     * 用户组 ID
     * @type {number}
     * @memberof UserGroup
     */
    'Id'?: number;
    /**
     * 用户组名称
     * @type {string}
     * @memberof UserGroup
     */
    'Name'?: string;
}
/**
 * 用户组用户信息
 * @export
 * @interface UserGroupUserInfos
 */
export interface UserGroupUserInfos {
    /**
     * 用户组id
     * @type {number}
     * @memberof UserGroupUserInfos
     */
    'GroupId': number | null;
    /**
     * 用户id
     * @type {number}
     * @memberof UserGroupUserInfos
     */
    'UserId': number | null;
}
/**
 * wiki自页面列表信息
 * @export
 * @interface WikiChildrenData
 */
export interface WikiChildrenData {
    /**
     * 内容
     * @type {string}
     * @memberof WikiChildrenData
     */
    'Content'?: string;
    /**
     * 创建时间
     * @type {number}
     * @memberof WikiChildrenData
     */
    'CreatedAt'?: number;
    /**
     * 
     * @type {User}
     * @memberof WikiChildrenData
     */
    'Creator'?: User;
    /**
     * 
     * @type {User}
     * @memberof WikiChildrenData
     */
    'Editor'?: User;
    /**
     * wiki Id
     * @type {number}
     * @memberof WikiChildrenData
     */
    'Id'?: number;
    /**
     * wiki编号
     * @type {number}
     * @memberof WikiChildrenData
     */
    'Iid'?: number;
    /**
     * 是否分享
     * @type {boolean}
     * @memberof WikiChildrenData
     */
    'IsShared'?: boolean;
    /**
     * 是否整树分享
     * @type {boolean}
     * @memberof WikiChildrenData
     */
    'IsTreeShared'?: boolean;
    /**
     * 所处顺序位置
     * @type {number}
     * @memberof WikiChildrenData
     */
    'Order'?: number;
    /**
     * 父级编号
     * @type {number}
     * @memberof WikiChildrenData
     */
    'ParentIid'?: number;
    /**
     * 标题
     * @type {string}
     * @memberof WikiChildrenData
     */
    'Title'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof WikiChildrenData
     */
    'UpdatedAt'?: number;
    /**
     * 可见范围
     * @type {string}
     * @memberof WikiChildrenData
     */
    'VisibleRange'?: string;
}
/**
 * wiki的具体信息
 * @export
 * @interface WikiData
 */
export interface WikiData {
    /**
     * 是否为维护者
     * @type {boolean}
     * @memberof WikiData
     */
    'CanMaintain'?: boolean;
    /**
     * 是否可以阅读
     * @type {boolean}
     * @memberof WikiData
     */
    'CanRead'?: boolean | null;
    /**
     * 内容
     * @type {string}
     * @memberof WikiData
     */
    'Content'?: string;
    /**
     * 创建时间
     * @type {object}
     * @memberof WikiData
     */
    'CreatedAt'?: object;
    /**
     * 
     * @type {User}
     * @memberof WikiData
     */
    'Creator'?: User;
    /**
     * 当前versionId
     * @type {number}
     * @memberof WikiData
     */
    'CurrentVersion'?: number;
    /**
     * 
     * @type {User}
     * @memberof WikiData
     */
    'Editor'?: User;
    /**
     * 修改次数
     * @type {number}
     * @memberof WikiData
     */
    'HistoriesCount'?: number;
    /**
     * wiki历史Id
     * @type {number}
     * @memberof WikiData
     */
    'HistoryId'?: number;
    /**
     * 内容转成的html
     * @type {string}
     * @memberof WikiData
     */
    'Html'?: string;
    /**
     * wikiId
     * @type {number}
     * @memberof WikiData
     */
    'Id'?: number;
    /**
     * wik的code
     * @type {number}
     * @memberof WikiData
     */
    'Iid'?: number;
    /**
     * 最新versionId
     * @type {number}
     * @memberof WikiData
     */
    'LastVersion'?: number;
    /**
     * 提交说明
     * @type {string}
     * @memberof WikiData
     */
    'Msg'?: string | null;
    /**
     * 所处顺序位置
     * @type {number}
     * @memberof WikiData
     */
    'Order'?: number;
    /**
     * 父级 IiD
     * @type {number}
     * @memberof WikiData
     */
    'ParentIid'?: number;
    /**
     * 是否父级分享
     * @type {boolean}
     * @memberof WikiData
     */
    'ParentShared'?: boolean;
    /**
     * 父级可见范围
     * @type {string}
     * @memberof WikiData
     */
    'ParentVisibleRange'?: string | null;
    /**
     * 路径
     * @type {string}
     * @memberof WikiData
     */
    'Path'?: string | null;
    /**
     * 标题
     * @type {string}
     * @memberof WikiData
     */
    'Title'?: string;
    /**
     * 修改时间
     * @type {object}
     * @memberof WikiData
     */
    'UpdatedAt'?: object;
    /**
     * 可见范围
     * @type {string}
     * @memberof WikiData
     */
    'VisibleRange'?: string | null;
}
/**
 * 查询wiki导入状态信息
 * @export
 * @interface WikiJobStatus
 */
export interface WikiJobStatus {
    /**
     * 任务Id
     * @type {string}
     * @memberof WikiJobStatus
     */
    'JobId'?: string;
    /**
     * 任务状态
     * @type {string}
     * @memberof WikiJobStatus
     */
    'Status'?: string;
}
/**
 * wiki列表信息
 * @export
 * @interface WikiListData
 */
export interface WikiListData {
    /**
     * 子页面信息
     * @type {Array<WikiChildrenData>}
     * @memberof WikiListData
     */
    'Children'?: Array<WikiChildrenData>;
    /**
     * 内容
     * @type {string}
     * @memberof WikiListData
     */
    'Content'?: string;
    /**
     * 创建时间
     * @type {number}
     * @memberof WikiListData
     */
    'CreatedAt'?: number;
    /**
     * 
     * @type {User}
     * @memberof WikiListData
     */
    'Creator'?: User;
    /**
     * 
     * @type {User}
     * @memberof WikiListData
     */
    'Editor'?: User;
    /**
     * wiki Id
     * @type {number}
     * @memberof WikiListData
     */
    'Id'?: number;
    /**
     * wiki编号
     * @type {number}
     * @memberof WikiListData
     */
    'Iid'?: number;
    /**
     * 是否分享
     * @type {boolean}
     * @memberof WikiListData
     */
    'IsShared'?: boolean;
    /**
     * 是否整树分享
     * @type {boolean}
     * @memberof WikiListData
     */
    'IsTreeShared'?: boolean;
    /**
     * 所处顺序位置
     * @type {number}
     * @memberof WikiListData
     */
    'Order'?: number;
    /**
     * 父级编号
     * @type {number}
     * @memberof WikiListData
     */
    'ParentIid'?: number;
    /**
     * 标题
     * @type {string}
     * @memberof WikiListData
     */
    'Title'?: string;
    /**
     * 更新时间
     * @type {number}
     * @memberof WikiListData
     */
    'UpdatedAt'?: number;
    /**
     * 可见范围
     * @type {string}
     * @memberof WikiListData
     */
    'VisibleRange'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ✨ 测试计划归档
         * @summary 测试计划归档
         * @param {ArchiveTestRunRequest} [archiveTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTestRun: async (archiveTestRunRequest?: ArchiveTestRunRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ArchiveTestRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(archiveTestRunRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 为指定权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @summary 权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @param {AttachResourceScopeToPolicyRequest} [attachResourceScopeToPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachResourceScopeToPolicy: async (attachResourceScopeToPolicyRequest?: AttachResourceScopeToPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=AttachResourceScopeToPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attachResourceScopeToPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @summary 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachToResource: async (detachFromResourceRequest?: DetachFromResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=AttachToResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detachFromResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 绑定 CD 应用到项目
         * @summary 绑定 CD 应用到项目
         * @param {BindCdApplicationToProjectRequest} [bindCdApplicationToProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindCdApplicationToProject: async (bindCdApplicationToProjectRequest?: BindCdApplicationToProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=BindCdApplicationToProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bindCdApplicationToProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 关联外部仓库
         * @summary 外部仓库关联
         * @param {BoundExternalDepotRequest} [boundExternalDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boundExternalDepot: async (boundExternalDepotRequest?: BoundExternalDepotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=BoundExternalDepot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(boundExternalDepotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 取消执行中的 CD 部署流程
         * @summary CD 部署流程取消执行
         * @param {CancelCdPipelineRequest} [cancelCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCdPipeline: async (cancelCdPipelineRequest?: CancelCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CancelCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 清理构建计划缓存
         * @summary 构建计划缓存清理
         * @param {ClearCodingCIJobCacheRequest} [clearCodingCIJobCacheRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCodingCIJobCache: async (clearCodingCIJobCacheRequest?: ClearCodingCIJobCacheRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ClearCodingCIJobCache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clearCodingCIJobCacheRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品授信清单创建
         * @summary 制品授信清单创建
         * @param {CreateArtifactCreditRequest} [createArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactCredit: async (createArtifactCreditRequest?: CreateArtifactCreditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateArtifactCredit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createArtifactCreditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品属性新增（指定版本）
         * @summary 制品属性新增（指定版本）
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactProperties: async (modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateArtifactProperties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyArtifactPropertiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品仓库创建
         * @summary 制品仓库创建
         * @param {CreateArtifactRepositoryRequest} [createArtifactRepositoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactRepository: async (createArtifactRepositoryRequest?: CreateArtifactRepositoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateArtifactRepository`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createArtifactRepositoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 生成附件预上传信息
         * @summary 附件预上传信息生成
         * @param {CreateAttachmentPrepareSignUrlRequest} [createAttachmentPrepareSignUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachmentPrepareSignUrl: async (createAttachmentPrepareSignUrlRequest?: CreateAttachmentPrepareSignUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateAttachmentPrepareSignUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAttachmentPrepareSignUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Git仓库创建二进制文件，文件总大小不能超过10Mb
         * @summary Git文件-Git仓库创建二进制文件
         * @param {CreateBinaryFilesRequest} [createBinaryFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBinaryFiles: async (createBinaryFilesRequest?: CreateBinaryFilesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateBinaryFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBinaryFilesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增代码保护规则
         * @summary 仓库设置-新增代码保护规则
         * @param {CreateBranchProtectionRequest} [createBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchProtection: async (createBranchProtectionRequest?: CreateBranchProtectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateBranchProtection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchProtectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-新增保护分支规则管理员
         * @param {CreateBranchProtectionMemberRequest} [createBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchProtectionMember: async (createBranchProtectionMemberRequest?: CreateBranchProtectionMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateBranchProtectionMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchProtectionMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例添加测试结果
         * @summary 测试用例添加测试结果
         * @param {CreateCaseResultRequest} [createCaseResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCaseResult: async (createCaseResultRequest?: CreateCaseResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCaseResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCaseResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 云账号添加
         * @summary CD 云账号添加
         * @param {CreateCdCloudAccountRequest} [createCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdCloudAccount: async (createCdCloudAccountRequest?: CreateCdCloudAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCdCloudAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCdCloudAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组添加
         * @summary CD 主机组添加
         * @param {CreateCdHostServerGroupRequest} [createCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdHostServerGroup: async (createCdHostServerGroupRequest?: CreateCdHostServerGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCdHostServerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCdHostServerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 部署流程创建
         * @summary CD 部署流程创建
         * @param {CreateCdPipelineRequest} [createCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdPipeline: async (createCdPipelineRequest?: CreateCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 任务执行
         * @summary CD 任务执行
         * @param {CreateCdTaskRequest} [createCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdTask: async (createCdTaskRequest?: CreateCdTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCdTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCdTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建构建计划
         * @summary 构建计划创建
         * @param {CreateCodingCIJobRequest} [createCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingCIJob: async (createCodingCIJobRequest?: CreateCodingCIJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCodingCIJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCodingCIJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据团队模版创建构建计划
         * @summary 构建计划-根据团队模版创建
         * @param {CreateCodingCIJobByTeamTemplateRequest} [createCodingCIJobByTeamTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingCIJobByTeamTemplate: async (createCodingCIJobByTeamTemplateRequest?: CreateCodingCIJobByTeamTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCodingCIJobByTeamTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCodingCIJobByTeamTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Coding项目创建
         * @summary 项目创建
         * @param {CreateCodingProjectRequest} [createCodingProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingProject: async (createCodingProjectRequest?: CreateCodingProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateCodingProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCodingProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部门创建
         * @summary 部门创建
         * @param {CreateDepartmentRequest} [createDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (createDepartmentRequest?: CreateDepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据模板创建仓库
         * @summary 仓库信息-根据模板创建仓库
         * @param {CreateDepotByTemplateRequest} [createDepotByTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotByTemplate: async (createDepotByTemplateRequest?: CreateDepotByTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateDepotByTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepotByTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增 git 仓库文件推送规则
         * @summary 仓库设置-新增git仓库文件推送规则
         * @param {CreateDepotFilePushRuleRequest} [createDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotFilePushRule: async (createDepotFilePushRuleRequest?: CreateDepotFilePushRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateDepotFilePushRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepotFilePushRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增git仓库文件推送规则特权者
         * @summary 仓库设置-新增git仓库文件推送规则特权者
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotFilePushRulePrivilege: async (modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateDepotFilePushRulePrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotFilePushRuleDenyPrivilegeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ \"    文件上传        1. 获取预签名URL          Action： 固定为 DescribePreSignUploadUrl   ProjectName: 项目名称   ContentType: 内容类型，和web端的文件上传时content-type是一样的。可以参考web端上传文件时，Http Header: Content-Type   FolderType :文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。   FolderId:  若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过  open api 【创建文件夹】获取。   FileName: 保存的文件名。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe***     {       \"Action\":\"DescribePreSignUploadUrl\",       \"ProjectName\":\"zhishiguanli\",       \"FolderId\":0,       \"FolderType\":1,       \"FileName\": \"20220727_1.csv\",       \"ContentType\": \"image/jpeg\"     }      响应数据:   UploadLink: 上传文件的URL   StorageKey: 上传到存储的文件路径   AuthToken: 用于校验身份数据的token，后续接口中使用   headers: 上传时需要的token信息          ```     {       \"Response\": {         \"RequestId\": \"99b1fbfb-8477-44b3-b19f-35acbcdbdf77\",         \"Data\": {           \"UploadLink\": \"https://coding-net-production-file-1257242599.cos.ap-shanghai.myqcloud.com/c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID7B14xvfnJxWtNpV95c1sAqIwms4_GnHMa-eCuULWfvXWTqp0qv8czbirX1BlXEXd%26q-sign-time%3D1661352589%3B1661354389%26q-key-time%3D1661352589%3B1661354389%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D337c3118dd1385d33f5ada4c0492755ac7d00419\",           \"StorageKey\": \"c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv\",           \"Headers\": \"{\\\"x-cos-security-token\\\":\\\"0ZVlbeAyb6cqcbI2HcZg75xppfMACLPac9f0c5517a5d13d9731b0adb708c2ecdhK1-UdtMEqc-XpsQW5v1bB1BGeHXMlwutOM24SaUfX6lSP531QDfVrKJzLl8-NpCgKZfUE_-_Pg29lfqSvWpbd0D-4pENoBL5IDhkXO1RmmDncvxbwm_aMGRMlPL3YwQEyjPGv8KJ36ZUDm1k5ERnKYf2_OllQtoW5lSeRRnvCQUd7cAvvzSIl6WD-VxXJ2N9jX5Z_bh6B9zFXtCWjr0is550-QaLSM32V0NP0wPV4bBy9PwNLA32gxhsf24dfUZZsBZZVF67lfFGWgcK7SuZRrE_QPiEd9L4et-4KxBj4pXsAxCTWmATrcAonNq6xJ-\\\"}\",           \"AuthToken\": \"819321faa15086676c9c474b8823d6ce67aa4ec907a4e8a37fa396f990bd610c\"         }       }     }     ```                         2. 上传文件CreateFile     这个步骤需要客户端自己完成。     上传URL 可以参考 项目协同中描述内容中的上传文件的 COS URL。          2.1 COS上传   参考脚本如下:   #!/bin/bash          file=本地文件路径     storageKey=返回的StorageKey     url=https://域名/${storageKey}               # 腾讯云COS上传 curl, 注意Authorization值为sign参数，经过urldecode转化后的值。x-cos-security-token 使用 响应中的Headers中返回的值，          curl -X PUT \"${url}\" \\     -H \'Authorization:q-sign-algorithm=sha1&q-ak=AKIDr0xilQrTFEUhvpLvJ9Ro3Ds_REhKTtYv-dXFbNBY8w1aDZR7rpUNPq6hXn_SdANN&q-sign-time=1661351394;1661353194&q-key-time=1661351394;1661353194&q-header-list=host&q-url-param-list=&q-signature=2574959eebb2ddf7dd5e6e19f30126c7a63cec58\' \\     -H \'x-cos-security-token:0ZVlbeAyb6cqcbI2HcZg75xppfMACLPaba476ee7278aba618b8794dcf090c81fhK1-UdtMEqc-XpsQW5v1bHRl8XcitKZd-0CGmDfln5OqFJigfAursov8MRS8h_abNT0Bns7F7D5tN26wXra6oBlvhxZ4wU11Zk2peuDXq4eWSUWOCtvf-3IaxoCs2KEwMtSFcds1byn_00Zj2YxG8ajHQrVT6Gtry9PW3ULfNe-YPpWaX_XArXpoyjWuaXpBjIFvEhR5sB0gGSTtyXhf9S6wWJAisNlwvOls5xAdnNRHJWyt8Td_f-Lc6yYIXV-aD9ZoGyl5NEQcxEip7GQRtb-p8QD9MG_rfYsJiQ0blMGQQGzexo7YHRhRTws6dlXU\' \\     -H \'user-agent:tencentcloud-cos-postman\' \\     -H \'cosclientagent:cos_mc_v4\' \\     -H \'cosclientip:219.136.173.47\' -T \"${file}\"                    2.2 minio上传     minio 上传脚本DEMO如下：     bucket=file-storage     file=\'～/Downloads/测试简单格式1.md (2).zip\'          # 测试导入1.zip          storageKey=c5318506-8807-4612-9ad8-d751c863983d.zip     s3_key=***     s3_secret=***     host=minio.nh51daup.dev.coding.io          resource=\"/${bucket}/${storageKey}\"          # content_type=\"application/octet-stream\"          content_type=\"application/zip\"     date=`date -R`     _signature=\"PUT\\n\\n${content_type}\\n${date}\\n${resource}\"     signature=`echo -en ${_signature} | openssl sha1 -hmac ${s3_secret} -binary | base64`          # minio文件上传 curl 命令          curl -X PUT -T \"${file}\" \\   -H \"Host: ${host}\" \\   -H \"Date: ${date}\" \\   -H \"Content-Type: ${content_type}\" \\   -H \"Authorization: AWS ${s3_key}:${signature}\" \\     http://${host}${resource}          3. 保存文件   StorageKey: 获取预签名URL接口返回的 StorageKey   AuthToken: 获取预签名URL接口返回的 AuthToken          POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d**ab          {       \"Action\":\"CreateFile\",       \"StorageKey\": \"2bdb7eea-57b4-495d-a5d0-67446822cea5.csv\",       \"AuthToken\": \"76ee1e30ef6df0552f0bd939f1f0359510d60d1806028f5c64fa31c116cf3f22\"     }         响应数据格式:   Id: 保存后的文件ID。   Name: 保存后的文件名称          ```     {       \"Response\": {         \"RequestId\": \"9958d6b7-ead6-4674-9ae8-21cd3054282b\",         \"Data\": {           \"Id\": 28909581,           \"Name\": \"20220727_1.csv\"         }       }     }     ```                    4. 创建事项DEMO     更详细参数说明参考open api文档   ProjectName: 项目名称     Name： 事项名称   FileIds: 数组类型，CreateFile 后响应的ID列表               POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9e53a2**e0ddc57ab          ```     {       \"Action\":\"CreateIssue\",       \"ProjectName\":\"zhishiguanli\",       \"Type\":\"DEFECT\",       \"Name\":\"需求清221101\",       \"Priority\":\"0\",       \"FileIds\":[28909581]     }     ```               4.1 项目协同需求描述图片同步方案          ## 方案一          需求系统在通过 OpenAPI 写入 CODING 需求时，通过正则方式提取所有图片，调用 CODING OpenAPI 上传图片到文件网盘，再替换需求内图片地址。     方案前提：     需求系统展示需求数据来源客户需求系统。     具体步骤：          1. 需求系统创建或更新图片时，调用 COIDNG 项目协同创建或编辑 OpenAPI     2. 获取需求系统需求描述     3. 正则提取图片地址     4. 调用 CODING OpenAPI 上传图片到文件网盘，获取到文件 ID     5. 通过文件 ID 和项目 ID 拼接成 CODING 图片相对地址，/api/project/{projectId}/files/{imageFileId}/imagePreview     6. 保存到 CODING 系统前，通过字符替换原图片地址为/api/project/{projectId}/files/{imageFileId}/imagePreview     7. 完成          ## 方案二          CODING 侧在项目协同 OpenAPI 创建或者编辑需求时，将外站图片地址转存（或者不过滤）。          ## 结论          方案一，无需依赖 CODING 更新，可直接开始。     方案二，需要依赖 CODING 更新，正在评估预计时间。          5. 创建文件夹     该接口可用于文件网盘中创建文件夹。   ProjectName: 项目名称   FoldName: 文件夹名称   ParentId: 父文件夹ID,如果是根路径，传 0。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9**a6e0ddc57ab          ```     {       \"Action\":\"CreateFolder\",       \"ProjectName\":\"zhishiguanli\",       \"FoldName\": \"Hello-sub-test-1\",       \"ParentId\": 0     }     ```          响应：          ```     {       \"Response\": {         \"RequestId\": \"e48d9d36-7473-4fac-b005-6fdc46afa69f\",         \"Data\": {           \"Id\": 28909737,           \"Name\": \"Hello-sub-test-1\"         }       }     }     ```       \"
         * @summary 文件创建
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (createFileRequest?: CreateFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 文件夹创建
         * @summary 文件夹创建
         * @param {CreateFolderRequest} [createFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (createFolderRequest?: CreateFolderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFolderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用于代码仓库新建分支
         * @summary 仓库分支-用于代码仓库新建分支
         * @param {CreateGitBranchRequest} [createGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitBranch: async (createGitBranchRequest?: CreateGitBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建一次提交
         * @summary Git提交-创建一次提交
         * @param {CreateGitCommitRequest} [createGitCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommit: async (createGitCommitRequest?: CreateGitCommitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitCommit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitCommitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 为某次提交创建一条评论
         * @summary Git提交-为某次提交创建一条评论
         * @param {CreateGitCommitCommentRequest} [createGitCommitCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommitComment: async (createGitCommitCommentRequest?: CreateGitCommitCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitCommitComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitCommitCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建提交注释,注意：对于 NotesRef 参数建议默认为空，因为 git 会使用默认的 ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的 ref 来保存您的 git note，有可能会覆盖您原有的 ref。
         * @summary Git提交-创建提交注释。注意：对于 NotesRef 参数建议默认为空，因为git会使用默认的ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的ref来保存您的git note，有可能会覆盖您原有的ref。
         * @param {CreateGitCommitNoteRequest} [createGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommitNote: async (createGitCommitNoteRequest?: CreateGitCommitNoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitCommitNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitCommitNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新建部署公钥
         * @summary 仓库设置-新建部署公钥
         * @param {CreateGitDeployKeyRequest} [createGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitDeployKey: async (createGitDeployKeyRequest?: CreateGitDeployKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitDeployKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitDeployKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建代码仓库
         * @summary 仓库信息-创建代码仓库
         * @param {CreateGitDepotRequest} [createGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitDepot: async (createGitDepotRequest?: CreateGitDepotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitDepot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitDepotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建仓库文件
         * @summary Git文件-创建仓库文件
         * @param {CreateGitFilesRequest} [createGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitFiles: async (createGitFilesRequest?: CreateGitFilesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitFilesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建git合并请求
         * @summary 合并请求-创建git合并请求
         * @param {CreateGitMergeReqRequest} [createGitMergeReqRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitMergeReq: async (createGitMergeReqRequest?: CreateGitMergeReqRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitMergeReq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitMergeReqRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建 Git 合并请求mr
         * @summary 合并请求-创建Git合并请求mr
         * @param {CreateGitMergeRequestRequest} [createGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitMergeRequest: async (createGitMergeRequestRequest?: CreateGitMergeRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitMergeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitMergeRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建标签保护规则
         * @summary 仓库设置-创建标签保护规则
         * @param {CreateGitProtectedTagRuleRequest} [createGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitProtectedTagRule: async (createGitProtectedTagRuleRequest?: CreateGitProtectedTagRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitProtectedTagRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitProtectedTagRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 批量创建标签保护规则
         * @summary 仓库设置-批量创建标签保护规则
         * @param {CreateGitProtectedTagRulesRequest} [createGitProtectedTagRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitProtectedTagRules: async (createGitProtectedTagRulesRequest?: CreateGitProtectedTagRulesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitProtectedTagRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitProtectedTagRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新建 git 版本
         * @summary 版本信息-新建git版本
         * @param {CreateGitReleaseRequest} [createGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitRelease: async (createGitReleaseRequest?: CreateGitReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建标签
         * @summary 标签信息-创建标签
         * @param {CreateGitTagRequest} [createGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitTag: async (createGitTagRequest?: CreateGitTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateGitTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGitTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建事项
         * @summary 事项创建
         * @param {CreateIssueRequest} [createIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssue: async (createIssueRequest?: CreateIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreateIssue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 添加前置事项
         * @summary 前置事项添加
         * @param {CreateIssueBlockRequest} [createIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueBlock: async (createIssueBlockRequest?: CreateIssueBlockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateIssueBlock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssueBlockRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建事项评论
         * @summary 事项评论创建
         * @param {CreateIssueCommentRequest} [createIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueComment: async (createIssueCommentRequest?: CreateIssueCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateIssueComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssueCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建事项模块
         * @summary 事项模块创建
         * @param {CreateIssueModuleRequest} [createIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueModule: async (createIssueModuleRequest?: CreateIssueModuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreateIssueModule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssueModuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 登记工时
         * @summary 工时登记
         * @param {CreateIssueWorkHoursRequest} [createIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueWorkHours: async (createIssueWorkHoursRequest?: CreateIssueWorkHoursRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateIssueWorkHours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssueWorkHoursRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建迭代
         * @summary 迭代创建
         * @param {CreateIterationRequest} [createIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIteration: async (createIterationRequest?: CreateIterationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateIteration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIterationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 导入团队成员SSH公钥
         * @summary 仓库设置-导入团队成员SSH公钥
         * @param {CreateMemberSshKeyRequest} [createMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberSshKey: async (createMemberSshKeyRequest?: CreateMemberSshKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateMemberSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemberSshKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建合并请求行评论和改动文件diff行评论
         * @summary 合并请求-创建合并请求行评论和改动文件diff行评论
         * @param {CreateMergeRequestNoteRequest} [createMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequestNote: async (createMergeRequestNoteRequest?: CreateMergeRequestNoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateMergeRequestNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMergeRequestNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增合并请求评审者
         * @summary 合并请求-新增合并请求评审者
         * @param {CreateMergeRequestReviewerRequest} [createMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequestReviewer: async (createMergeRequestReviewerRequest?: CreateMergeRequestReviewerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateMergeRequestReviewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMergeRequestReviewerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组创建
         * @summary 权限组创建
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (createPolicyRequest?: CreatePolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreatePolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集创建
         * @summary 项目集创建
         * @param {CreateProgramRequest} [createProgramRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgram: async (createProgramRequest?: CreateProgramRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProgram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProgramRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集成员权限组添加
         * @summary 项目集成员权限组添加
         * @param {CreateProgramMemberPolicyRequest} [createProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgramMemberPolicy: async (createProgramMemberPolicyRequest?: CreateProgramMemberPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProgramMemberPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProgramMemberPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集中添加项目
         * @summary 项目集中添加项目
         * @param {CreateProgramProjectsRequest} [createProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgramProjects: async (createProgramProjectsRequest?: CreateProgramProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProgramProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProgramProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目公告创建
         * @summary 项目公告创建
         * @param {CreateProjectAnnouncementRequest} [createProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectAnnouncement: async (createProjectAnnouncementRequest?: CreateProjectAnnouncementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProjectAnnouncement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectAnnouncementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目标签创建
         * @summary 项目标签创建
         * @param {CreateProjectLabelRequest} [createProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectLabel: async (createProjectLabelRequest?: CreateProjectLabelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProjectLabel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectLabelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目成员主体新增(包含用户组、部门、成员)
         * @summary 项目成员主体新增(包含用户组、部门、成员)
         * @param {CreateProjectMemberPrincipalRequest} [createProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectMemberPrincipal: async (createProjectMemberPrincipalRequest?: CreateProjectMemberPrincipalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProjectMemberPrincipal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectMemberPrincipalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 模版项目创建
         * @summary 模版项目创建
         * @param {CreateProjectWithTemplateRequest} [createProjectWithTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWithTemplate: async (createProjectWithTemplateRequest?: CreateProjectWithTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateProjectWithTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectWithTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建只读分支
         * @summary 仓库分支-创建只读分支
         * @param {CreateReadOnlyRefRequest} [createReadOnlyRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReadOnlyRef: async (createReadOnlyRefRequest?: CreateReadOnlyRefRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateReadOnlyRef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReadOnlyRefRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建版本
         * @summary 版本创建
         * @param {CreateReleaseRequest} [createReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelease: async (createReleaseRequest?: CreateReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CreateRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 创建测试报告
         * @summary 测试报告创建
         * @param {CreateReportRequest} [createReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (createReportRequest?: CreateReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 需求关联缺陷
         * @summary 需求关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequirementDefectRelation: async (createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateRequirementDefectRelation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequirementDefectRelationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 导入用户SSH公钥
         * @summary 仓库设置-导入用户SSH公钥
         * @param {CreateSshKeyRequest} [createSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSshKey: async (createSshKeyRequest?: CreateSshKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSshKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例创建
         * @summary 测试用例创建
         * @param {CreateTestCaseRequest} [createTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestCase: async (createTestCaseRequest?: CreateTestCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例分组创建
         * @summary 测试用例分组创建
         * @param {CreateTestCaseSectionRequest} [createTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestCaseSection: async (createTestCaseSectionRequest?: CreateTestCaseSectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestCaseSection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestCaseSectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务关联缺陷
         * @summary 测试任务关联缺陷
         * @param {CreateTestDefectRequest} [createTestDefectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestDefect: async (createTestDefectRequest?: CreateTestDefectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestDefect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestDefectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务添加测试结果
         * @summary 测试任务添加测试结果
         * @param {CreateTestResultRequest} [createTestResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestResult: async (createTestResultRequest?: CreateTestResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务状态批量更新
         * @summary 测试任务状态批量更新
         * @param {CreateTestResultsRequest} [createTestResultsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestResults: async (createTestResultsRequest?: CreateTestResultsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestResults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestResultsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试计划创建
         * @summary 测试计划创建
         * @param {CreateTestRunRequest} [createTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestRun: async (createTestRunRequest?: CreateTestRunRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestRunRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务添加某步骤的测试结果
         * @summary 测试任务添加某步骤的测试结果
         * @param {CreateTestStepResultRequest} [createTestStepResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestStepResult: async (createTestStepResultRequest?: CreateTestStepResultRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateTestStepResult`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestStepResultRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组创建
         * @summary 用户组创建
         * @param {CreateUserGroupRequest} [createUserGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserGroup: async (createUserGroupRequest?: CreateUserGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateUserGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组添加用户
         * @summary 用户组添加用户
         * @param {CreateUserGroupUsersRequest} [createUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserGroupUsers: async (createUserGroupUsersRequest?: CreateUserGroupUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateUserGroupUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserGroupUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组清理用户
         * @summary 用户组清理用户
         * @param {DeleteAllUsersOnGroupRequest} [deleteAllUsersOnGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUsersOnGroup: async (deleteAllUsersOnGroupRequest?: DeleteAllUsersOnGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteAllUsersOnGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteAllUsersOnGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除指定版本制品的指定制品属性
         * @summary 制品属性删除
         * @param {DeleteArtifactPropertiesRequest} [deleteArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactProperties: async (deleteArtifactPropertiesRequest?: DeleteArtifactPropertiesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteArtifactProperties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteArtifactPropertiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除保护分支规则
         * @summary 仓库设置-删除保护分支规则
         * @param {DeleteBranchProtectionRequest} [deleteBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranchProtection: async (deleteBranchProtectionRequest?: DeleteBranchProtectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteBranchProtection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBranchProtectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-删除保护分支规则管理员
         * @param {DeleteBranchProtectionMemberRequest} [deleteBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranchProtectionMember: async (deleteBranchProtectionMemberRequest?: DeleteBranchProtectionMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteBranchProtectionMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBranchProtectionMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 云账号删除
         * @summary CD 云账号删除
         * @param {DeleteCdCloudAccountRequest} [deleteCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdCloudAccount: async (deleteCdCloudAccountRequest?: DeleteCdCloudAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteCdCloudAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCdCloudAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组删除
         * @summary CD 主机组删除
         * @param {DeleteCdHostServerGroupRequest} [deleteCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdHostServerGroup: async (deleteCdHostServerGroupRequest?: DeleteCdHostServerGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteCdHostServerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCdHostServerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 部署流程删除
         * @summary CD 部署流程删除
         * @param {DeleteCdPipelineRequest} [deleteCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdPipeline: async (deleteCdPipelineRequest?: DeleteCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除构建
         * @summary 构建删除
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCodingCIBuild: async (describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteCodingCIBuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除构建计划
         * @summary 构建计划删除
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCodingCIJob: async (deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteCodingCIJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCodingCIJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部门删除
         * @summary 部门删除
         * @param {DeleteDepartmentRequest} [deleteDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: async (deleteDepartmentRequest?: DeleteDepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除 git 仓库文件推送规则
         * @summary 仓库设置-删除git仓库文件推送规则
         * @param {DeleteDepotFilePushRuleRequest} [deleteDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepotFilePushRule: async (deleteDepotFilePushRuleRequest?: DeleteDepotFilePushRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteDepotFilePushRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDepotFilePushRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除 git 仓库特权者文件推送权限
         * @summary 仓库设置-删除git仓库特权者文件推送权限
         * @param {DeleteDepotFilePushRuleDenyPrivilegeRequest} [deleteDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepotFilePushRuleDenyPrivilege: async (deleteDepotFilePushRuleDenyPrivilegeRequest?: DeleteDepotFilePushRuleDenyPrivilegeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteDepotFilePushRuleDenyPrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDepotFilePushRuleDenyPrivilegeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除代码仓库分支
         * @summary 仓库分支-删除代码仓库分支
         * @param {DeleteGitBranchRequest} [deleteGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitBranch: async (deleteGitBranchRequest?: DeleteGitBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除部署公钥
         * @summary 仓库设置-删除部署公钥
         * @param {DeleteGitDeployKeyRequest} [deleteGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitDeployKey: async (deleteGitDeployKeyRequest?: DeleteGitDeployKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitDeployKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitDeployKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除git仓库
         * @summary 仓库信息-删除git仓库
         * @param {DeleteGitDepotRequest} [deleteGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitDepot: async (deleteGitDepotRequest?: DeleteGitDepotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitDepot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitDepotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除文件并提交
         * @summary Git文件-删除文件并提交
         * @param {DeleteGitFilesRequest} [deleteGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitFiles: async (deleteGitFilesRequest?: DeleteGitFilesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitFilesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除已合并到默认分支的分支（此操作不会删除受保护的分支）
         * @summary 仓库分支-删除已合并到默认分支的分支（此操作不会删除受保护的分支)
         * @param {DeleteGitMergedBranchesRequest} [deleteGitMergedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitMergedBranches: async (deleteGitMergedBranchesRequest?: DeleteGitMergedBranchesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitMergedBranches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitMergedBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除标签保护规则
         * @summary 标签信息-删除标签保护规则
         * @param {DeleteGitProtectedTagRuleRequest} [deleteGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitProtectedTagRule: async (deleteGitProtectedTagRuleRequest?: DeleteGitProtectedTagRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitProtectedTagRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitProtectedTagRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除仓库版本
         * @summary 版本信息-删除仓库版本
         * @param {DeleteGitReleaseRequest} [deleteGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitRelease: async (deleteGitReleaseRequest?: DeleteGitReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 代码仓库删除tag
         * @summary 标签信息-代码仓库删除tag
         * @param {DeleteGitTagRequest} [deleteGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitTag: async (deleteGitTagRequest?: DeleteGitTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteGitTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGitTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除事项
         * @summary 事项删除
         * @param {DeleteIssueRequest} [deleteIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssue: async (deleteIssueRequest?: DeleteIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteIssue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除前置事项
         * @summary 前置事项删除
         * @param {DeleteIssueBlockRequest} [deleteIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueBlock: async (deleteIssueBlockRequest?: DeleteIssueBlockRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteIssueBlock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIssueBlockRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除事项模块
         * @summary 事项模块删除
         * @param {DeleteIssueModuleRequest} [deleteIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueModule: async (deleteIssueModuleRequest?: DeleteIssueModuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeleteIssueModule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIssueModuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除工时日志
         * @summary 工时日志删除
         * @param {DeleteIssueWorkHoursRequest} [deleteIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueWorkHours: async (deleteIssueWorkHoursRequest?: DeleteIssueWorkHoursRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteIssueWorkHours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIssueWorkHoursRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除迭代
         * @summary 迭代删除
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIteration: async (deleteIterationRequest?: DeleteIterationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteIteration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIterationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除团队成员的SSH公钥
         * @summary 仓库设置-删除团队成员的SSH公钥
         * @param {DeleteMemberSshKeyRequest} [deleteMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberSshKey: async (deleteMemberSshKeyRequest?: DeleteMemberSshKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteMemberSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMemberSshKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除合并请求行评论和改动文件diff行评论
         * @summary 合并请求-删除合并请求行评论和改动文件diff行评论
         * @param {DeleteMergeRequestNoteRequest} [deleteMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMergeRequestNote: async (deleteMergeRequestNoteRequest?: DeleteMergeRequestNoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteMergeRequestNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMergeRequestNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除mr评审者
         * @summary 合并请求-删除mr评审者
         * @param {DeleteMergeRequestReviewerRequest} [deleteMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMergeRequestReviewer: async (deleteMergeRequestReviewerRequest?: DeleteMergeRequestReviewerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteMergeRequestReviewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteMergeRequestReviewerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 单个项目删除
         * @summary 单个项目删除
         * @param {DeleteOneProjectRequest} [deleteOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneProject: async (deleteOneProjectRequest?: DeleteOneProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteOneProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteOneProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组批量删除
         * @summary 权限组批量删除
         * @param {DeletePoliciesByIdRequest} [deletePoliciesByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoliciesById: async (deletePoliciesByIdRequest?: DeletePoliciesByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeletePoliciesById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deletePoliciesByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集成员权限组删除
         * @summary 项目集成员权限组删除
         * @param {DeleteProgramMemberPolicyRequest} [deleteProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgramMemberPolicy: async (deleteProgramMemberPolicyRequest?: DeleteProgramMemberPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteProgramMemberPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProgramMemberPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目公告删除
         * @summary 项目公告删除
         * @param {DeleteProjectAnnouncementRequest} [deleteProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectAnnouncement: async (deleteProjectAnnouncementRequest?: DeleteProjectAnnouncementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteProjectAnnouncement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProjectAnnouncementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目标签删除
         * @summary 项目标签删除
         * @param {DeleteProjectLabelRequest} [deleteProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectLabel: async (deleteProjectLabelRequest?: DeleteProjectLabelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteProjectLabel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProjectLabelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目成员主体删除(包含用户组、部门、成员)
         * @summary 项目成员主体删除(包含用户组、部门、成员)
         * @param {DeleteProjectMemberPrincipalRequest} [deleteProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectMemberPrincipal: async (deleteProjectMemberPrincipalRequest?: DeleteProjectMemberPrincipalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteProjectMemberPrincipal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProjectMemberPrincipalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除版本
         * @summary 版本删除
         * @param {DeleteReleaseRequest} [deleteReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelease: async (deleteReleaseRequest?: DeleteReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeleteRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试报告删除
         * @summary 测试报告删除
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (deleteReportRequest?: DeleteReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 需求取消关联缺陷
         * @summary 需求取消关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequirementDefectRelation: async (createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteRequirementDefectRelation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequirementDefectRelationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除当前用户的SSH公钥
         * @summary 仓库设置-删除当前用户的SSH公钥
         * @param {DeleteSshKeyRequest} [deleteSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSshKey: async (deleteSshKeyRequest?: DeleteSshKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteSshKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除团队级别的分支规范
         * @summary 仓库设置-删除团队级别的分支规范
         * @param {DeleteTeamLevelDepotSpecRequest} [deleteTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamLevelDepotSpec: async (deleteTeamLevelDepotSpecRequest?: DeleteTeamLevelDepotSpecRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteTeamLevelDepotSpec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTeamLevelDepotSpecRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 团队成员删除
         * @summary 团队成员删除
         * @param {DeleteTeamMemberRequest} [deleteTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamMember: async (deleteTeamMemberRequest?: DeleteTeamMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteTeamMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTeamMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例删除
         * @summary 测试用例删除
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCase: async (deleteTestCaseRequest?: DeleteTestCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteTestCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTestCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例分组删除
         * @summary 测试用例分组删除
         * @param {DeleteTestCaseSectionRequest} [deleteTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCaseSection: async (deleteTestCaseSectionRequest?: DeleteTestCaseSectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteTestCaseSection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTestCaseSectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试计划删除
         * @summary 测试计划删除
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestRun: async (deleteTestRunRequest?: DeleteTestRunRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteTestRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTestRunRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组删除
         * @summary 用户组删除
         * @param {DeleteUserGroupByIdsRequest} [deleteUserGroupByIdsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroupByIds: async (deleteUserGroupByIdsRequest?: DeleteUserGroupByIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteUserGroupByIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserGroupByIdsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组删除用户
         * @summary 用户组删除用户
         * @param {DeleteUserGroupUsersRequest} [deleteUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroupUsers: async (deleteUserGroupUsersRequest?: DeleteUserGroupUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteUserGroupUsers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserGroupUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 在堡垒机上安装 CD 客户端必要的 Secret 凭据参数
         * @summary 堡垒机安装 Secret
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAgentSecret: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeAgentSecret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取所有合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取所有合并请求行评论和改动文件diff行评论
         * @param {DescribeAllMergeRequestNotesRequest} [describeAllMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllMergeRequestNotes: async (describeAllMergeRequestNotesRequest?: DescribeAllMergeRequestNotesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeAllMergeRequestNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeAllMergeRequestNotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目标签查询
         * @summary 项目标签查询
         * @param {DescribeAllProjectLabelsRequest} [describeAllProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllProjectLabels: async (describeAllProjectLabelsRequest?: DescribeAllProjectLabelsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeAllProjectLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeAllProjectLabelsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询全部有权限的项目工时日志列表
         * @summary 工时日志列表查询
         * @param {DescribeAllProjectsIssueWorkLogListRequest} [describeAllProjectsIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllProjectsIssueWorkLogList: async (describeAllProjectsIssueWorkLogListRequest?: DescribeAllProjectsIssueWorkLogListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeAllProjectsIssueWorkLogList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeAllProjectsIssueWorkLogListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品Checksum列表查询
         * @summary 制品Checksum列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactChecksums: async (describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactChecksums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactChecksumsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过授信清单ID查询制品授信清单详情
         * @summary 查询制品授信清单详情
         * @param {DescribeArtifactCreditRequest} [describeArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactCredit: async (describeArtifactCreditRequest?: DescribeArtifactCreditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactCredit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactCreditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品授信清单列表查询
         * @summary 制品授信清单列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactCreditList: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactCreditList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品文件临时下载链接获取
         * @summary 制品文件临时下载链接获取
         * @param {DescribeArtifactFileDownloadUrlRequest} [describeArtifactFileDownloadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactFileDownloadUrl: async (describeArtifactFileDownloadUrlRequest?: DescribeArtifactFileDownloadUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactFileDownloadUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactFileDownloadUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品包（镜像）列表查询
         * @summary 制品包（镜像）列表查询
         * @param {DescribeArtifactPackageListRequest} [describeArtifactPackageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactPackageList: async (describeArtifactPackageListRequest?: DescribeArtifactPackageListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactPackageList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactPackageListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 指定制品版本的制品属性列表查询
         * @summary 制品属性列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactProperties: async (describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactProperties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactChecksumsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品仓库下可下载的文件列表获取
         * @summary 制品仓库下可下载的文件列表获取
         * @param {DescribeArtifactRepositoryFileListRequest} [describeArtifactRepositoryFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactRepositoryFileList: async (describeArtifactRepositoryFileListRequest?: DescribeArtifactRepositoryFileListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactRepositoryFileList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactRepositoryFileListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询当前团队指定项目的制品仓库列表
         * @summary 制品仓库列表查询
         * @param {DescribeArtifactRepositoryListRequest} [describeArtifactRepositoryListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactRepositoryList: async (describeArtifactRepositoryListRequest?: DescribeArtifactRepositoryListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactRepositoryList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactRepositoryListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品版本可下载的文件列表获取（暂仅支持类型为: 1-Generic;3-maven;4-npm;5-pypi 制品）
         * @summary 制品版本可下载的文件列表获取
         * @param {DescribeArtifactVersionFileListRequest} [describeArtifactVersionFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactVersionFileList: async (describeArtifactVersionFileListRequest?: DescribeArtifactVersionFileListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactVersionFileList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactVersionFileListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品版本列表查询
         * @summary 制品版本列表查询
         * @param {DescribeArtifactVersionListRequest} [describeArtifactVersionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactVersionList: async (describeArtifactVersionListRequest?: DescribeArtifactVersionListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeArtifactVersionList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactVersionListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组列表查询（指定资源）
         * @summary 权限组列表查询（指定资源）
         * @param {DescribeAvailablePoliciesOnResourceRequest} [describeAvailablePoliciesOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAvailablePoliciesOnResource: async (describeAvailablePoliciesOnResourceRequest?: DescribeAvailablePoliciesOnResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeAvailablePoliciesOnResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeAvailablePoliciesOnResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询后置事项
         * @summary 后置事项查询
         * @param {DescribeBlockIssueListRequest} [describeBlockIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBlockIssueList: async (describeBlockIssueListRequest?: DescribeBlockIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeBlockIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeBlockIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询前置事项
         * @summary 前置事项查询
         * @param {DescribeBlockedByIssueListRequest} [describeBlockedByIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBlockedByIssueList: async (describeBlockedByIssueListRequest?: DescribeBlockedByIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeBlockedByIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeBlockedByIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询单个保护分支规则
         * @summary 仓库设置-查询单个保护分支规则
         * @param {DescribeBranchProtectionRequest} [describeBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtection: async (describeBranchProtectionRequest?: DescribeBranchProtectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeBranchProtection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeBranchProtectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询保护分支规则下所有管理员信息
         * @summary 仓库设置-查询保护分支规则下所有管理员信息
         * @param {DescribeBranchProtectionMembersRequest} [describeBranchProtectionMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtectionMembers: async (describeBranchProtectionMembersRequest?: DescribeBranchProtectionMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeBranchProtectionMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeBranchProtectionMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库保护分支规则集合
         * @summary 仓库设置-查询仓库保护分支规则集合
         * @param {DescribeBranchProtectionsRequest} [describeBranchProtectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtections: async (describeBranchProtectionsRequest?: DescribeBranchProtectionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeBranchProtections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeBranchProtectionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查看两个分支是否可以合并
         * @summary 合并请求-查看两个分支是否可以合并
         * @param {DescribeCanMergeRequest} [describeCanMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCanMerge: async (describeCanMergeRequest?: DescribeCanMergeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCanMerge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCanMergeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 堡垒机列表获取
         * @summary CD 堡垒机列表获取
         * @param {DescribeCdAgentMachinesRequest} [describeCdAgentMachinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdAgentMachines: async (describeCdAgentMachinesRequest?: DescribeCdAgentMachinesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdAgentMachines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdAgentMachinesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 应用详情获取
         * @summary CD 应用详情获取
         * @param {DescribeCdApplicationRequest} [describeCdApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplication: async (describeCdApplicationRequest?: DescribeCdApplicationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdApplication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 应用列表获取
         * @summary CD 应用列表获取
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplications: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdApplications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据项目名获取关联应用列表
         * @summary 关联应用列表获取（指定项目名）
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplicationsByProject: async (describeWikiListRequest?: DescribeWikiListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdApplicationsByProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWikiListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 云账号列表获取
         * @summary CD 云账号列表获取
         * @param {DescribeCdCloudAccountsRequest} [describeCdCloudAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdCloudAccounts: async (describeCdCloudAccountsRequest?: DescribeCdCloudAccountsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdCloudAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdCloudAccountsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据应用名列表获取发布次数
         * @summary 发布次数-根据应用名列表获取
         * @param {DescribeCdDeployCountByApplicationsRequest} [describeCdDeployCountByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployCountByApplications: async (describeCdDeployCountByApplicationsRequest?: DescribeCdDeployCountByApplicationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployCountByApplications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployCountByApplicationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 关联应用的发布次数获取（指定项目名）
         * @summary 关联应用的发布次数获取（指定项目名）
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployCountByProject: async (describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployCountByProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployTimeByProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 发布时长-根据应用名列表获取
         * @summary 发布时长-根据应用名列表获取
         * @param {DescribeCdDeployTimeByApplicationsRequest} [describeCdDeployTimeByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTimeByApplications: async (describeCdDeployTimeByApplicationsRequest?: DescribeCdDeployTimeByApplicationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployTimeByApplications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployTimeByApplicationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 关联应用的发布时长-根据项目名获取
         * @summary 关联应用的发布时长-根据项目名获取
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTimeByProject: async (describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployTimeByProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployTimeByProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 发布趋势-根据应用名列表获取
         * @summary 发布趋势-根据应用名列表获取
         * @param {DescribeCdDeployTrendByApplicationsRequest} [describeCdDeployTrendByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTrendByApplications: async (describeCdDeployTrendByApplicationsRequest?: DescribeCdDeployTrendByApplicationsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployTrendByApplications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployTrendByApplicationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 关联应用的发布趋势-根据项目名获取
         * @summary 关联应用的发布趋势-根据项目名获取
         * @param {DescribeCdDeployTrendByProjectRequest} [describeCdDeployTrendByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTrendByProject: async (describeCdDeployTrendByProjectRequest?: DescribeCdDeployTrendByProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdDeployTrendByProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdDeployTrendByProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组获取
         * @summary CD 主机组获取
         * @param {DescribeCdHostServerGroupRequest} [describeCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdHostServerGroup: async (describeCdHostServerGroupRequest?: DescribeCdHostServerGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdHostServerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdHostServerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组列表获取
         * @summary CD 主机组列表获取
         * @param {DescribeCdHostServerGroupsRequest} [describeCdHostServerGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdHostServerGroups: async (describeCdHostServerGroupsRequest?: DescribeCdHostServerGroupsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdHostServerGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdHostServerGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 部署流程执行记录获取
         * @summary CD 部署流程执行记录获取
         * @param {DescribeCdPipelineRequest} [describeCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipeline: async (describeCdPipelineRequest?: DescribeCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 部署流程配置-根据名称获取
         * @summary CD 部署流程配置-根据名称获取
         * @param {DescribeCdPipelineConfigRequest} [describeCdPipelineConfigRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipelineConfig: async (describeCdPipelineConfigRequest?: DescribeCdPipelineConfigRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdPipelineConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdPipelineConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 应用下的所有部署流程配置获取
         * @summary CD 应用下的所有部署流程配置获取
         * @param {DescribeCdPipelineConfigsRequest} [describeCdPipelineConfigsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipelineConfigs: async (describeCdPipelineConfigsRequest?: DescribeCdPipelineConfigsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdPipelineConfigs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdPipelineConfigsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 任务执行记录获取
         * @summary CD 任务执行记录获取
         * @param {DescribeCdTaskRequest} [describeCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdTask: async (describeCdTaskRequest?: DescribeCdTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCdTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCdTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询代码片段详细列表
         * @summary 仓库信息-查询代码片段详细列表
         * @param {DescribeCodeSearchRequest} [describeCodeSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodeSearch: async (describeCodeSearchRequest?: DescribeCodeSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodeSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodeSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询构建记录详情
         * @summary 构建记录详情查询
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuild: async (describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询构建任务制品
         * @summary 构建任务制品查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildArtifacts: async (describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildArtifacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildArtifactsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取构建计划环境变量
         * @summary 构建计划环境变量获取
         * @param {DescribeCodingCIBuildEnvsRequest} [describeCodingCIBuildEnvsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildEnvs: async (describeCodingCIBuildEnvsRequest?: DescribeCodingCIBuildEnvsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildEnvs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildEnvsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建任务网页报告查询
         * @summary 构建任务网页报告查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildHtmlReports: async (describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildHtmlReports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildArtifactsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建日志获取
         * @summary 构建日志获取
         * @param {DescribeCodingCIBuildLogRequest} [describeCodingCIBuildLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildLog: async (describeCodingCIBuildLogRequest?: DescribeCodingCIBuildLogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建完整日志查询（原始日志 Raw）
         * @summary 构建完整日志查询（原始日志 Raw）
         * @param {DescribeCodingCIBuildLogRawRequest} [describeCodingCIBuildLogRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildLogRaw: async (describeCodingCIBuildLogRawRequest?: DescribeCodingCIBuildLogRawRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildLogRaw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildLogRawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建计划度量查询
         * @summary 构建计划度量查询
         * @param {DescribeCodingCIBuildMetricsRequest} [describeCodingCIBuildMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildMetrics: async (describeCodingCIBuildMetricsRequest?: DescribeCodingCIBuildMetricsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildMetrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildMetricsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建任务阶段获取
         * @summary 构建任务阶段获取
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStage: async (describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildStage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建任务统计
         * @summary 构建任务统计
         * @param {DescribeCodingCIBuildStatisticsRequest} [describeCodingCIBuildStatisticsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStatistics: async (describeCodingCIBuildStatisticsRequest?: DescribeCodingCIBuildStatisticsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildStatistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStatisticsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建任务指定阶段的步骤获取
         * @summary 构建任务指定阶段的步骤获取
         * @param {DescribeCodingCIBuildStepRequest} [describeCodingCIBuildStepRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStep: async (describeCodingCIBuildStepRequest?: DescribeCodingCIBuildStepRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildStep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStepRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建步骤日志获取
         * @summary 构建步骤日志获取
         * @param {DescribeCodingCIBuildStepLogRequest} [describeCodingCIBuildStepLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStepLog: async (describeCodingCIBuildStepLogRequest?: DescribeCodingCIBuildStepLogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuildStepLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStepLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建计划的构建列表获取
         * @summary 构建计划的构建列表获取
         * @param {DescribeCodingCIBuildsRequest} [describeCodingCIBuildsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuilds: async (describeCodingCIBuildsRequest?: DescribeCodingCIBuildsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIBuilds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建计划详情获取
         * @summary 构建计划详情获取
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIJob: async (deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCodingCIJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建计划查询（通过项目ID）
         * @summary 构建计划查询（通过项目ID）
         * @param {DescribeCodingCIJobsRequest} [describeCodingCIJobsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIJobs: async (describeCodingCIJobsRequest?: DescribeCodingCIJobsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCIJobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIJobsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 当前用户信息查询
         * @summary 当前用户信息查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCurrentUser: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingCurrentUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目列表查询
         * @summary 项目列表查询
         * @param {DescribeCodingProjectsRequest} [describeCodingProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingProjects: async (describeCodingProjectsRequest?: DescribeCodingProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCodingProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询commit的ref信息
         * @summary Git提交-查询commit的ref信息
         * @param {DescribeCommitRefsRequest} [describeCommitRefsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCommitRefs: async (describeCommitRefsRequest?: DescribeCommitRefsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCommitRefs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCommitRefsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询两个请求之间的请求列表（source target顺序正常）
         * @summary Git提交-查询两个请求之间的请求列表（source target顺序正常）
         * @param {DescribeCommitsBetweenCommitAndCommitRequest} [describeCommitsBetweenCommitAndCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCommitsBetweenCommitAndCommit: async (describeCommitsBetweenCommitAndCommitRequest?: DescribeCommitsBetweenCommitAndCommitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeCommitsBetweenCommitAndCommit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCommitsBetweenCommitAndCommitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取配置方案
         * @summary 配置方案获取
         * @param {DescribeConfigTemplateListRequest} [describeConfigTemplateListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeConfigTemplateList: async (describeConfigTemplateListRequest?: DescribeConfigTemplateListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeConfigTemplateList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeConfigTemplateListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 缺陷类型列表查询
         * @summary 缺陷类型列表查询
         * @param {DescribeDefectTypesRequest} [describeDefectTypesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDefectTypes: async (describeDefectTypesRequest?: DescribeDefectTypesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDefectTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDefectTypesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部门详情查询
         * @summary 部门详情查询
         * @param {DescribeDepartmentRequest} [describeDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepartment: async (describeDepartmentRequest?: DescribeDepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取部门成员列表（分页列表）查询选中部门下面所有的成员
         * @summary 部门成员列表查询
         * @param {DescribeDepartmentMembersRequest} [describeDepartmentMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepartmentMembers: async (describeDepartmentMembersRequest?: DescribeDepartmentMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepartmentMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepartmentMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeDepotByNameInfoRequest} [describeDepotByNameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotByNameInfo: async (describeDepotByNameInfoRequest?: DescribeDepotByNameInfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotByNameInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotByNameInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库的默认分支
         * @summary 仓库分支-查询仓库的默认分支
         * @param {DescribeDepotDefaultBranchRequest} [describeDepotDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotDefaultBranch: async (describeDepotDefaultBranchRequest?: DescribeDepotDefaultBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotDefaultBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotDefaultBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 git 仓库文件推送规则
         * @summary 仓库设置-查询git仓库文件推送规则
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotFilePushRules: async (describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotFilePushRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotFilePushRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库合并请求列表
         * @summary 合并请求-查询仓库合并请求列表
         * @param {DescribeDepotMergeRequestsRequest} [describeDepotMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotMergeRequests: async (describeDepotMergeRequestsRequest?: DescribeDepotMergeRequestsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotMergeRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotMergeRequestsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库推送设置
         * @summary 仓库设置-查询仓库推送设置
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotPushSetting: async (describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotPushSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotFilePushRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库规范详情
         * @summary 仓库设置-查询仓库规范详情
         * @param {DescribeDepotSpecDetailRequest} [describeDepotSpecDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotSpecDetail: async (describeDepotSpecDetailRequest?: DescribeDepotSpecDetailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotSpecDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDepotSpecDetailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库规范列表
         * @summary 仓库设置-查询仓库规范列表
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotSpecs: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDepotSpecs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 两次提交之间的文件差异
         * @summary Git提交-两次提交之间的文件差异（source target顺序正常）
         * @param {DescribeDifferentBetween2CommitsRequest} [describeDifferentBetween2CommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDifferentBetween2Commits: async (describeDifferentBetween2CommitsRequest?: DescribeDifferentBetween2CommitsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDifferentBetween2Commits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDifferentBetween2CommitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取两次 commit 之间的文件 差异详情
         * @summary Git提交-获取两次commit之间的文件差异详情(废弃，source target顺序不一致)
         * @param {DescribeDifferentBetweenTwoCommitsRequest} [describeDifferentBetweenTwoCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDifferentBetweenTwoCommits: async (describeDifferentBetweenTwoCommitsRequest?: DescribeDifferentBetweenTwoCommitsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeDifferentBetweenTwoCommits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeDifferentBetweenTwoCommitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取指定 commit 下某文件指定代码行的最后一次提交
         * @summary Git提交-获取指定commit下某文件指定代码行的最后一次提交
         * @param {DescribeGitBlameInfoRequest} [describeGitBlameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlameInfo: async (describeGitBlameInfoRequest?: DescribeGitBlameInfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBlameInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBlameInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 Git Blob
         * @summary Git文件-查询GitBlob
         * @param {DescribeGitBlobRequest} [describeGitBlobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlob: async (describeGitBlobRequest?: DescribeGitBlobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBlob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBlobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 Git Blob raw 信息
         * @summary Git文件-查询Git Blob raw信息
         * @param {DescribeGitBlobRawRequest} [describeGitBlobRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlobRaw: async (describeGitBlobRawRequest?: DescribeGitBlobRawRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBlobRaw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBlobRawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询代码仓库单个分支
         * @summary 仓库分支-查询代码仓库单个分支
         * @param {DescribeGitBranchRequest} [describeGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranch: async (describeGitBranchRequest?: DescribeGitBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库分支列表
         * @summary 仓库分支-查询仓库分支列表
         * @param {DescribeGitBranchListRequest} [describeGitBranchListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranchList: async (describeGitBranchListRequest?: DescribeGitBranchListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBranchList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBranchListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库下所有分支列表
         * @summary 仓库分支-查询仓库下所有分支列表
         * @param {DescribeGitBranchesRequest} [describeGitBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranches: async (describeGitBranchesRequest?: DescribeGitBranchesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBranches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据sha值查询所在分支
         * @summary 仓库分支-根据sha值查询所在分支
         * @param {DescribeGitBranchesByShaRequest} [describeGitBranchesByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranchesBySha: async (describeGitBranchesByShaRequest?: DescribeGitBranchesByShaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitBranchesBySha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitBranchesByShaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取commit评论
         * @summary Git提交-获取commit评论
         * @param {DescribeGitCommitCommentsRequest} [describeGitCommitCommentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitComments: async (describeGitCommitCommentsRequest?: DescribeGitCommitCommentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitCommentsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询某次提交的diff信息
         * @summary Git提交-查询某次提交的diff信息
         * @param {DescribeGitCommitDiffRequest} [describeGitCommitDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitDiff: async (describeGitCommitDiffRequest?: DescribeGitCommitDiffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitDiff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitDiffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库某次提交改动的文件路径列表
         * @summary Git提交-查询仓库某次提交改动的文件路径列表
         * @param {DescribeGitCommitFilePathListRequest} [describeGitCommitFilePathListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitFilePathList: async (describeGitCommitFilePathListRequest?: DescribeGitCommitFilePathListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitFilePathList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitFilePathListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询单个请求详情信息
         * @summary Git提交-查询单个请求详情信息
         * @param {DescribeGitCommitInfoRequest} [describeGitCommitInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitInfo: async (describeGitCommitInfoRequest?: DescribeGitCommitInfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitInfos: async (describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitInfos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitInfosRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取提交注释
         * @summary Git提交-获取提交注释
         * @param {DescribeGitCommitNoteRequest} [describeGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitNote: async (describeGitCommitNoteRequest?: DescribeGitCommitNoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询提交对应的流水线状态
         * @summary Git提交-查询提交对应的流水线状态
         * @param {DescribeGitCommitStatusRequest} [describeGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitStatus: async (describeGitCommitStatusRequest?: DescribeGitCommitStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitsInPage: async (describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitCommitsInPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitCommitInfosRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 git 仓库的贡献者
         * @summary 仓库信息-查询git仓库的贡献者
         * @param {DescribeGitContributorsRequest} [describeGitContributorsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitContributors: async (describeGitContributorsRequest?: DescribeGitContributorsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitContributors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitContributorsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据代码仓库id获取代码仓库信息
         * @summary 仓库信息-根据代码仓库id获取代码仓库信息
         * @param {DescribeGitDepotRequest} [describeGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitDepot: async (describeGitDepotRequest?: DescribeGitDepotRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitDepot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitDepotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询某仓库下的部署公钥列表
         * @summary 仓库设置-查询某仓库下的部署公钥列表
         * @param {DescribeGitDepotDeployKeysRequest} [describeGitDepotDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitDepotDeployKeys: async (describeGitDepotDeployKeysRequest?: DescribeGitDepotDeployKeysRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitDepotDeployKeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitDepotDeployKeysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取文件详情
         * @summary Git文件-获取文件详情
         * @param {DescribeGitFileRequest} [describeGitFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFile: async (describeGitFileRequest?: DescribeGitFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询某次提交某文件的内容
         * @summary Git提交-查询某次提交某文件的内容
         * @param {DescribeGitFileContentRequest} [describeGitFileContentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFileContent: async (describeGitFileContentRequest?: DescribeGitFileContentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitFileContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitFileContentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 检查仓库文件
         * @summary Git文件-检查仓库文件是否存在
         * @param {DescribeGitFileStatRequest} [describeGitFileStatRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFileStat: async (describeGitFileStatRequest?: DescribeGitFileStatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitFileStat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitFileStatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取分支目录结构
         * @summary Git文件-查询仓库目录下文件和文件夹名字
         * @param {DescribeGitFilesRequest} [describeGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFiles: async (describeGitFilesRequest?: DescribeGitFilesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitFilesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询两个分支的公共祖先
         * @summary 仓库分支-查询两个分支的公共祖先
         * @param {DescribeGitMergeBaseRequest} [describeGitMergeBaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeBase: async (describeGitMergeBaseRequest?: DescribeGitMergeBaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitMergeBase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitMergeBaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求文件的 diff 详情
         * @summary 合并请求-查询合并请求文件的 diff 详情
         * @param {DescribeGitMergeRequestDiffDetailRequest} [describeGitMergeRequestDiffDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestDiffDetail: async (describeGitMergeRequestDiffDetailRequest?: DescribeGitMergeRequestDiffDetailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitMergeRequestDiffDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitMergeRequestDiffDetailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求 diff 信息的文件列表
         * @summary 合并请求-查询合并请求diff信息的文件列表
         * @param {DescribeGitMergeRequestDiffsRequest} [describeGitMergeRequestDiffsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestDiffs: async (describeGitMergeRequestDiffsRequest?: DescribeGitMergeRequestDiffsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitMergeRequestDiffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitMergeRequestDiffsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的参与者
         * @param {DescribeGitMergeRequestParticipantsRequest} [describeGitMergeRequestParticipantsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestParticipants: async (describeGitMergeRequestParticipantsRequest?: DescribeGitMergeRequestParticipantsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeGitMergeRequestParticipants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitMergeRequestParticipantsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询含有某次提交的合并请求
         * @summary 合并请求-查询含有某次提交的合并请求
         * @param {DescribeGitMergeRequestsByShaRequest} [describeGitMergeRequestsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestsBySha: async (describeGitMergeRequestsByShaRequest?: DescribeGitMergeRequestsByShaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitMergeRequestsBySha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitMergeRequestsByShaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询某项目下的部署公钥列表
         * @summary 仓库设置-查询某项目下的部署公钥列表
         * @param {DescribeGitProjectDeployKeysRequest} [describeGitProjectDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProjectDeployKeys: async (describeGitProjectDeployKeysRequest?: DescribeGitProjectDeployKeysRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitProjectDeployKeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitProjectDeployKeysRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询受保护的标签列表
         * @summary 标签信息-查询受保护的标签列表
         * @param {DescribeGitProtectedTagsRequest} [describeGitProtectedTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProtectedTags: async (describeGitProtectedTagsRequest?: DescribeGitProtectedTagsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitProtectedTags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitProtectedTagsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据标签保护规则查询受保护的标签列表
         * @summary 标签信息-根据标签保护规则查询受保护的标签列表
         * @param {DescribeGitProtectedTagsByRuleRequest} [describeGitProtectedTagsByRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProtectedTagsByRule: async (describeGitProtectedTagsByRuleRequest?: DescribeGitProtectedTagsByRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitProtectedTagsByRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitProtectedTagsByRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取分支或标签信息
         * @summary 仓库分支-获取分支或标签信息
         * @param {DescribeGitRefRequest} [describeGitRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitRef: async (describeGitRefRequest?: DescribeGitRefRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitRef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitRefRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询含有某次提交的标签或分支列表
         * @summary Git提交-查询含有某次提交的标签或分支列表
         * @param {DescribeGitRefsByShaRequest} [describeGitRefsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitRefsBySha: async (describeGitRefsByShaRequest?: DescribeGitRefsByShaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitRefsBySha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitRefsByShaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库的版本详情
         * @summary 版本信息-查询仓库的版本详情
         * @param {DescribeGitReleaseDetailRequest} [describeGitReleaseDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitReleaseDetail: async (describeGitReleaseDetailRequest?: DescribeGitReleaseDetailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitReleaseDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitReleaseDetailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询仓库的版本列表
         * @summary 版本信息-查询仓库的版本列表
         * @param {DescribeGitReleasesRequest} [describeGitReleasesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitReleases: async (describeGitReleasesRequest?: DescribeGitReleasesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitReleases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitReleasesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询单个tag
         * @summary 标签信息-查询单个tag
         * @param {DescribeGitTagRequest} [describeGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTag: async (describeGitTagRequest?: DescribeGitTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询当前仓库下所有tags
         * @summary 标签信息-查询当前仓库下所有tags
         * @param {DescribeGitTagsRequest} [describeGitTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTags: async (describeGitTagsRequest?: DescribeGitTagsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitTags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitTagsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 根据分支获取标签列表
         * @summary 标签信息-根据分支获取标签列表
         * @param {DescribeGitTagsByBranchRequest} [describeGitTagsByBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTagsByBranch: async (describeGitTagsByBranchRequest?: DescribeGitTagsByBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitTagsByBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitTagsByBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询含有某次提交的标签列表
         * @summary 标签信息-查询含有某次提交的标签列表
         * @param {DescribeGitTagsByShaRequest} [describeGitTagsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTagsBySha: async (describeGitTagsByShaRequest?: DescribeGitTagsByShaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitTagsBySha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitTagsByShaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 git 仓库的树
         * @summary 仓库信息-查询git仓库的树
         * @param {DescribeGitTreeRequest} [describeGitTreeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTree: async (describeGitTreeRequest?: DescribeGitTreeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGitTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGitTreeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 授权对象列表分页查询
         * @summary 授权对象列表分页查询
         * @param {DescribeGrantObjectsOnResourceRequest} [describeGrantObjectsOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGrantObjectsOnResource: async (describeGrantObjectsOnResourceRequest?: DescribeGrantObjectsOnResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGrantObjectsOnResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGrantObjectsOnResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询指定资源下授权的用户列表，包括容器内的用户
         * @summary 授权用户列表分页查询
         * @param {DescribeGrantUsersOnResourceRequest} [describeGrantUsersOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGrantUsersOnResource: async (describeGrantUsersOnResourceRequest?: DescribeGrantUsersOnResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeGrantUsersOnResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeGrantUsersOnResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组部署详情获取
         * @summary CD 主机组部署详情获取
         * @param {DescribeHostServerInstanceRequest} [describeHostServerInstanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeHostServerInstance: async (describeHostServerInstanceRequest?: DescribeHostServerInstanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeHostServerInstance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeHostServerInstanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项详情
         * @summary 事项详情查询
         * @param {DescribeIssueRequest} [describeIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssue: async (describeIssueRequest?: DescribeIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 拿到预签名，上传文件
         * @summary 预签名信息获取
         * @param {DescribeIssueAttachmentPreSignedUrlRequest} [describeIssueAttachmentPreSignedUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueAttachmentPreSignedUrl: async (describeIssueAttachmentPreSignedUrlRequest?: DescribeIssueAttachmentPreSignedUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueAttachmentPreSignedUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueAttachmentPreSignedUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过状态以及状态的更新时间查询事项列表
         * @summary 通过状态以及状态的更新时间查询事项列表
         * @param {DescribeIssueByStatusUpdateRequest} [describeIssueByStatusUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueByStatusUpdate: async (describeIssueByStatusUpdateRequest?: DescribeIssueByStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueByStatusUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueByStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项评论列表
         * @summary 事项评论列表查询
         * @param {DescribeIssueCommentListRequest} [describeIssueCommentListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueCommentList: async (describeIssueCommentListRequest?: DescribeIssueCommentListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueCommentList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueCommentListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取某个事项的自定义属性变更日志
         * @summary 事项的自定义属性变更日志查询
         * @param {DescribeIssueCustomFieldLogListRequest} [describeIssueCustomFieldLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueCustomFieldLogList: async (describeIssueCustomFieldLogListRequest?: DescribeIssueCustomFieldLogListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueCustomFieldLogList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueCustomFieldLogListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项附件的下载地址
         * @summary 事项附件的下载地址查询
         * @param {DescribeIssueFileUrlRequest} [describeIssueFileUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueFileUrl: async (describeIssueFileUrlRequest?: DescribeIssueFileUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueFileUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueFileUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项筛选器列表
         * @summary 事项筛选器列表查询
         * @param {DescribeIssueFilterListRequest} [describeIssueFilterListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueFilterList: async (describeIssueFilterListRequest?: DescribeIssueFilterListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueFilterList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueFilterListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项列表
         * @summary 事项列表查询
         * @param {DescribeIssueListRequest} [describeIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueList: async (describeIssueListRequest?: DescribeIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 事项列表（新），返回分页信息
         * @summary 事项查询,返回分页信息
         * @param {DescribeIssueListWithPageRequest} [describeIssueListWithPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueListWithPage: async (describeIssueListWithPageRequest?: DescribeIssueListWithPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueListWithPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueListWithPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取某个事项的活动日志
         * @summary 事项活动日志查询
         * @param {DescribeIssueLogListRequest} [describeIssueLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueLogList: async (describeIssueLogListRequest?: DescribeIssueLogListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIssueLogList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueLogListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项模块列表
         * @summary 事项模块列表查询
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueModuleList: async (describeWikiListRequest?: DescribeWikiListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueModuleList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWikiListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项的引用资源列表
         * @summary 事项的引用资源列表查询
         * @param {DescribeIssueReferenceResourcesRequest} [describeIssueReferenceResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueReferenceResources: async (describeIssueReferenceResourcesRequest?: DescribeIssueReferenceResourcesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueReferenceResources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueReferenceResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项关联的代码仓库信息
         * @summary 事项关联的代码仓库信息查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueRelatedRepos: async (describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueRelatedRepos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueRelatedReposRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询事项关联的项目集中的工作项
         * @summary 事项关联的项目集中的工作项查询
         * @param {DescribeIssueRelatedWorkItemListRequest} [describeIssueRelatedWorkItemListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueRelatedWorkItemList: async (describeIssueRelatedWorkItemListRequest?: DescribeIssueRelatedWorkItemListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueRelatedWorkItemList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueRelatedWorkItemListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取某个事项加入的所有版本
         * @summary 事项加入的版本查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueReleaseList: async (describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueReleaseList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueRelatedReposRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 状态变更记录
         * @summary 事项的状态变更记录查询
         * @param {DescribeIssueStatusChangeLogListRequest} [describeIssueStatusChangeLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueStatusChangeLogList: async (describeIssueStatusChangeLogListRequest?: DescribeIssueStatusChangeLogListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueStatusChangeLogList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueStatusChangeLogListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询工时日志列表
         * @summary 事项的工时日志查询
         * @param {DescribeIssueWorkLogListRequest} [describeIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueWorkLogList: async (describeIssueWorkLogListRequest?: DescribeIssueWorkLogListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeIssueWorkLogList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIssueWorkLogListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询迭代详情
         * @summary 迭代详情查询
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIteration: async (deleteIterationRequest?: DeleteIterationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIteration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteIterationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 迭代列表
         * @summary 迭代列表获取
         * @param {DescribeIterationListRequest} [describeIterationListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIterationList: async (describeIterationListRequest?: DescribeIterationListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeIterationList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeIterationListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取团队成员的 SSH 公钥列表
         * @summary 仓库设置-获取团队成员的SSH公钥列表
         * @param {DescribeMemberSshKeyRequest} [describeMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMemberSshKey: async (describeMemberSshKeyRequest?: DescribeMemberSshKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMemberSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMemberSshKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求列表
         * @summary 合并请求-查询合并请求列表
         * @param {DescribeMergeReqCommitsRequest} [describeMergeReqCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeReqCommits: async (describeMergeReqCommitsRequest?: DescribeMergeReqCommitsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeReqCommits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMergeReqCommitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求详情
         * @summary 合并请求-查询合并请求详情
         * @param {DescribeMergeReqInfoRequest} [describeMergeReqInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeReqInfo: async (describeMergeReqInfoRequest?: DescribeMergeReqInfoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeReqInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMergeReqInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求详情信息
         * @summary 合并请求-查询合并请求详情信息
         * @param {DescribeMergeRequestRequest} [describeMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequest: async (describeMergeRequestRequest?: DescribeMergeRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMergeRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取合并请求文件修改记录
         * @summary 合并请求-获取合并请求文件修改记录
         * @param {DescribeMergeRequestFileDiffRequest} [describeMergeRequestFileDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestFileDiff: async (describeMergeRequestFileDiffRequest?: DescribeMergeRequestFileDiffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeRequestFileDiff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMergeRequestFileDiffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询合并请求操作记录
         * @summary 合并请求-查询合并请求操作记录
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestLog: async (modifyCloseMRRequest?: ModifyCloseMRRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeRequestLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCloseMRRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的评审者
         * @param {DescribeMergeRequestReviewersRequest} [describeMergeRequestReviewersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestReviewers: async (describeMergeRequestReviewersRequest?: DescribeMergeRequestReviewersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMergeRequestReviewers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMergeRequestReviewersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取当前用户拥有读权限的仓库列表
         * @summary 仓库信息-获取当前用户拥有读权限的仓库列表
         * @param {DescribeMyDepotsRequest} [describeMyDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMyDepots: async (describeMyDepotsRequest?: DescribeMyDepotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeMyDepots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeMyDepotsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取提交的note信息
         * @summary 仓库信息-获取提交的note信息
         * @param {DescribeNotesByCommitsRequest} [describeNotesByCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeNotesByCommits: async (describeNotesByCommitsRequest?: DescribeNotesByCommitsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeNotesByCommits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeNotesByCommitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 单个项目查询
         * @summary 单个项目查询
         * @param {DescribeOneProjectRequest} [describeOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeOneProject: async (describeOneProjectRequest?: DescribeOneProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeOneProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeOneProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取个人外部仓库
         * @summary 个人外部仓库获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePersonalExternalDepots: async (describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePersonalExternalDepots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePersonalExternalDepotsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 汉字转拼音
         * @summary 汉字转拼音
         * @param {DescribePinyinRequest} [describePinyinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePinyin: async (describePinyinRequest?: DescribePinyinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePinyin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePinyinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组列表查询（指定资源类型）
         * @summary 权限组列表查询（指定资源类型）
         * @param {DescribePoliciesOnResourceTypeRequest} [describePoliciesOnResourceTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePoliciesOnResourceType: async (describePoliciesOnResourceTypeRequest?: DescribePoliciesOnResourceTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePoliciesOnResourceType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePoliciesOnResourceTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组详情获取
         * @summary 权限组详情获取
         * @param {DescribePolicyRequest} [describePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePolicy: async (describePolicyRequest?: DescribePolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 预签名信息获取，上传文件
         * @summary 预签名URL获取
         * @param {DescribePreSignUploadUrlRequest} [describePreSignUploadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePreSignUploadUrl: async (describePreSignUploadUrlRequest?: DescribePreSignUploadUrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePreSignUploadUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePreSignUploadUrlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 资源权限判定模式获取
         * @summary 资源权限判定模式获取
         * @param {DescribePredicatePolicyOnResourceRequest} [describePredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePredicatePolicyOnResource: async (describePredicatePolicyOnResourceRequest?: DescribePredicatePolicyOnResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePredicatePolicyOnResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePredicatePolicyOnResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集下项目列表查询
         * @summary 项目集下项目列表查询
         * @param {DescribeProgramProjectsRequest} [describeProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProgramProjects: async (describeProgramProjectsRequest?: DescribeProgramProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProgramProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProgramProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集列表查询
         * @summary 项目集列表查询
         * @param {DescribeProgramsRequest} [describeProgramsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePrograms: async (describeProgramsRequest?: DescribeProgramsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribePrograms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProgramsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目公告查询
         * @summary 项目公告查询
         * @param {DescribeProjectAnnouncementRequest} [describeProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectAnnouncement: async (describeProjectAnnouncementRequest?: DescribeProjectAnnouncementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectAnnouncement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectAnnouncementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目公告列表查询
         * @summary 项目公告列表查询
         * @param {DescribeProjectAnnouncementsRequest} [describeProjectAnnouncementsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectAnnouncements: async (describeProjectAnnouncementsRequest?: DescribeProjectAnnouncementsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectAnnouncements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectAnnouncementsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目查询(通过项目名称)
         * @summary 项目查询(通过项目名称)
         * @param {DescribeProjectByNameRequest} [describeProjectByNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectByName: async (describeProjectByNameRequest?: DescribeProjectByNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectByName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectByNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目凭据列表查询
         * @summary 项目凭据列表查询
         * @param {DescribeProjectCredentialsRequest} [describeProjectCredentialsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectCredentials: async (describeProjectCredentialsRequest?: DescribeProjectCredentialsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectCredentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectCredentialsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取仓库分支列表
         * @summary 仓库分支列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotBranches: async (describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectDepotBranches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectDepotBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取分支下的提交列表
         * @summary 分支下的提交列表获取
         * @param {DescribeProjectDepotCommitsRequest} [describeProjectDepotCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotCommits: async (describeProjectDepotCommitsRequest?: DescribeProjectDepotCommitsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectDepotCommits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectDepotCommitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeProjectDepotInfoListRequest} [describeProjectDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotInfoList: async (describeProjectDepotInfoListRequest?: DescribeProjectDepotInfoListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectDepotInfoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectDepotInfoListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取仓库的标签列表
         * @summary 仓库的标签列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotTags: async (describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectDepotTags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectDepotBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取项目仓库列表
         * @summary 项目仓库列表获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepots: async (describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectDepots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describePersonalExternalDepotsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询具体事项类型的属性列表
         * @summary 具体事项类型的属性列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueFieldList: async (describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectIssueFieldList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectIssueFieldListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询具体事项类型的状态列表
         * @summary 具体事项类型的状态列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueStatusList: async (describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectIssueStatusList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectIssueFieldListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询项目事项类型列表
         * @summary 项目事项类型列表查询
         * @param {DescribeProjectIssueTypeListRequest} [describeProjectIssueTypeListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueTypeList: async (describeProjectIssueTypeListRequest?: DescribeProjectIssueTypeListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectIssueTypeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectIssueTypeListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目列表查询-指定项目标签
         * @summary 项目列表查询-指定项目标签
         * @param {DescribeProjectLabelsRequest} [describeProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectLabels: async (describeProjectLabelsRequest?: DescribeProjectLabelsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectLabelsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目成员主体查询(包含用户组、部门、成员)
         * @summary 项目成员主体查询(包含用户组、部门、成员)
         * @param {DescribeProjectMemberPrincipalsRequest} [describeProjectMemberPrincipalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMemberPrincipals: async (describeProjectMemberPrincipalsRequest?: DescribeProjectMemberPrincipalsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectMemberPrincipals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectMemberPrincipalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目成员列表查询
         * @summary 项目成员列表查询
         * @param {DescribeProjectMembersRequest} [describeProjectMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMembers: async (describeProjectMembersRequest?: DescribeProjectMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取项目下的合并请求列表
         * @summary 合并请求-获取项目下的合并请求列表
         * @param {DescribeProjectMergeRequestsRequest} [describeProjectMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMergeRequests: async (describeProjectMergeRequestsRequest?: DescribeProjectMergeRequestsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectMergeRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectMergeRequestsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目用户组查询
         * @summary 项目用户组查询
         * @param {DescribeProjectRolesRequest} [describeProjectRolesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectRoles: async (describeProjectRolesRequest?: DescribeProjectRolesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectRolesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目查询（通过一级菜单名查询开启某个模块的项目）
         * @summary 项目查询（通过一级菜单名）
         * @param {DescribeProjectsByFeatureRequest} [describeProjectsByFeatureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectsByFeature: async (describeProjectsByFeatureRequest?: DescribeProjectsByFeatureRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProjectsByFeature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProjectsByFeatureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询保护分支详情
         * @summary 仓库设置-查询保护分支详情
         * @param {DescribeProtectedBranchRequest} [describeProtectedBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranch: async (describeProtectedBranchRequest?: DescribeProtectedBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProtectedBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProtectedBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询保护分支成员
         * @summary 仓库设置-查询保护分支成员
         * @param {DescribeProtectedBranchMembersRequest} [describeProtectedBranchMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranchMembers: async (describeProtectedBranchMembersRequest?: DescribeProtectedBranchMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProtectedBranchMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProtectedBranchMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询保护分支
         * @summary 仓库设置-查询保护分支列表
         * @param {DescribeProtectedBranchesRequest} [describeProtectedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranches: async (describeProtectedBranchesRequest?: DescribeProtectedBranchesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeProtectedBranches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeProtectedBranchesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 管理测试用例
         * @summary 事项关联的测试用例查询
         * @param {DescribeRelatedCaseListRequest} [describeRelatedCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRelatedCaseList: async (describeRelatedCaseListRequest?: DescribeRelatedCaseListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeRelatedCaseList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeRelatedCaseListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 版本详情
         * @summary 版本详情查询
         * @param {DescribeReleaseRequest} [describeReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRelease: async (describeReleaseRequest?: DescribeReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 版本发布范围
         * @summary 版本发布范围查询
         * @param {DescribeReleaseIssueListRequest} [describeReleaseIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReleaseIssueList: async (describeReleaseIssueListRequest?: DescribeReleaseIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeReleaseIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeReleaseIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询项目内版本列表
         * @summary 版本列表查询
         * @param {DescribeReleaseListRequest} [describeReleaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReleaseList: async (describeReleaseListRequest?: DescribeReleaseListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeReleaseList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeReleaseListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试报告详情
         * @summary 测试报告详情
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReport: async (deleteReportRequest?: DeleteReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试报告列表
         * @summary 测试报告列表
         * @param {DescribeReportListRequest} [describeReportListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReportList: async (describeReportListRequest?: DescribeReportListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeReportList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeReportListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询需求关联缺陷列表
         * @summary 需求关联缺陷列表查询
         * @param {DescribeRequirementDefectRelationRequest} [describeRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRequirementDefectRelation: async (describeRequirementDefectRelationRequest?: DescribeRequirementDefectRelationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeRequirementDefectRelation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeRequirementDefectRelationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 需求关联的测试用例列表
         * @summary 需求关联的测试用例列表
         * @param {DescribeRequirementTestCaseListRequest} [describeRequirementTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRequirementTestCaseList: async (describeRequirementTestCaseListRequest?: DescribeRequirementTestCaseListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeRequirementTestCaseList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeRequirementTestCaseListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 被引用资源列表查询
         * @summary 被引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceReferencesCited: async (describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeResourceReferencesCited`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeResourceReferencesCitingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 引用资源列表查询
         * @summary 引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceReferencesCiting: async (describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeResourceReferencesCiting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeResourceReferencesCitingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组可用资源范围分页查询
         * @summary 权限组可用资源范围分页查询
         * @param {DescribeResourceScopeListOnPolicyRequest} [describeResourceScopeListOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceScopeListOnPolicy: async (describeResourceScopeListOnPolicyRequest?: DescribeResourceScopeListOnPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeResourceScopeListOnPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeResourceScopeListOnPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取自己的合并请求列表
         * @summary 合并请求-获取自己的合并请求列表
         * @param {DescribeSelfMergeRequestsRequest} [describeSelfMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSelfMergeRequests: async (describeSelfMergeRequestsRequest?: DescribeSelfMergeRequestsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeSelfMergeRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeSelfMergeRequestsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取单个合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取单个合并请求行评论和改动文件diff行评论
         * @param {DescribeSingeMergeRequestNotesRequest} [describeSingeMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSingeMergeRequestNotes: async (describeSingeMergeRequestNotesRequest?: DescribeSingeMergeRequestNotesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeSingeMergeRequestNotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeSingeMergeRequestNotesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取当前用户所有SSH公钥
         * @summary 仓库设置-获取当前用户所有SSH公钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSshKey: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeSshKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询子事项列表
         * @summary 子事项列表查询
         * @param {DescribeSubIssueListRequest} [describeSubIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSubIssueList: async (describeSubIssueListRequest?: DescribeSubIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeSubIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeSubIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 团队信息查询
         * @summary 团队信息查询
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeam: async (body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询团队管理员
         * @summary 团队管理员查询
         * @param {DescribeTeamAdminMembersRequest} [describeTeamAdminMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamAdminMembers: async (describeTeamAdminMembersRequest?: DescribeTeamAdminMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamAdminMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamAdminMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品列表查询
         * @summary 制品列表查询
         * @param {DescribeTeamArtifactsRequest} [describeTeamArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamArtifacts: async (describeTeamArtifactsRequest?: DescribeTeamArtifactsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamArtifacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamArtifactsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @summary 仓库信息-获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @param {DescribeTeamDepotInfoListRequest} [describeTeamDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamDepotInfoList: async (describeTeamDepotInfoListRequest?: DescribeTeamDepotInfoListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamDepotInfoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamDepotInfoListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询企业事项类型列表
         * @summary 企业事项类型列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamIssueTypeList: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamIssueTypeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询团队事项列表
         * @summary 查询团队事项列表
         * @param {DescribeTeamIssuesRequest} [describeTeamIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamIssues: async (describeTeamIssuesRequest?: DescribeTeamIssuesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamIssues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamIssuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过用户 ID 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 ID）
         * @param {DescribeTeamMemberRequest} [describeTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMember: async (describeTeamMemberRequest?: DescribeTeamMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过用户 Email 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 Email）
         * @param {DescribeTeamMemberByEmailRequest} [describeTeamMemberByEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMemberByEmail: async (describeTeamMemberByEmailRequest?: DescribeTeamMemberByEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamMemberByEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamMemberByEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 团队成员列表查询
         * @summary 团队成员列表查询
         * @param {DescribeTeamMembersRequest} [describeTeamMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMembers: async (describeTeamMembersRequest?: DescribeTeamMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTeamMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTeamMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务详情
         * @summary 测试任务详情
         * @param {DescribeTestRequest} [describeTestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTest: async (describeTestRequest?: DescribeTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例详情
         * @summary 测试用例详情
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCase: async (deleteTestCaseRequest?: DeleteTestCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTestCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例分页数据
         * @summary 测试用例列表
         * @param {DescribeTestCaseListRequest} [describeTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCaseList: async (describeTestCaseListRequest?: DescribeTestCaseListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestCaseList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestCaseListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例分组列表
         * @summary 测试用例分组列表
         * @param {DescribeTestCaseSectionListRequest} [describeTestCaseSectionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCaseSectionList: async (describeTestCaseSectionListRequest?: DescribeTestCaseSectionListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestCaseSectionList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestCaseSectionListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务关联的缺陷列表
         * @summary 测试任务关联的缺陷列表
         * @param {DescribeTestDefectListRequest} [describeTestDefectListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestDefectList: async (describeTestDefectListRequest?: DescribeTestDefectListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestDefectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestDefectListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试任务列表
         * @summary 测试任务列表
         * @param {DescribeTestListRequest} [describeTestListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestList: async (describeTestListRequest?: DescribeTestListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试计划详情
         * @summary 测试计划详情
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestRun: async (deleteTestRunRequest?: DeleteTestRunRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTestRunRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试计划列表
         * @summary 测试计划列表
         * @param {DescribeTestRunListRequest} [describeTestRunListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestRunList: async (describeTestRunListRequest?: DescribeTestRunListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeTestRunList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeTestRunListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组列表分页查询
         * @summary 用户组列表分页查询
         * @param {DescribeUserGroupsRequest} [describeUserGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserGroups: async (describeUserGroupsRequest?: DescribeUserGroupsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeUserGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeUserGroupsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询团队成员待交接事项列表
         * @summary 查询团队成员待交接事项列表
         * @param {DescribeUserHandoverIssuesRequest} [describeUserHandoverIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserHandoverIssues: async (describeUserHandoverIssuesRequest?: DescribeUserHandoverIssuesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeUserHandoverIssues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeUserHandoverIssuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目列表查询（已加入的项目）
         * @summary 项目列表查询（已加入的项目）
         * @param {DescribeUserProjectsRequest} [describeUserProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserProjects: async (describeUserProjectsRequest?: DescribeUserProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeUserProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeUserProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户列表查询（根据用户组id分页查询）
         * @summary 用户列表查询（根据用户组id分页查询）
         * @param {DescribeUsersByGroupIdRequest} [describeUsersByGroupIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUsersByGroupId: async (describeUsersByGroupIdRequest?: DescribeUsersByGroupIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeUsersByGroupId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeUsersByGroupIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 授权用户列表分页查询（指定资源）
         * @summary 授权用户列表分页查询（指定资源）
         * @param {DescribeUsersOnResourceAndGrantObjectRequest} [describeUsersOnResourceAndGrantObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUsersOnResourceAndGrantObject: async (describeUsersOnResourceAndGrantObjectRequest?: DescribeUsersOnResourceAndGrantObjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeUsersOnResourceAndGrantObject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeUsersOnResourceAndGrantObjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 事项分解信息
         * @summary 事项分解信息查询
         * @param {DescribeWorkItemSalvageRequest} [describeWorkItemSalvageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWorkItemSalvage: async (describeWorkItemSalvageRequest?: DescribeWorkItemSalvageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeWorkItemSalvage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWorkItemSalvageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取一个用户在团队内的所有代办事项（即前端页面上个人工作台中的事项列表）
         * @summary 用户在团队内的所有代办事项查询
         * @param {DescribeWorkbenchIssueListRequest} [describeWorkbenchIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWorkbenchIssueList: async (describeWorkbenchIssueListRequest?: DescribeWorkbenchIssueListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DescribeWorkbenchIssueList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWorkbenchIssueListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @summary 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachFromResource: async (detachFromResourceRequest?: DetachFromResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DetachFromResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detachFromResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @summary 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @param {DetachResourceScopeOnPolicyRequest} [detachResourceScopeOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachResourceScopeOnPolicy: async (detachResourceScopeOnPolicyRequest?: DetachResourceScopeOnPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DetachResourceScopeOnPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(detachResourceScopeOnPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品版本下载 禁止、解禁
         * @summary 制品版本下载 禁止、解禁
         * @param {ForbiddenArtifactVersionRequest} [forbiddenArtifactVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forbiddenArtifactVersion: async (forbiddenArtifactVersionRequest?: ForbiddenArtifactVersionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ForbiddenArtifactVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forbiddenArtifactVersionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 初始化项目配置方案
         * @summary 项目配置方案初始化
         * @param {InitProjectTemplateRequest} [initProjectTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProjectTemplate: async (initProjectTemplateRequest?: InitProjectTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=InitProjectTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initProjectTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 制品授信清单修改
         * @summary 制品授信清单修改
         * @param {ModifyArtifactCreditRequest} [modifyArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyArtifactCredit: async (modifyArtifactCreditRequest?: ModifyArtifactCreditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyArtifactCredit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyArtifactCreditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 指定版本制品的制品属性修改
         * @summary 制品属性修改
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyArtifactProperties: async (modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyArtifactProperties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyArtifactPropertiesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改保护分支规则相关信息
         * @summary 仓库设置-修改保护分支规则相关信息
         * @param {ModifyBranchProtectionRequest} [modifyBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyBranchProtection: async (modifyBranchProtectionRequest?: ModifyBranchProtectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyBranchProtection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyBranchProtectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 更改保护分支管理员权限
         * @summary 仓库设置-更改保护分支管理员权限
         * @param {ModifyBranchProtectionMemberPermissionRequest} [modifyBranchProtectionMemberPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyBranchProtectionMemberPermission: async (modifyBranchProtectionMemberPermissionRequest?: ModifyBranchProtectionMemberPermissionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyBranchProtectionMemberPermission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyBranchProtectionMemberPermissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 云账号更新
         * @summary CD 云账号更新
         * @param {ModifyCdCloudAccountRequest} [modifyCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdCloudAccount: async (modifyCdCloudAccountRequest?: ModifyCdCloudAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCdCloudAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCdCloudAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 主机组修改
         * @summary CD 主机组修改
         * @param {ModifyCdHostServerGroupRequest} [modifyCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdHostServerGroup: async (modifyCdHostServerGroupRequest?: ModifyCdHostServerGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCdHostServerGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCdHostServerGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ CD 部署流程修改
         * @summary CD 部署流程修改
         * @param {ModifyCdPipelineRequest} [modifyCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdPipeline: async (modifyCdPipelineRequest?: ModifyCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 使用、取消使用仓库规范
         * @summary 仓库设置-使用、取消使用仓库规范
         * @param {ModifyChooseDepotSpecRequest} [modifyChooseDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyChooseDepotSpec: async (modifyChooseDepotSpecRequest?: ModifyChooseDepotSpecRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyChooseDepotSpec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyChooseDepotSpecRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 关闭合并请求
         * @summary 合并请求-关闭合并请求
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCloseMR: async (modifyCloseMRRequest?: ModifyCloseMRRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCloseMR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCloseMRRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 自定义构建节点启用、禁用
         * @summary 自定义构建节点启用、禁用
         * @param {ModifyCodingCIAgentEnableRequest} [modifyCodingCIAgentEnableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCodingCIAgentEnable: async (modifyCodingCIAgentEnableRequest?: ModifyCodingCIAgentEnableRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCodingCIAgentEnable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCodingCIAgentEnableRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建计划修改
         * @summary 构建计划修改
         * @param {ModifyCodingCIJobRequest} [modifyCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCodingCIJob: async (modifyCodingCIJobRequest?: ModifyCodingCIJobRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyCodingCIJob`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCodingCIJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库默认分支
         * @summary 仓库设置-修改仓库默认分支
         * @param {ModifyDefaultBranchRequest} [modifyDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDefaultBranch: async (modifyDefaultBranchRequest?: ModifyDefaultBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDefaultBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDefaultBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改缺陷所属的需求
         * @summary 缺陷所属的需求修改
         * @param {ModifyDefectRelatedRequirementRequest} [modifyDefectRelatedRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDefectRelatedRequirement: async (modifyDefectRelatedRequirementRequest?: ModifyDefectRelatedRequirementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDefectRelatedRequirement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDefectRelatedRequirementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改部门信息(部门名，移动位置)
         * @summary 部门信息修改
         * @param {ModifyDepartmentRequest} [modifyDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartment: async (modifyDepartmentRequest?: ModifyDepartmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepartmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部门负责人管理
         * @summary 部门负责人管理
         * @param {ModifyDepartmentAssigneeRequest} [modifyDepartmentAssigneeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartmentAssignee: async (modifyDepartmentAssigneeRequest?: ModifyDepartmentAssigneeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepartmentAssignee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepartmentAssigneeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部门成员管理
         * @summary 部门成员管理
         * @param {ModifyDepartmentMemberRequest} [modifyDepartmentMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartmentMember: async (modifyDepartmentMemberRequest?: ModifyDepartmentMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepartmentMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepartmentMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库描述
         * @summary 仓库信息-修改仓库描述
         * @param {ModifyDepotDescriptionRequest} [modifyDepotDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotDescription: async (modifyDepotDescriptionRequest?: ModifyDepotDescriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotDescriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改 git 仓库文件推送规则
         * @summary 仓库设置-修改git仓库文件推送规则
         * @param {ModifyDepotFilePushRuleRequest} [modifyDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotFilePushRule: async (modifyDepotFilePushRuleRequest?: ModifyDepotFilePushRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotFilePushRule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotFilePushRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改 git 仓库特权者文件推送权限
         * @summary 仓库设置-修改 git 仓库特权者文件推送权限
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotFilePushRuleDenyPrivilege: async (modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotFilePushRuleDenyPrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotFilePushRuleDenyPrivilegeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改、新增仓库级别的仓库规范
         * @summary 仓库设置-修改、新增仓库级别的仓库规范
         * @param {ModifyDepotLevelDepotSpecRequest} [modifyDepotLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotLevelDepotSpec: async (modifyDepotLevelDepotSpecRequest?: ModifyDepotLevelDepotSpecRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotLevelDepotSpec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotLevelDepotSpecRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库名称
         * @summary 仓库信息-修改仓库名称
         * @param {ModifyDepotNameRequest} [modifyDepotNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotName: async (modifyDepotNameRequest?: ModifyDepotNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库推送设置
         * @summary 仓库设置-修改仓库推送设置
         * @param {ModifyDepotPushSettingRequest} [modifyDepotPushSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotPushSetting: async (modifyDepotPushSettingRequest?: ModifyDepotPushSettingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotPushSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotPushSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库容量
         * @summary 仓库信息-修改仓库容量
         * @param {ModifyDepotQuotaRequest} [modifyDepotQuotaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotQuota: async (modifyDepotQuotaRequest?: ModifyDepotQuotaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotQuotaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库设置
         * @summary 仓库设置-修改仓库设置
         * @param {ModifyDepotSettingsRequest} [modifyDepotSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotSettings: async (modifyDepotSettingsRequest?: ModifyDepotSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库是否开源设置
         * @summary 仓库设置-修改仓库是否开源设置
         * @param {ModifyDepotSharedSettingRequest} [modifyDepotSharedSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotSharedSetting: async (modifyDepotSharedSettingRequest?: ModifyDepotSharedSettingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyDepotSharedSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyDepotSharedSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 将某次提交cherry-pick到指定分支
         * @summary Git提交-将某次提交cherry-pick到指定分支
         * @param {ModifyGitCherryPickRequest} [modifyGitCherryPickRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCherryPick: async (modifyGitCherryPickRequest?: ModifyGitCherryPickRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitCherryPick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitCherryPickRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 还原某次提交
         * @summary Git提交-还原某次提交
         * @param {ModifyGitCommitRevertRequest} [modifyGitCommitRevertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCommitRevert: async (modifyGitCommitRevertRequest?: ModifyGitCommitRevertRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitCommitRevert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitCommitRevertRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改提交对应的流水线状态
         * @summary Git提交-修改提交对应的流水线状态
         * @param {ModifyGitCommitStatusRequest} [modifyGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCommitStatus: async (modifyGitCommitStatusRequest?: ModifyGitCommitStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitCommitStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitCommitStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 仓库归档
         * @summary 仓库设置-仓库归档
         * @param {ModifyGitDepotArchiveRequest} [modifyGitDepotArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitDepotArchive: async (modifyGitDepotArchiveRequest?: ModifyGitDepotArchiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitDepotArchive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitDepotArchiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 仓库解除归档
         * @summary 仓库设置-仓库解除归档
         * @param {ModifyGitDepotUnarchiveRequest} [modifyGitDepotUnarchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitDepotUnarchive: async (modifyGitDepotUnarchiveRequest?: ModifyGitDepotUnarchiveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitDepotUnarchive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitDepotUnarchiveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库某文件
         * @summary Git提交-修改仓库某文件
         * @param {ModifyGitFilesRequest} [modifyGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitFiles: async (modifyGitFilesRequest?: ModifyGitFilesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitFilesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 将源分支的改动合并到目标分支
         * @summary 合并请求-将源分支的改动合并到目标分支
         * @param {ModifyGitMergeBranchRequest} [modifyGitMergeBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeBranch: async (modifyGitMergeBranchRequest?: ModifyGitMergeBranchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitMergeBranch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitMergeBranchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改合并请求的标题和描述信息
         * @summary 合并请求-修改合并请求的标题和描述信息
         * @param {ModifyGitMergeRequestRequest} [modifyGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeRequest: async (modifyGitMergeRequestRequest?: ModifyGitMergeRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitMergeRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitMergeRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 合并请求中的源分支进行rebase操作
         * @summary 合并请求-合并请求中的源分支进行rebase操作
         * @param {ModifyGitMergeRequestRebaseRequest} [modifyGitMergeRequestRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeRequestRebase: async (modifyGitMergeRequestRebaseRequest?: ModifyGitMergeRequestRebaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitMergeRequestRebase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitMergeRequestRebaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ git变基操作
         * @summary 仓库信息-git变基操作
         * @param {ModifyGitRebaseRequest} [modifyGitRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitRebase: async (modifyGitRebaseRequest?: ModifyGitRebaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitRebase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitRebaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改仓库版本信息
         * @summary 版本信息-修改仓库版本信息
         * @param {ModifyGitReleaseRequest} [modifyGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitRelease: async (modifyGitReleaseRequest?: ModifyGitReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 仓库转移至同团队下的其他项目中
         * @summary 仓库信息-仓库转移至同团队下的其他项目中
         * @param {ModifyGitTransferRequest} [modifyGitTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitTransfer: async (modifyGitTransferRequest?: ModifyGitTransferRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyGitTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyGitTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改事项
         * @summary 事项修改
         * @param {ModifyIssueRequest} [modifyIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssue: async (modifyIssueRequest?: ModifyIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ModifyIssue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改事项评论
         * @summary 事项评论修改
         * @param {ModifyIssueCommentRequest} [modifyIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueComment: async (modifyIssueCommentRequest?: ModifyIssueCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyIssueComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIssueCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改事项描述
         * @summary 事项描述修改
         * @param {ModifyIssueDescriptionRequest} [modifyIssueDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueDescription: async (modifyIssueDescriptionRequest?: ModifyIssueDescriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyIssueDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIssueDescriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改事项父需求
         * @summary 事项父需求修改
         * @param {ModifyIssueParentRequirementRequest} [modifyIssueParentRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueParentRequirement: async (modifyIssueParentRequirementRequest?: ModifyIssueParentRequirementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyIssueParentRequirement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIssueParentRequirementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改迭代
         * @summary 迭代修改
         * @param {ModifyIterationRequest} [modifyIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIteration: async (modifyIterationRequest?: ModifyIterationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyIteration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIterationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改迭代状态
         * @summary 修改迭代状态
         * @param {ModifyIterationStatusRequest} [modifyIterationStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIterationStatus: async (modifyIterationStatusRequest?: ModifyIterationStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyIterationStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIterationStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 执行合并
         * @summary 合并信息-执行合并
         * @param {ModifyMergeMRRequest} [modifyMergeMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeMR: async (modifyMergeMRRequest?: ModifyMergeMRRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyMergeMR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyMergeMRRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改合并请求基础设置
         * @summary 仓库设置-修改合并请求基础设置
         * @param {ModifyMergeRequestBasicSettingsRequest} [modifyMergeRequestBasicSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestBasicSettings: async (modifyMergeRequestBasicSettingsRequest?: ModifyMergeRequestBasicSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyMergeRequestBasicSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyMergeRequestBasicSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改合并请求合并提交消息模版
         * @summary 仓库设置-修改合并请求合并提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestMergeCommitMessageTemplate: async (modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyMergeRequestMergeCommitMessageTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyMergeRequestSquashCommitMessageTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改合并请求合并压缩提交消息模版
         * @summary 仓库设置-修改合并请求合并压缩提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestSquashCommitMessageTemplate: async (modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyMergeRequestSquashCommitMessageTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyMergeRequestSquashCommitMessageTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 权限组修改
         * @summary 权限组修改
         * @param {ModifyPolicyRequest} [modifyPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPolicy: async (modifyPolicyRequest?: ModifyPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyPolicy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目信息修改
         * @summary 项目信息修改
         * @param {ModifyProjectRequest} [modifyProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProject: async (modifyProjectRequest?: ModifyProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目公告更新
         * @summary 项目公告更新
         * @param {ModifyProjectAnnouncementRequest} [modifyProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProjectAnnouncement: async (modifyProjectAnnouncementRequest?: ModifyProjectAnnouncementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyProjectAnnouncement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyProjectAnnouncementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目标签修改
         * @summary 项目标签修改
         * @param {ModifyProjectLabelRequest} [modifyProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProjectLabel: async (modifyProjectLabelRequest?: ModifyProjectLabelRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyProjectLabel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyProjectLabelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改版本
         * @summary 版本修改
         * @param {ModifyReleaseRequest} [modifyReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyRelease: async (modifyReleaseRequest?: ModifyReleaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ModifyRelease`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyReleaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改、新增团队级别的仓库规范
         * @summary 仓库设置-修改、新增团队级别的仓库规范
         * @param {ModifyTeamLevelDepotSpecRequest} [modifyTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamLevelDepotSpec: async (modifyTeamLevelDepotSpecRequest?: ModifyTeamLevelDepotSpecRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTeamLevelDepotSpec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTeamLevelDepotSpecRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过用户 ID 团队成员锁定
         * @summary 团队成员锁定
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamMemberLocked: async (modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTeamMemberLocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTeamMemberUnlockedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过用户 ID 解锁团队成员
         * @summary 团队成员解锁
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamMemberUnlocked: async (modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTeamMemberUnlocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTeamMemberUnlockedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例修改
         * @summary 测试用例修改
         * @param {ModifyTestCaseRequest} [modifyTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestCase: async (modifyTestCaseRequest?: ModifyTestCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTestCase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTestCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试用例分组修改
         * @summary 测试用例分组修改
         * @param {ModifyTestCaseSectionRequest} [modifyTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestCaseSection: async (modifyTestCaseSectionRequest?: ModifyTestCaseSectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTestCaseSection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTestCaseSectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 测试计划修改
         * @summary 测试计划修改
         * @param {ModifyTestRunRequest} [modifyTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestRun: async (modifyTestRunRequest?: ModifyTestRunRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyTestRun`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyTestRunRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 项目集工作项分解/取消分解到项目中的事项
         * @summary 项目集工作项分解&取消分解到项目中的事项
         * @param {ModifyWorkItemSplitIssuesRequest} [modifyWorkItemSplitIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWorkItemSplitIssues: async (modifyWorkItemSplitIssuesRequest?: ModifyWorkItemSplitIssuesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ModifyWorkItemSplitIssues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWorkItemSplitIssuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 批量规划迭代
         * @summary 迭代批量规划
         * @param {PlanIterationIssueRequest} [planIterationIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIterationIssue: async (planIterationIssueRequest?: PlanIterationIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=PlanIterationIssue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planIterationIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 将指定版本的制品的发布状态调整为已发布
         * @summary 制品版本发布
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseArtifactVersion: async (describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ReleaseArtifactVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeArtifactChecksumsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部署流程重排序
         * @summary 部署流程重排序
         * @param {ReorderCdPipelinesRequest} [reorderCdPipelinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderCdPipelines: async (reorderCdPipelinesRequest?: ReorderCdPipelinesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ReorderCdPipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reorderCdPipelinesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @summary 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @param {SetGrantToResourceRequest} [setGrantToResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantToResource: async (setGrantToResourceRequest?: SetGrantToResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=SetGrantToResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setGrantToResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 资源权限判定策略设置
         * @summary 资源权限判定策略设置
         * @param {SetPredicatePolicyOnResourceRequest} [setPredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPredicatePolicyOnResource: async (setPredicatePolicyOnResourceRequest?: SetPredicatePolicyOnResourceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=SetPredicatePolicyOnResource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setPredicatePolicyOnResourceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建停止
         * @summary 构建停止
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCodingCIBuild: async (describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=StopCodingCIBuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeCodingCIBuildStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 部署流程触发
         * @summary 部署流程触发
         * @param {TriggerCdPipelineRequest} [triggerCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerCdPipeline: async (triggerCdPipelineRequest?: TriggerCdPipelineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=TriggerCdPipeline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(triggerCdPipelineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 构建触发
         * @summary 构建触发
         * @param {TriggerCodingCIBuildRequest} [triggerCodingCIBuildRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerCodingCIBuild: async (triggerCodingCIBuildRequest?: TriggerCodingCIBuildRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=TriggerCodingCIBuild`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(triggerCodingCIBuildRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 用户组更新
         * @summary 用户组更新
         * @param {UpdateUserGroupByIdRequest} [updateUserGroupByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroupById: async (updateUserGroupByIdRequest?: UpdateUserGroupByIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=UpdateUserGroupById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserGroupByIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * ✨ 测试计划归档
         * @summary 测试计划归档
         * @param {ArchiveTestRunRequest} [archiveTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTestRun(archiveTestRunRequest?: ArchiveTestRunRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchiveTestRun200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTestRun(archiveTestRunRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.archiveTestRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 为指定权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @summary 权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @param {AttachResourceScopeToPolicyRequest} [attachResourceScopeToPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest?: AttachResourceScopeToPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.attachResourceScopeToPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @summary 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachToResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachToResource(detachFromResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.attachToResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 绑定 CD 应用到项目
         * @summary 绑定 CD 应用到项目
         * @param {BindCdApplicationToProjectRequest} [bindCdApplicationToProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindCdApplicationToProject(bindCdApplicationToProjectRequest?: BindCdApplicationToProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bindCdApplicationToProject(bindCdApplicationToProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.bindCdApplicationToProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 关联外部仓库
         * @summary 外部仓库关联
         * @param {BoundExternalDepotRequest} [boundExternalDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boundExternalDepot(boundExternalDepotRequest?: BoundExternalDepotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boundExternalDepot(boundExternalDepotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.boundExternalDepot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 取消执行中的 CD 部署流程
         * @summary CD 部署流程取消执行
         * @param {CancelCdPipelineRequest} [cancelCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelCdPipeline(cancelCdPipelineRequest?: CancelCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelCdPipeline(cancelCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.cancelCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 清理构建计划缓存
         * @summary 构建计划缓存清理
         * @param {ClearCodingCIJobCacheRequest} [clearCodingCIJobCacheRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCodingCIJobCache(clearCodingCIJobCacheRequest?: ClearCodingCIJobCacheRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearCodingCIJobCache(clearCodingCIJobCacheRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.clearCodingCIJobCache']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品授信清单创建
         * @summary 制品授信清单创建
         * @param {CreateArtifactCreditRequest} [createArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArtifactCredit(createArtifactCreditRequest?: CreateArtifactCreditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateArtifactCredit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArtifactCredit(createArtifactCreditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createArtifactCredit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品属性新增（指定版本）
         * @summary 制品属性新增（指定版本）
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArtifactProperties(modifyArtifactPropertiesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createArtifactProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品仓库创建
         * @summary 制品仓库创建
         * @param {CreateArtifactRepositoryRequest} [createArtifactRepositoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArtifactRepository(createArtifactRepositoryRequest?: CreateArtifactRepositoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateArtifactRepository200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArtifactRepository(createArtifactRepositoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createArtifactRepository']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 生成附件预上传信息
         * @summary 附件预上传信息生成
         * @param {CreateAttachmentPrepareSignUrlRequest} [createAttachmentPrepareSignUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest?: CreateAttachmentPrepareSignUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAttachmentPrepareSignUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAttachmentPrepareSignUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Git仓库创建二进制文件，文件总大小不能超过10Mb
         * @summary Git文件-Git仓库创建二进制文件
         * @param {CreateBinaryFilesRequest} [createBinaryFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBinaryFiles(createBinaryFilesRequest?: CreateBinaryFilesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBinaryFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBinaryFiles(createBinaryFilesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBinaryFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增代码保护规则
         * @summary 仓库设置-新增代码保护规则
         * @param {CreateBranchProtectionRequest} [createBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranchProtection(createBranchProtectionRequest?: CreateBranchProtectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBranchProtection(createBranchProtectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBranchProtection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-新增保护分支规则管理员
         * @param {CreateBranchProtectionMemberRequest} [createBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranchProtectionMember(createBranchProtectionMemberRequest?: CreateBranchProtectionMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBranchProtectionMember(createBranchProtectionMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBranchProtectionMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例添加测试结果
         * @summary 测试用例添加测试结果
         * @param {CreateCaseResultRequest} [createCaseResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCaseResult(createCaseResultRequest?: CreateCaseResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCaseResult(createCaseResultRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCaseResult']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 云账号添加
         * @summary CD 云账号添加
         * @param {CreateCdCloudAccountRequest} [createCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCdCloudAccount(createCdCloudAccountRequest?: CreateCdCloudAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCdCloudAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCdCloudAccount(createCdCloudAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCdCloudAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组添加
         * @summary CD 主机组添加
         * @param {CreateCdHostServerGroupRequest} [createCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCdHostServerGroup(createCdHostServerGroupRequest?: CreateCdHostServerGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCdHostServerGroup(createCdHostServerGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCdHostServerGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 部署流程创建
         * @summary CD 部署流程创建
         * @param {CreateCdPipelineRequest} [createCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCdPipeline(createCdPipelineRequest?: CreateCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCdPipeline200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCdPipeline(createCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 任务执行
         * @summary CD 任务执行
         * @param {CreateCdTaskRequest} [createCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCdTask(createCdTaskRequest?: CreateCdTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCdTask200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCdTask(createCdTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCdTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建构建计划
         * @summary 构建计划创建
         * @param {CreateCodingCIJobRequest} [createCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCodingCIJob(createCodingCIJobRequest?: CreateCodingCIJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCodingCIJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCodingCIJob(createCodingCIJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCodingCIJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据团队模版创建构建计划
         * @summary 构建计划-根据团队模版创建
         * @param {CreateCodingCIJobByTeamTemplateRequest} [createCodingCIJobByTeamTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest?: CreateCodingCIJobByTeamTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCodingCIJobByTeamTemplate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCodingCIJobByTeamTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Coding项目创建
         * @summary 项目创建
         * @param {CreateCodingProjectRequest} [createCodingProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCodingProject(createCodingProjectRequest?: CreateCodingProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCodingProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCodingProject(createCodingProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCodingProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部门创建
         * @summary 部门创建
         * @param {CreateDepartmentRequest} [createDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(createDepartmentRequest?: CreateDepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(createDepartmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据模板创建仓库
         * @summary 仓库信息-根据模板创建仓库
         * @param {CreateDepotByTemplateRequest} [createDepotByTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepotByTemplate(createDepotByTemplateRequest?: CreateDepotByTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDepotByTemplate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepotByTemplate(createDepotByTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDepotByTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增 git 仓库文件推送规则
         * @summary 仓库设置-新增git仓库文件推送规则
         * @param {CreateDepotFilePushRuleRequest} [createDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepotFilePushRule(createDepotFilePushRuleRequest?: CreateDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepotFilePushRule(createDepotFilePushRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDepotFilePushRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增git仓库文件推送规则特权者
         * @summary 仓库设置-新增git仓库文件推送规则特权者
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createDepotFilePushRulePrivilege']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ \"    文件上传        1. 获取预签名URL          Action： 固定为 DescribePreSignUploadUrl   ProjectName: 项目名称   ContentType: 内容类型，和web端的文件上传时content-type是一样的。可以参考web端上传文件时，Http Header: Content-Type   FolderType :文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。   FolderId:  若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过  open api 【创建文件夹】获取。   FileName: 保存的文件名。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe***     {       \"Action\":\"DescribePreSignUploadUrl\",       \"ProjectName\":\"zhishiguanli\",       \"FolderId\":0,       \"FolderType\":1,       \"FileName\": \"20220727_1.csv\",       \"ContentType\": \"image/jpeg\"     }      响应数据:   UploadLink: 上传文件的URL   StorageKey: 上传到存储的文件路径   AuthToken: 用于校验身份数据的token，后续接口中使用   headers: 上传时需要的token信息          ```     {       \"Response\": {         \"RequestId\": \"99b1fbfb-8477-44b3-b19f-35acbcdbdf77\",         \"Data\": {           \"UploadLink\": \"https://coding-net-production-file-1257242599.cos.ap-shanghai.myqcloud.com/c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID7B14xvfnJxWtNpV95c1sAqIwms4_GnHMa-eCuULWfvXWTqp0qv8czbirX1BlXEXd%26q-sign-time%3D1661352589%3B1661354389%26q-key-time%3D1661352589%3B1661354389%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D337c3118dd1385d33f5ada4c0492755ac7d00419\",           \"StorageKey\": \"c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv\",           \"Headers\": \"{\\\"x-cos-security-token\\\":\\\"0ZVlbeAyb6cqcbI2HcZg75xppfMACLPac9f0c5517a5d13d9731b0adb708c2ecdhK1-UdtMEqc-XpsQW5v1bB1BGeHXMlwutOM24SaUfX6lSP531QDfVrKJzLl8-NpCgKZfUE_-_Pg29lfqSvWpbd0D-4pENoBL5IDhkXO1RmmDncvxbwm_aMGRMlPL3YwQEyjPGv8KJ36ZUDm1k5ERnKYf2_OllQtoW5lSeRRnvCQUd7cAvvzSIl6WD-VxXJ2N9jX5Z_bh6B9zFXtCWjr0is550-QaLSM32V0NP0wPV4bBy9PwNLA32gxhsf24dfUZZsBZZVF67lfFGWgcK7SuZRrE_QPiEd9L4et-4KxBj4pXsAxCTWmATrcAonNq6xJ-\\\"}\",           \"AuthToken\": \"819321faa15086676c9c474b8823d6ce67aa4ec907a4e8a37fa396f990bd610c\"         }       }     }     ```                         2. 上传文件CreateFile     这个步骤需要客户端自己完成。     上传URL 可以参考 项目协同中描述内容中的上传文件的 COS URL。          2.1 COS上传   参考脚本如下:   #!/bin/bash          file=本地文件路径     storageKey=返回的StorageKey     url=https://域名/${storageKey}               # 腾讯云COS上传 curl, 注意Authorization值为sign参数，经过urldecode转化后的值。x-cos-security-token 使用 响应中的Headers中返回的值，          curl -X PUT \"${url}\" \\     -H \'Authorization:q-sign-algorithm=sha1&q-ak=AKIDr0xilQrTFEUhvpLvJ9Ro3Ds_REhKTtYv-dXFbNBY8w1aDZR7rpUNPq6hXn_SdANN&q-sign-time=1661351394;1661353194&q-key-time=1661351394;1661353194&q-header-list=host&q-url-param-list=&q-signature=2574959eebb2ddf7dd5e6e19f30126c7a63cec58\' \\     -H \'x-cos-security-token:0ZVlbeAyb6cqcbI2HcZg75xppfMACLPaba476ee7278aba618b8794dcf090c81fhK1-UdtMEqc-XpsQW5v1bHRl8XcitKZd-0CGmDfln5OqFJigfAursov8MRS8h_abNT0Bns7F7D5tN26wXra6oBlvhxZ4wU11Zk2peuDXq4eWSUWOCtvf-3IaxoCs2KEwMtSFcds1byn_00Zj2YxG8ajHQrVT6Gtry9PW3ULfNe-YPpWaX_XArXpoyjWuaXpBjIFvEhR5sB0gGSTtyXhf9S6wWJAisNlwvOls5xAdnNRHJWyt8Td_f-Lc6yYIXV-aD9ZoGyl5NEQcxEip7GQRtb-p8QD9MG_rfYsJiQ0blMGQQGzexo7YHRhRTws6dlXU\' \\     -H \'user-agent:tencentcloud-cos-postman\' \\     -H \'cosclientagent:cos_mc_v4\' \\     -H \'cosclientip:219.136.173.47\' -T \"${file}\"                    2.2 minio上传     minio 上传脚本DEMO如下：     bucket=file-storage     file=\'～/Downloads/测试简单格式1.md (2).zip\'          # 测试导入1.zip          storageKey=c5318506-8807-4612-9ad8-d751c863983d.zip     s3_key=***     s3_secret=***     host=minio.nh51daup.dev.coding.io          resource=\"/${bucket}/${storageKey}\"          # content_type=\"application/octet-stream\"          content_type=\"application/zip\"     date=`date -R`     _signature=\"PUT\\n\\n${content_type}\\n${date}\\n${resource}\"     signature=`echo -en ${_signature} | openssl sha1 -hmac ${s3_secret} -binary | base64`          # minio文件上传 curl 命令          curl -X PUT -T \"${file}\" \\   -H \"Host: ${host}\" \\   -H \"Date: ${date}\" \\   -H \"Content-Type: ${content_type}\" \\   -H \"Authorization: AWS ${s3_key}:${signature}\" \\     http://${host}${resource}          3. 保存文件   StorageKey: 获取预签名URL接口返回的 StorageKey   AuthToken: 获取预签名URL接口返回的 AuthToken          POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d**ab          {       \"Action\":\"CreateFile\",       \"StorageKey\": \"2bdb7eea-57b4-495d-a5d0-67446822cea5.csv\",       \"AuthToken\": \"76ee1e30ef6df0552f0bd939f1f0359510d60d1806028f5c64fa31c116cf3f22\"     }         响应数据格式:   Id: 保存后的文件ID。   Name: 保存后的文件名称          ```     {       \"Response\": {         \"RequestId\": \"9958d6b7-ead6-4674-9ae8-21cd3054282b\",         \"Data\": {           \"Id\": 28909581,           \"Name\": \"20220727_1.csv\"         }       }     }     ```                    4. 创建事项DEMO     更详细参数说明参考open api文档   ProjectName: 项目名称     Name： 事项名称   FileIds: 数组类型，CreateFile 后响应的ID列表               POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9e53a2**e0ddc57ab          ```     {       \"Action\":\"CreateIssue\",       \"ProjectName\":\"zhishiguanli\",       \"Type\":\"DEFECT\",       \"Name\":\"需求清221101\",       \"Priority\":\"0\",       \"FileIds\":[28909581]     }     ```               4.1 项目协同需求描述图片同步方案          ## 方案一          需求系统在通过 OpenAPI 写入 CODING 需求时，通过正则方式提取所有图片，调用 CODING OpenAPI 上传图片到文件网盘，再替换需求内图片地址。     方案前提：     需求系统展示需求数据来源客户需求系统。     具体步骤：          1. 需求系统创建或更新图片时，调用 COIDNG 项目协同创建或编辑 OpenAPI     2. 获取需求系统需求描述     3. 正则提取图片地址     4. 调用 CODING OpenAPI 上传图片到文件网盘，获取到文件 ID     5. 通过文件 ID 和项目 ID 拼接成 CODING 图片相对地址，/api/project/{projectId}/files/{imageFileId}/imagePreview     6. 保存到 CODING 系统前，通过字符替换原图片地址为/api/project/{projectId}/files/{imageFileId}/imagePreview     7. 完成          ## 方案二          CODING 侧在项目协同 OpenAPI 创建或者编辑需求时，将外站图片地址转存（或者不过滤）。          ## 结论          方案一，无需依赖 CODING 更新，可直接开始。     方案二，需要依赖 CODING 更新，正在评估预计时间。          5. 创建文件夹     该接口可用于文件网盘中创建文件夹。   ProjectName: 项目名称   FoldName: 文件夹名称   ParentId: 父文件夹ID,如果是根路径，传 0。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9**a6e0ddc57ab          ```     {       \"Action\":\"CreateFolder\",       \"ProjectName\":\"zhishiguanli\",       \"FoldName\": \"Hello-sub-test-1\",       \"ParentId\": 0     }     ```          响应：          ```     {       \"Response\": {         \"RequestId\": \"e48d9d36-7473-4fac-b005-6fdc46afa69f\",         \"Data\": {           \"Id\": 28909737,           \"Name\": \"Hello-sub-test-1\"         }       }     }     ```       \"
         * @summary 文件创建
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(createFileRequest?: CreateFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(createFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 文件夹创建
         * @summary 文件夹创建
         * @param {CreateFolderRequest} [createFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(createFolderRequest?: CreateFolderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFolder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(createFolderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createFolder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用于代码仓库新建分支
         * @summary 仓库分支-用于代码仓库新建分支
         * @param {CreateGitBranchRequest} [createGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitBranch(createGitBranchRequest?: CreateGitBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitBranch(createGitBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建一次提交
         * @summary Git提交-创建一次提交
         * @param {CreateGitCommitRequest} [createGitCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitCommit(createGitCommitRequest?: CreateGitCommitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitCommit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitCommit(createGitCommitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitCommit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 为某次提交创建一条评论
         * @summary Git提交-为某次提交创建一条评论
         * @param {CreateGitCommitCommentRequest} [createGitCommitCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitCommitComment(createGitCommitCommentRequest?: CreateGitCommitCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitCommitComment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitCommitComment(createGitCommitCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitCommitComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建提交注释,注意：对于 NotesRef 参数建议默认为空，因为 git 会使用默认的 ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的 ref 来保存您的 git note，有可能会覆盖您原有的 ref。
         * @summary Git提交-创建提交注释。注意：对于 NotesRef 参数建议默认为空，因为git会使用默认的ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的ref来保存您的git note，有可能会覆盖您原有的ref。
         * @param {CreateGitCommitNoteRequest} [createGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitCommitNote(createGitCommitNoteRequest?: CreateGitCommitNoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitCommitNote(createGitCommitNoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitCommitNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新建部署公钥
         * @summary 仓库设置-新建部署公钥
         * @param {CreateGitDeployKeyRequest} [createGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitDeployKey(createGitDeployKeyRequest?: CreateGitDeployKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitDeployKey(createGitDeployKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitDeployKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建代码仓库
         * @summary 仓库信息-创建代码仓库
         * @param {CreateGitDepotRequest} [createGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitDepot(createGitDepotRequest?: CreateGitDepotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitDepot200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitDepot(createGitDepotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitDepot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建仓库文件
         * @summary Git文件-创建仓库文件
         * @param {CreateGitFilesRequest} [createGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitFiles(createGitFilesRequest?: CreateGitFilesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitFiles(createGitFilesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建git合并请求
         * @summary 合并请求-创建git合并请求
         * @param {CreateGitMergeReqRequest} [createGitMergeReqRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitMergeReq(createGitMergeReqRequest?: CreateGitMergeReqRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitMergeReq200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitMergeReq(createGitMergeReqRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitMergeReq']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建 Git 合并请求mr
         * @summary 合并请求-创建Git合并请求mr
         * @param {CreateGitMergeRequestRequest} [createGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitMergeRequest(createGitMergeRequestRequest?: CreateGitMergeRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitMergeRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitMergeRequest(createGitMergeRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitMergeRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建标签保护规则
         * @summary 仓库设置-创建标签保护规则
         * @param {CreateGitProtectedTagRuleRequest} [createGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitProtectedTagRule(createGitProtectedTagRuleRequest?: CreateGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitProtectedTagRule(createGitProtectedTagRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitProtectedTagRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 批量创建标签保护规则
         * @summary 仓库设置-批量创建标签保护规则
         * @param {CreateGitProtectedTagRulesRequest} [createGitProtectedTagRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitProtectedTagRules(createGitProtectedTagRulesRequest?: CreateGitProtectedTagRulesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitProtectedTagRules(createGitProtectedTagRulesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitProtectedTagRules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新建 git 版本
         * @summary 版本信息-新建git版本
         * @param {CreateGitReleaseRequest} [createGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitRelease(createGitReleaseRequest?: CreateGitReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitRelease(createGitReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建标签
         * @summary 标签信息-创建标签
         * @param {CreateGitTagRequest} [createGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGitTag(createGitTagRequest?: CreateGitTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGitTag200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGitTag(createGitTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGitTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建事项
         * @summary 事项创建
         * @param {CreateIssueRequest} [createIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssue(createIssueRequest?: CreateIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIssue200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssue(createIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 添加前置事项
         * @summary 前置事项添加
         * @param {CreateIssueBlockRequest} [createIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueBlock(createIssueBlockRequest?: CreateIssueBlockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueBlock(createIssueBlockRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIssueBlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建事项评论
         * @summary 事项评论创建
         * @param {CreateIssueCommentRequest} [createIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueComment(createIssueCommentRequest?: CreateIssueCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueComment(createIssueCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIssueComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建事项模块
         * @summary 事项模块创建
         * @param {CreateIssueModuleRequest} [createIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueModule(createIssueModuleRequest?: CreateIssueModuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIssueModule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueModule(createIssueModuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIssueModule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 登记工时
         * @summary 工时登记
         * @param {CreateIssueWorkHoursRequest} [createIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueWorkHours(createIssueWorkHoursRequest?: CreateIssueWorkHoursRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssueWorkHours(createIssueWorkHoursRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIssueWorkHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建迭代
         * @summary 迭代创建
         * @param {CreateIterationRequest} [createIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIteration(createIterationRequest?: CreateIterationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIteration200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIteration(createIterationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createIteration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 导入团队成员SSH公钥
         * @summary 仓库设置-导入团队成员SSH公钥
         * @param {CreateMemberSshKeyRequest} [createMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemberSshKey(createMemberSshKeyRequest?: CreateMemberSshKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMemberSshKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemberSshKey(createMemberSshKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMemberSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建合并请求行评论和改动文件diff行评论
         * @summary 合并请求-创建合并请求行评论和改动文件diff行评论
         * @param {CreateMergeRequestNoteRequest} [createMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMergeRequestNote(createMergeRequestNoteRequest?: CreateMergeRequestNoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMergeRequestNote200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMergeRequestNote(createMergeRequestNoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMergeRequestNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增合并请求评审者
         * @summary 合并请求-新增合并请求评审者
         * @param {CreateMergeRequestReviewerRequest} [createMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMergeRequestReviewer(createMergeRequestReviewerRequest?: CreateMergeRequestReviewerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMergeRequestReviewer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMergeRequestReviewer(createMergeRequestReviewerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMergeRequestReviewer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组创建
         * @summary 权限组创建
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(createPolicyRequest?: CreatePolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyPolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(createPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集创建
         * @summary 项目集创建
         * @param {CreateProgramRequest} [createProgramRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProgram(createProgramRequest?: CreateProgramRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProgram200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProgram(createProgramRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集成员权限组添加
         * @summary 项目集成员权限组添加
         * @param {CreateProgramMemberPolicyRequest} [createProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProgramMemberPolicy(createProgramMemberPolicyRequest?: CreateProgramMemberPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProgramMemberPolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProgramMemberPolicy(createProgramMemberPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProgramMemberPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集中添加项目
         * @summary 项目集中添加项目
         * @param {CreateProgramProjectsRequest} [createProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProgramProjects(createProgramProjectsRequest?: CreateProgramProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProgramProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProgramProjects(createProgramProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProgramProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目公告创建
         * @summary 项目公告创建
         * @param {CreateProjectAnnouncementRequest} [createProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectAnnouncement(createProjectAnnouncementRequest?: CreateProjectAnnouncementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectAnnouncement200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectAnnouncement(createProjectAnnouncementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProjectAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目标签创建
         * @summary 项目标签创建
         * @param {CreateProjectLabelRequest} [createProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectLabel(createProjectLabelRequest?: CreateProjectLabelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyProjectLabel200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectLabel(createProjectLabelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProjectLabel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目成员主体新增(包含用户组、部门、成员)
         * @summary 项目成员主体新增(包含用户组、部门、成员)
         * @param {CreateProjectMemberPrincipalRequest} [createProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectMemberPrincipal(createProjectMemberPrincipalRequest?: CreateProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectMemberPrincipal(createProjectMemberPrincipalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProjectMemberPrincipal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 模版项目创建
         * @summary 模版项目创建
         * @param {CreateProjectWithTemplateRequest} [createProjectWithTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectWithTemplate(createProjectWithTemplateRequest?: CreateProjectWithTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectWithTemplate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectWithTemplate(createProjectWithTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createProjectWithTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建只读分支
         * @summary 仓库分支-创建只读分支
         * @param {CreateReadOnlyRefRequest} [createReadOnlyRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReadOnlyRef(createReadOnlyRefRequest?: CreateReadOnlyRefRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReadOnlyRef(createReadOnlyRefRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createReadOnlyRef']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建版本
         * @summary 版本创建
         * @param {CreateReleaseRequest} [createReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelease(createReleaseRequest?: CreateReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyRelease200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRelease(createReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 创建测试报告
         * @summary 测试报告创建
         * @param {CreateReportRequest} [createReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(createReportRequest?: CreateReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(createReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 需求关联缺陷
         * @summary 需求关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequirementDefectRelation(createRequirementDefectRelationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createRequirementDefectRelation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 导入用户SSH公钥
         * @summary 仓库设置-导入用户SSH公钥
         * @param {CreateSshKeyRequest} [createSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSshKey(createSshKeyRequest?: CreateSshKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSshKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSshKey(createSshKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例创建
         * @summary 测试用例创建
         * @param {CreateTestCaseRequest} [createTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestCase(createTestCaseRequest?: CreateTestCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTestCase200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestCase(createTestCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例分组创建
         * @summary 测试用例分组创建
         * @param {CreateTestCaseSectionRequest} [createTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestCaseSection(createTestCaseSectionRequest?: CreateTestCaseSectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestCaseSection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestCaseSection(createTestCaseSectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestCaseSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务关联缺陷
         * @summary 测试任务关联缺陷
         * @param {CreateTestDefectRequest} [createTestDefectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestDefect(createTestDefectRequest?: CreateTestDefectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestDefect(createTestDefectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestDefect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务添加测试结果
         * @summary 测试任务添加测试结果
         * @param {CreateTestResultRequest} [createTestResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestResult(createTestResultRequest?: CreateTestResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestResult(createTestResultRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestResult']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务状态批量更新
         * @summary 测试任务状态批量更新
         * @param {CreateTestResultsRequest} [createTestResultsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestResults(createTestResultsRequest?: CreateTestResultsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestResults(createTestResultsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestResults']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试计划创建
         * @summary 测试计划创建
         * @param {CreateTestRunRequest} [createTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestRun(createTestRunRequest?: CreateTestRunRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestRun200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestRun(createTestRunRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务添加某步骤的测试结果
         * @summary 测试任务添加某步骤的测试结果
         * @param {CreateTestStepResultRequest} [createTestStepResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestStepResult(createTestStepResultRequest?: CreateTestStepResultRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestStepResult(createTestStepResultRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTestStepResult']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组创建
         * @summary 用户组创建
         * @param {CreateUserGroupRequest} [createUserGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserGroup(createUserGroupRequest?: CreateUserGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserGroup(createUserGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUserGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组添加用户
         * @summary 用户组添加用户
         * @param {CreateUserGroupUsersRequest} [createUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserGroupUsers(createUserGroupUsersRequest?: CreateUserGroupUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserGroupUsers(createUserGroupUsersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUserGroupUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组清理用户
         * @summary 用户组清理用户
         * @param {DeleteAllUsersOnGroupRequest} [deleteAllUsersOnGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest?: DeleteAllUsersOnGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteAllUsersOnGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除指定版本制品的指定制品属性
         * @summary 制品属性删除
         * @param {DeleteArtifactPropertiesRequest} [deleteArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArtifactProperties(deleteArtifactPropertiesRequest?: DeleteArtifactPropertiesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArtifactProperties(deleteArtifactPropertiesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteArtifactProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除保护分支规则
         * @summary 仓库设置-删除保护分支规则
         * @param {DeleteBranchProtectionRequest} [deleteBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBranchProtection(deleteBranchProtectionRequest?: DeleteBranchProtectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBranchProtection(deleteBranchProtectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBranchProtection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-删除保护分支规则管理员
         * @param {DeleteBranchProtectionMemberRequest} [deleteBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBranchProtectionMember(deleteBranchProtectionMemberRequest?: DeleteBranchProtectionMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBranchProtectionMember(deleteBranchProtectionMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBranchProtectionMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 云账号删除
         * @summary CD 云账号删除
         * @param {DeleteCdCloudAccountRequest} [deleteCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCdCloudAccount(deleteCdCloudAccountRequest?: DeleteCdCloudAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCdCloudAccount(deleteCdCloudAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCdCloudAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组删除
         * @summary CD 主机组删除
         * @param {DeleteCdHostServerGroupRequest} [deleteCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCdHostServerGroup(deleteCdHostServerGroupRequest?: DeleteCdHostServerGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCdHostServerGroup(deleteCdHostServerGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCdHostServerGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 部署流程删除
         * @summary CD 部署流程删除
         * @param {DeleteCdPipelineRequest} [deleteCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCdPipeline(deleteCdPipelineRequest?: DeleteCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCdPipeline(deleteCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除构建
         * @summary 构建删除
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCodingCIBuild(describeCodingCIBuildStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCodingCIBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除构建计划
         * @summary 构建计划删除
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCodingCIJob(deleteCodingCIJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCodingCIJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部门删除
         * @summary 部门删除
         * @param {DeleteDepartmentRequest} [deleteDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartment(deleteDepartmentRequest?: DeleteDepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartment(deleteDepartmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除 git 仓库文件推送规则
         * @summary 仓库设置-删除git仓库文件推送规则
         * @param {DeleteDepotFilePushRuleRequest} [deleteDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepotFilePushRule(deleteDepotFilePushRuleRequest?: DeleteDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDepotFilePushRule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepotFilePushRule(deleteDepotFilePushRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDepotFilePushRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除 git 仓库特权者文件推送权限
         * @summary 仓库设置-删除git仓库特权者文件推送权限
         * @param {DeleteDepotFilePushRuleDenyPrivilegeRequest} [deleteDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest?: DeleteDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteDepotFilePushRuleDenyPrivilege']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除代码仓库分支
         * @summary 仓库分支-删除代码仓库分支
         * @param {DeleteGitBranchRequest} [deleteGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitBranch(deleteGitBranchRequest?: DeleteGitBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitBranch(deleteGitBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除部署公钥
         * @summary 仓库设置-删除部署公钥
         * @param {DeleteGitDeployKeyRequest} [deleteGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitDeployKey(deleteGitDeployKeyRequest?: DeleteGitDeployKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitDeployKey(deleteGitDeployKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitDeployKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除git仓库
         * @summary 仓库信息-删除git仓库
         * @param {DeleteGitDepotRequest} [deleteGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitDepot(deleteGitDepotRequest?: DeleteGitDepotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitDepot(deleteGitDepotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitDepot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除文件并提交
         * @summary Git文件-删除文件并提交
         * @param {DeleteGitFilesRequest} [deleteGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitFiles(deleteGitFilesRequest?: DeleteGitFilesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGitFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitFiles(deleteGitFilesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除已合并到默认分支的分支（此操作不会删除受保护的分支）
         * @summary 仓库分支-删除已合并到默认分支的分支（此操作不会删除受保护的分支)
         * @param {DeleteGitMergedBranchesRequest} [deleteGitMergedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitMergedBranches(deleteGitMergedBranchesRequest?: DeleteGitMergedBranchesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitMergedBranches(deleteGitMergedBranchesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitMergedBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除标签保护规则
         * @summary 标签信息-删除标签保护规则
         * @param {DeleteGitProtectedTagRuleRequest} [deleteGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest?: DeleteGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitProtectedTagRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除仓库版本
         * @summary 版本信息-删除仓库版本
         * @param {DeleteGitReleaseRequest} [deleteGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitRelease(deleteGitReleaseRequest?: DeleteGitReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitRelease(deleteGitReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 代码仓库删除tag
         * @summary 标签信息-代码仓库删除tag
         * @param {DeleteGitTagRequest} [deleteGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGitTag(deleteGitTagRequest?: DeleteGitTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGitTag(deleteGitTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteGitTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除事项
         * @summary 事项删除
         * @param {DeleteIssueRequest} [deleteIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssue(deleteIssueRequest?: DeleteIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssue(deleteIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除前置事项
         * @summary 前置事项删除
         * @param {DeleteIssueBlockRequest} [deleteIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueBlock(deleteIssueBlockRequest?: DeleteIssueBlockRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssueBlock(deleteIssueBlockRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIssueBlock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除事项模块
         * @summary 事项模块删除
         * @param {DeleteIssueModuleRequest} [deleteIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueModule(deleteIssueModuleRequest?: DeleteIssueModuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssueModule(deleteIssueModuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIssueModule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除工时日志
         * @summary 工时日志删除
         * @param {DeleteIssueWorkHoursRequest} [deleteIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssueWorkHours(deleteIssueWorkHoursRequest?: DeleteIssueWorkHoursRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssueWorkHours(deleteIssueWorkHoursRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIssueWorkHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除迭代
         * @summary 迭代删除
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIteration(deleteIterationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteIteration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除团队成员的SSH公钥
         * @summary 仓库设置-删除团队成员的SSH公钥
         * @param {DeleteMemberSshKeyRequest} [deleteMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberSshKey(deleteMemberSshKeyRequest?: DeleteMemberSshKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberSshKey(deleteMemberSshKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMemberSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除合并请求行评论和改动文件diff行评论
         * @summary 合并请求-删除合并请求行评论和改动文件diff行评论
         * @param {DeleteMergeRequestNoteRequest} [deleteMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMergeRequestNote(deleteMergeRequestNoteRequest?: DeleteMergeRequestNoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMergeRequestNote200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMergeRequestNote(deleteMergeRequestNoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMergeRequestNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除mr评审者
         * @summary 合并请求-删除mr评审者
         * @param {DeleteMergeRequestReviewerRequest} [deleteMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest?: DeleteMergeRequestReviewerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMergeRequestReviewer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMergeRequestReviewer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 单个项目删除
         * @summary 单个项目删除
         * @param {DeleteOneProjectRequest} [deleteOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneProject(deleteOneProjectRequest?: DeleteOneProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneProject(deleteOneProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteOneProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组批量删除
         * @summary 权限组批量删除
         * @param {DeletePoliciesByIdRequest} [deletePoliciesByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePoliciesById(deletePoliciesByIdRequest?: DeletePoliciesByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletePoliciesById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePoliciesById(deletePoliciesByIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletePoliciesById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集成员权限组删除
         * @summary 项目集成员权限组删除
         * @param {DeleteProgramMemberPolicyRequest} [deleteProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest?: DeleteProgramMemberPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProgramMemberPolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProgramMemberPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目公告删除
         * @summary 项目公告删除
         * @param {DeleteProjectAnnouncementRequest} [deleteProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectAnnouncement(deleteProjectAnnouncementRequest?: DeleteProjectAnnouncementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectAnnouncement(deleteProjectAnnouncementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目标签删除
         * @summary 项目标签删除
         * @param {DeleteProjectLabelRequest} [deleteProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectLabel(deleteProjectLabelRequest?: DeleteProjectLabelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProjectLabel200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectLabel(deleteProjectLabelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectLabel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目成员主体删除(包含用户组、部门、成员)
         * @summary 项目成员主体删除(包含用户组、部门、成员)
         * @param {DeleteProjectMemberPrincipalRequest} [deleteProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest?: DeleteProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectMemberPrincipal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除版本
         * @summary 版本删除
         * @param {DeleteReleaseRequest} [deleteReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRelease(deleteReleaseRequest?: DeleteReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRelease(deleteReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试报告删除
         * @summary 测试报告删除
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(deleteReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 需求取消关联缺陷
         * @summary 需求取消关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequirementDefectRelation(createRequirementDefectRelationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteRequirementDefectRelation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除当前用户的SSH公钥
         * @summary 仓库设置-删除当前用户的SSH公钥
         * @param {DeleteSshKeyRequest} [deleteSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSshKey(deleteSshKeyRequest?: DeleteSshKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSshKey(deleteSshKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除团队级别的分支规范
         * @summary 仓库设置-删除团队级别的分支规范
         * @param {DeleteTeamLevelDepotSpecRequest} [deleteTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest?: DeleteTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTeamLevelDepotSpec']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 团队成员删除
         * @summary 团队成员删除
         * @param {DeleteTeamMemberRequest} [deleteTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamMember(deleteTeamMemberRequest?: DeleteTeamMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamMember(deleteTeamMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTeamMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例删除
         * @summary 测试用例删除
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestCase(deleteTestCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例分组删除
         * @summary 测试用例分组删除
         * @param {DeleteTestCaseSectionRequest} [deleteTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestCaseSection(deleteTestCaseSectionRequest?: DeleteTestCaseSectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestCaseSection(deleteTestCaseSectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTestCaseSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试计划删除
         * @summary 测试计划删除
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestRun(deleteTestRunRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTestRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组删除
         * @summary 用户组删除
         * @param {DeleteUserGroupByIdsRequest} [deleteUserGroupByIdsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserGroupByIds(deleteUserGroupByIdsRequest?: DeleteUserGroupByIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroupByIds(deleteUserGroupByIdsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUserGroupByIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组删除用户
         * @summary 用户组删除用户
         * @param {DeleteUserGroupUsersRequest} [deleteUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserGroupUsers(deleteUserGroupUsersRequest?: DeleteUserGroupUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroupUsers(deleteUserGroupUsersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUserGroupUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 在堡垒机上安装 CD 客户端必要的 Secret 凭据参数
         * @summary 堡垒机安装 Secret
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeAgentSecret(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeAgentSecret200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeAgentSecret(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeAgentSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取所有合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取所有合并请求行评论和改动文件diff行评论
         * @param {DescribeAllMergeRequestNotesRequest} [describeAllMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest?: DescribeAllMergeRequestNotesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeAllMergeRequestNotes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeAllMergeRequestNotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目标签查询
         * @summary 项目标签查询
         * @param {DescribeAllProjectLabelsRequest} [describeAllProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeAllProjectLabels(describeAllProjectLabelsRequest?: DescribeAllProjectLabelsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeAllProjectLabels200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeAllProjectLabels(describeAllProjectLabelsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeAllProjectLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询全部有权限的项目工时日志列表
         * @summary 工时日志列表查询
         * @param {DescribeAllProjectsIssueWorkLogListRequest} [describeAllProjectsIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest?: DescribeAllProjectsIssueWorkLogListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeAllProjectsIssueWorkLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeAllProjectsIssueWorkLogList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品Checksum列表查询
         * @summary 制品Checksum列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactChecksums(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactChecksums200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactChecksums(describeArtifactChecksumsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactChecksums']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过授信清单ID查询制品授信清单详情
         * @summary 查询制品授信清单详情
         * @param {DescribeArtifactCreditRequest} [describeArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactCredit(describeArtifactCreditRequest?: DescribeArtifactCreditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactCredit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactCredit(describeArtifactCreditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactCredit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品授信清单列表查询
         * @summary 制品授信清单列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactCreditList(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactCreditList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactCreditList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactCreditList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品文件临时下载链接获取
         * @summary 制品文件临时下载链接获取
         * @param {DescribeArtifactFileDownloadUrlRequest} [describeArtifactFileDownloadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest?: DescribeArtifactFileDownloadUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactFileDownloadUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactFileDownloadUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品包（镜像）列表查询
         * @summary 制品包（镜像）列表查询
         * @param {DescribeArtifactPackageListRequest} [describeArtifactPackageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactPackageList(describeArtifactPackageListRequest?: DescribeArtifactPackageListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactPackageList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactPackageList(describeArtifactPackageListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactPackageList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 指定制品版本的制品属性列表查询
         * @summary 制品属性列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactProperties(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactProperties200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactProperties(describeArtifactChecksumsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品仓库下可下载的文件列表获取
         * @summary 制品仓库下可下载的文件列表获取
         * @param {DescribeArtifactRepositoryFileListRequest} [describeArtifactRepositoryFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest?: DescribeArtifactRepositoryFileListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactRepositoryFileList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactRepositoryFileList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询当前团队指定项目的制品仓库列表
         * @summary 制品仓库列表查询
         * @param {DescribeArtifactRepositoryListRequest} [describeArtifactRepositoryListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactRepositoryList(describeArtifactRepositoryListRequest?: DescribeArtifactRepositoryListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactRepositoryList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactRepositoryList(describeArtifactRepositoryListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactRepositoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品版本可下载的文件列表获取（暂仅支持类型为: 1-Generic;3-maven;4-npm;5-pypi 制品）
         * @summary 制品版本可下载的文件列表获取
         * @param {DescribeArtifactVersionFileListRequest} [describeArtifactVersionFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactVersionFileList(describeArtifactVersionFileListRequest?: DescribeArtifactVersionFileListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactVersionFileList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactVersionFileList(describeArtifactVersionFileListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactVersionFileList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品版本列表查询
         * @summary 制品版本列表查询
         * @param {DescribeArtifactVersionListRequest} [describeArtifactVersionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeArtifactVersionList(describeArtifactVersionListRequest?: DescribeArtifactVersionListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeArtifactVersionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeArtifactVersionList(describeArtifactVersionListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeArtifactVersionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组列表查询（指定资源）
         * @summary 权限组列表查询（指定资源）
         * @param {DescribeAvailablePoliciesOnResourceRequest} [describeAvailablePoliciesOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest?: DescribeAvailablePoliciesOnResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeAvailablePoliciesOnResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeAvailablePoliciesOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询后置事项
         * @summary 后置事项查询
         * @param {DescribeBlockIssueListRequest} [describeBlockIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeBlockIssueList(describeBlockIssueListRequest?: DescribeBlockIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeBlockIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeBlockIssueList(describeBlockIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeBlockIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询前置事项
         * @summary 前置事项查询
         * @param {DescribeBlockedByIssueListRequest} [describeBlockedByIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeBlockedByIssueList(describeBlockedByIssueListRequest?: DescribeBlockedByIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeBlockedByIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeBlockedByIssueList(describeBlockedByIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeBlockedByIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询单个保护分支规则
         * @summary 仓库设置-查询单个保护分支规则
         * @param {DescribeBranchProtectionRequest} [describeBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeBranchProtection(describeBranchProtectionRequest?: DescribeBranchProtectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeBranchProtection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeBranchProtection(describeBranchProtectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeBranchProtection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询保护分支规则下所有管理员信息
         * @summary 仓库设置-查询保护分支规则下所有管理员信息
         * @param {DescribeBranchProtectionMembersRequest} [describeBranchProtectionMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeBranchProtectionMembers(describeBranchProtectionMembersRequest?: DescribeBranchProtectionMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeBranchProtectionMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeBranchProtectionMembers(describeBranchProtectionMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeBranchProtectionMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库保护分支规则集合
         * @summary 仓库设置-查询仓库保护分支规则集合
         * @param {DescribeBranchProtectionsRequest} [describeBranchProtectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeBranchProtections(describeBranchProtectionsRequest?: DescribeBranchProtectionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeBranchProtections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeBranchProtections(describeBranchProtectionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeBranchProtections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查看两个分支是否可以合并
         * @summary 合并请求-查看两个分支是否可以合并
         * @param {DescribeCanMergeRequest} [describeCanMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCanMerge(describeCanMergeRequest?: DescribeCanMergeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCanMerge200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCanMerge(describeCanMergeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCanMerge']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 堡垒机列表获取
         * @summary CD 堡垒机列表获取
         * @param {DescribeCdAgentMachinesRequest} [describeCdAgentMachinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdAgentMachines(describeCdAgentMachinesRequest?: DescribeCdAgentMachinesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdAgentMachines200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdAgentMachines(describeCdAgentMachinesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdAgentMachines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 应用详情获取
         * @summary CD 应用详情获取
         * @param {DescribeCdApplicationRequest} [describeCdApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdApplication(describeCdApplicationRequest?: DescribeCdApplicationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdApplication200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdApplication(describeCdApplicationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 应用列表获取
         * @summary CD 应用列表获取
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdApplications(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdApplications200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdApplications(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据项目名获取关联应用列表
         * @summary 关联应用列表获取（指定项目名）
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdApplicationsByProject(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdApplicationsByProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdApplicationsByProject(describeWikiListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdApplicationsByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 云账号列表获取
         * @summary CD 云账号列表获取
         * @param {DescribeCdCloudAccountsRequest} [describeCdCloudAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdCloudAccounts(describeCdCloudAccountsRequest?: DescribeCdCloudAccountsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdCloudAccounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdCloudAccounts(describeCdCloudAccountsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdCloudAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据应用名列表获取发布次数
         * @summary 发布次数-根据应用名列表获取
         * @param {DescribeCdDeployCountByApplicationsRequest} [describeCdDeployCountByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest?: DescribeCdDeployCountByApplicationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployCountByApplications200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployCountByApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 关联应用的发布次数获取（指定项目名）
         * @summary 关联应用的发布次数获取（指定项目名）
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployCountByProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployCountByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 发布时长-根据应用名列表获取
         * @summary 发布时长-根据应用名列表获取
         * @param {DescribeCdDeployTimeByApplicationsRequest} [describeCdDeployTimeByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest?: DescribeCdDeployTimeByApplicationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployTimeByApplications200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployTimeByApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 关联应用的发布时长-根据项目名获取
         * @summary 关联应用的发布时长-根据项目名获取
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployTimeByProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployTimeByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 发布趋势-根据应用名列表获取
         * @summary 发布趋势-根据应用名列表获取
         * @param {DescribeCdDeployTrendByApplicationsRequest} [describeCdDeployTrendByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest?: DescribeCdDeployTrendByApplicationsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployTrendByApplications200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployTrendByApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 关联应用的发布趋势-根据项目名获取
         * @summary 关联应用的发布趋势-根据项目名获取
         * @param {DescribeCdDeployTrendByProjectRequest} [describeCdDeployTrendByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest?: DescribeCdDeployTrendByProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdDeployTrendByProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdDeployTrendByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组获取
         * @summary CD 主机组获取
         * @param {DescribeCdHostServerGroupRequest} [describeCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdHostServerGroup(describeCdHostServerGroupRequest?: DescribeCdHostServerGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdHostServerGroup(describeCdHostServerGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdHostServerGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组列表获取
         * @summary CD 主机组列表获取
         * @param {DescribeCdHostServerGroupsRequest} [describeCdHostServerGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdHostServerGroups(describeCdHostServerGroupsRequest?: DescribeCdHostServerGroupsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdHostServerGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdHostServerGroups(describeCdHostServerGroupsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdHostServerGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 部署流程执行记录获取
         * @summary CD 部署流程执行记录获取
         * @param {DescribeCdPipelineRequest} [describeCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdPipeline(describeCdPipelineRequest?: DescribeCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdPipeline200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdPipeline(describeCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 部署流程配置-根据名称获取
         * @summary CD 部署流程配置-根据名称获取
         * @param {DescribeCdPipelineConfigRequest} [describeCdPipelineConfigRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdPipelineConfig(describeCdPipelineConfigRequest?: DescribeCdPipelineConfigRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdPipelineConfig200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdPipelineConfig(describeCdPipelineConfigRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdPipelineConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 应用下的所有部署流程配置获取
         * @summary CD 应用下的所有部署流程配置获取
         * @param {DescribeCdPipelineConfigsRequest} [describeCdPipelineConfigsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdPipelineConfigs(describeCdPipelineConfigsRequest?: DescribeCdPipelineConfigsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdPipelineConfigs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdPipelineConfigs(describeCdPipelineConfigsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdPipelineConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 任务执行记录获取
         * @summary CD 任务执行记录获取
         * @param {DescribeCdTaskRequest} [describeCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCdTask(describeCdTaskRequest?: DescribeCdTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCdTask200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCdTask(describeCdTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCdTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询代码片段详细列表
         * @summary 仓库信息-查询代码片段详细列表
         * @param {DescribeCodeSearchRequest} [describeCodeSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodeSearch(describeCodeSearchRequest?: DescribeCodeSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodeSearch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodeSearch(describeCodeSearchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodeSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询构建记录详情
         * @summary 构建记录详情查询
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuild200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuild(describeCodingCIBuildStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询构建任务制品
         * @summary 构建任务制品查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildArtifacts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildArtifacts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取构建计划环境变量
         * @summary 构建计划环境变量获取
         * @param {DescribeCodingCIBuildEnvsRequest} [describeCodingCIBuildEnvsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest?: DescribeCodingCIBuildEnvsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildEnvs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildEnvs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建任务网页报告查询
         * @summary 构建任务网页报告查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildHtmlReports200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildHtmlReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建日志获取
         * @summary 构建日志获取
         * @param {DescribeCodingCIBuildLogRequest} [describeCodingCIBuildLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildLog(describeCodingCIBuildLogRequest?: DescribeCodingCIBuildLogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildLog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildLog(describeCodingCIBuildLogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建完整日志查询（原始日志 Raw）
         * @summary 构建完整日志查询（原始日志 Raw）
         * @param {DescribeCodingCIBuildLogRawRequest} [describeCodingCIBuildLogRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest?: DescribeCodingCIBuildLogRawRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildLogRaw200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildLogRaw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建计划度量查询
         * @summary 构建计划度量查询
         * @param {DescribeCodingCIBuildMetricsRequest} [describeCodingCIBuildMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest?: DescribeCodingCIBuildMetricsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildMetrics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建任务阶段获取
         * @summary 构建任务阶段获取
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildStage(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildStage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildStage(describeCodingCIBuildStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildStage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建任务统计
         * @summary 构建任务统计
         * @param {DescribeCodingCIBuildStatisticsRequest} [describeCodingCIBuildStatisticsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest?: DescribeCodingCIBuildStatisticsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildStatistics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建任务指定阶段的步骤获取
         * @summary 构建任务指定阶段的步骤获取
         * @param {DescribeCodingCIBuildStepRequest} [describeCodingCIBuildStepRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildStep(describeCodingCIBuildStepRequest?: DescribeCodingCIBuildStepRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildStep200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildStep(describeCodingCIBuildStepRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildStep']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建步骤日志获取
         * @summary 构建步骤日志获取
         * @param {DescribeCodingCIBuildStepLogRequest} [describeCodingCIBuildStepLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest?: DescribeCodingCIBuildStepLogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuildStepLog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuildStepLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建计划的构建列表获取
         * @summary 构建计划的构建列表获取
         * @param {DescribeCodingCIBuildsRequest} [describeCodingCIBuildsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIBuilds(describeCodingCIBuildsRequest?: DescribeCodingCIBuildsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIBuilds200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIBuilds(describeCodingCIBuildsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIBuilds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建计划详情获取
         * @summary 构建计划详情获取
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIJob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIJob(deleteCodingCIJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建计划查询（通过项目ID）
         * @summary 构建计划查询（通过项目ID）
         * @param {DescribeCodingCIJobsRequest} [describeCodingCIJobsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCIJobs(describeCodingCIJobsRequest?: DescribeCodingCIJobsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCIJobs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCIJobs(describeCodingCIJobsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCIJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 当前用户信息查询
         * @summary 当前用户信息查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingCurrentUser(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingCurrentUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingCurrentUser(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目列表查询
         * @summary 项目列表查询
         * @param {DescribeCodingProjectsRequest} [describeCodingProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCodingProjects(describeCodingProjectsRequest?: DescribeCodingProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCodingProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCodingProjects(describeCodingProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCodingProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询commit的ref信息
         * @summary Git提交-查询commit的ref信息
         * @param {DescribeCommitRefsRequest} [describeCommitRefsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCommitRefs(describeCommitRefsRequest?: DescribeCommitRefsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCommitRefs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCommitRefs(describeCommitRefsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCommitRefs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询两个请求之间的请求列表（source target顺序正常）
         * @summary Git提交-查询两个请求之间的请求列表（source target顺序正常）
         * @param {DescribeCommitsBetweenCommitAndCommitRequest} [describeCommitsBetweenCommitAndCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest?: DescribeCommitsBetweenCommitAndCommitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeCommitsBetweenCommitAndCommit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeCommitsBetweenCommitAndCommit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取配置方案
         * @summary 配置方案获取
         * @param {DescribeConfigTemplateListRequest} [describeConfigTemplateListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeConfigTemplateList(describeConfigTemplateListRequest?: DescribeConfigTemplateListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeConfigTemplateList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeConfigTemplateList(describeConfigTemplateListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeConfigTemplateList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 缺陷类型列表查询
         * @summary 缺陷类型列表查询
         * @param {DescribeDefectTypesRequest} [describeDefectTypesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDefectTypes(describeDefectTypesRequest?: DescribeDefectTypesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDefectTypes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDefectTypes(describeDefectTypesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDefectTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部门详情查询
         * @summary 部门详情查询
         * @param {DescribeDepartmentRequest} [describeDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepartment(describeDepartmentRequest?: DescribeDepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepartment(describeDepartmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取部门成员列表（分页列表）查询选中部门下面所有的成员
         * @summary 部门成员列表查询
         * @param {DescribeDepartmentMembersRequest} [describeDepartmentMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepartmentMembers(describeDepartmentMembersRequest?: DescribeDepartmentMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepartmentMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepartmentMembers(describeDepartmentMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepartmentMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeDepotByNameInfoRequest} [describeDepotByNameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotByNameInfo(describeDepotByNameInfoRequest?: DescribeDepotByNameInfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotByNameInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotByNameInfo(describeDepotByNameInfoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotByNameInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库的默认分支
         * @summary 仓库分支-查询仓库的默认分支
         * @param {DescribeDepotDefaultBranchRequest} [describeDepotDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotDefaultBranch(describeDepotDefaultBranchRequest?: DescribeDepotDefaultBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotDefaultBranch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotDefaultBranch(describeDepotDefaultBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotDefaultBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 git 仓库文件推送规则
         * @summary 仓库设置-查询git仓库文件推送规则
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotFilePushRules(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotFilePushRules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotFilePushRules(describeDepotFilePushRulesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotFilePushRules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库合并请求列表
         * @summary 合并请求-查询仓库合并请求列表
         * @param {DescribeDepotMergeRequestsRequest} [describeDepotMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotMergeRequests(describeDepotMergeRequestsRequest?: DescribeDepotMergeRequestsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotMergeRequests200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotMergeRequests(describeDepotMergeRequestsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotMergeRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库推送设置
         * @summary 仓库设置-查询仓库推送设置
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotPushSetting(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotPushSetting200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotPushSetting(describeDepotFilePushRulesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotPushSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库规范详情
         * @summary 仓库设置-查询仓库规范详情
         * @param {DescribeDepotSpecDetailRequest} [describeDepotSpecDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotSpecDetail(describeDepotSpecDetailRequest?: DescribeDepotSpecDetailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyChooseDepotSpec200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotSpecDetail(describeDepotSpecDetailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotSpecDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库规范列表
         * @summary 仓库设置-查询仓库规范列表
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDepotSpecs(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDepotSpecs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDepotSpecs(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDepotSpecs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 两次提交之间的文件差异
         * @summary Git提交-两次提交之间的文件差异（source target顺序正常）
         * @param {DescribeDifferentBetween2CommitsRequest} [describeDifferentBetween2CommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest?: DescribeDifferentBetween2CommitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDifferentBetween2Commits200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDifferentBetween2Commits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取两次 commit 之间的文件 差异详情
         * @summary Git提交-获取两次commit之间的文件差异详情(废弃，source target顺序不一致)
         * @param {DescribeDifferentBetweenTwoCommitsRequest} [describeDifferentBetweenTwoCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest?: DescribeDifferentBetweenTwoCommitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeDifferentBetweenTwoCommits200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeDifferentBetweenTwoCommits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取指定 commit 下某文件指定代码行的最后一次提交
         * @summary Git提交-获取指定commit下某文件指定代码行的最后一次提交
         * @param {DescribeGitBlameInfoRequest} [describeGitBlameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBlameInfo(describeGitBlameInfoRequest?: DescribeGitBlameInfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBlameInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBlameInfo(describeGitBlameInfoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBlameInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 Git Blob
         * @summary Git文件-查询GitBlob
         * @param {DescribeGitBlobRequest} [describeGitBlobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBlob(describeGitBlobRequest?: DescribeGitBlobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBlob200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBlob(describeGitBlobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBlob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 Git Blob raw 信息
         * @summary Git文件-查询Git Blob raw信息
         * @param {DescribeGitBlobRawRequest} [describeGitBlobRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBlobRaw(describeGitBlobRawRequest?: DescribeGitBlobRawRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBlobRaw200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBlobRaw(describeGitBlobRawRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBlobRaw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询代码仓库单个分支
         * @summary 仓库分支-查询代码仓库单个分支
         * @param {DescribeGitBranchRequest} [describeGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBranch(describeGitBranchRequest?: DescribeGitBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBranch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBranch(describeGitBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库分支列表
         * @summary 仓库分支-查询仓库分支列表
         * @param {DescribeGitBranchListRequest} [describeGitBranchListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBranchList(describeGitBranchListRequest?: DescribeGitBranchListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBranchList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBranchList(describeGitBranchListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBranchList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库下所有分支列表
         * @summary 仓库分支-查询仓库下所有分支列表
         * @param {DescribeGitBranchesRequest} [describeGitBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBranches(describeGitBranchesRequest?: DescribeGitBranchesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBranches200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBranches(describeGitBranchesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据sha值查询所在分支
         * @summary 仓库分支-根据sha值查询所在分支
         * @param {DescribeGitBranchesByShaRequest} [describeGitBranchesByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitBranchesBySha(describeGitBranchesByShaRequest?: DescribeGitBranchesByShaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitBranchesBySha200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitBranchesBySha(describeGitBranchesByShaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitBranchesBySha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取commit评论
         * @summary Git提交-获取commit评论
         * @param {DescribeGitCommitCommentsRequest} [describeGitCommitCommentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitComments(describeGitCommitCommentsRequest?: DescribeGitCommitCommentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitComments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitComments(describeGitCommitCommentsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitComments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询某次提交的diff信息
         * @summary Git提交-查询某次提交的diff信息
         * @param {DescribeGitCommitDiffRequest} [describeGitCommitDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitDiff(describeGitCommitDiffRequest?: DescribeGitCommitDiffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitDiff200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitDiff(describeGitCommitDiffRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitDiff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库某次提交改动的文件路径列表
         * @summary Git提交-查询仓库某次提交改动的文件路径列表
         * @param {DescribeGitCommitFilePathListRequest} [describeGitCommitFilePathListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitFilePathList(describeGitCommitFilePathListRequest?: DescribeGitCommitFilePathListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitFilePathList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitFilePathList(describeGitCommitFilePathListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitFilePathList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询单个请求详情信息
         * @summary Git提交-查询单个请求详情信息
         * @param {DescribeGitCommitInfoRequest} [describeGitCommitInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitInfo(describeGitCommitInfoRequest?: DescribeGitCommitInfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitInfo(describeGitCommitInfoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitInfos(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitInfos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitInfos(describeGitCommitInfosRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitInfos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取提交注释
         * @summary Git提交-获取提交注释
         * @param {DescribeGitCommitNoteRequest} [describeGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitNote(describeGitCommitNoteRequest?: DescribeGitCommitNoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitNote200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitNote(describeGitCommitNoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询提交对应的流水线状态
         * @summary Git提交-查询提交对应的流水线状态
         * @param {DescribeGitCommitStatusRequest} [describeGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitStatus(describeGitCommitStatusRequest?: DescribeGitCommitStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitStatus(describeGitCommitStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitCommitsInPage(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitCommitsInPage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitCommitsInPage(describeGitCommitInfosRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitCommitsInPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 git 仓库的贡献者
         * @summary 仓库信息-查询git仓库的贡献者
         * @param {DescribeGitContributorsRequest} [describeGitContributorsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitContributors(describeGitContributorsRequest?: DescribeGitContributorsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitContributors200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitContributors(describeGitContributorsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitContributors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据代码仓库id获取代码仓库信息
         * @summary 仓库信息-根据代码仓库id获取代码仓库信息
         * @param {DescribeGitDepotRequest} [describeGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitDepot(describeGitDepotRequest?: DescribeGitDepotRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitDepot200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitDepot(describeGitDepotRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitDepot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询某仓库下的部署公钥列表
         * @summary 仓库设置-查询某仓库下的部署公钥列表
         * @param {DescribeGitDepotDeployKeysRequest} [describeGitDepotDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest?: DescribeGitDepotDeployKeysRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitDepotDeployKeys200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitDepotDeployKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取文件详情
         * @summary Git文件-获取文件详情
         * @param {DescribeGitFileRequest} [describeGitFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitFile(describeGitFileRequest?: DescribeGitFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitFile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitFile(describeGitFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询某次提交某文件的内容
         * @summary Git提交-查询某次提交某文件的内容
         * @param {DescribeGitFileContentRequest} [describeGitFileContentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitFileContent(describeGitFileContentRequest?: DescribeGitFileContentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitFileContent200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitFileContent(describeGitFileContentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitFileContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 检查仓库文件
         * @summary Git文件-检查仓库文件是否存在
         * @param {DescribeGitFileStatRequest} [describeGitFileStatRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitFileStat(describeGitFileStatRequest?: DescribeGitFileStatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitFileStat200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitFileStat(describeGitFileStatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitFileStat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取分支目录结构
         * @summary Git文件-查询仓库目录下文件和文件夹名字
         * @param {DescribeGitFilesRequest} [describeGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitFiles(describeGitFilesRequest?: DescribeGitFilesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitFiles(describeGitFilesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询两个分支的公共祖先
         * @summary 仓库分支-查询两个分支的公共祖先
         * @param {DescribeGitMergeBaseRequest} [describeGitMergeBaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitMergeBase(describeGitMergeBaseRequest?: DescribeGitMergeBaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitMergeBase200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitMergeBase(describeGitMergeBaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitMergeBase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求文件的 diff 详情
         * @summary 合并请求-查询合并请求文件的 diff 详情
         * @param {DescribeGitMergeRequestDiffDetailRequest} [describeGitMergeRequestDiffDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest?: DescribeGitMergeRequestDiffDetailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitMergeRequestDiffDetail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitMergeRequestDiffDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求 diff 信息的文件列表
         * @summary 合并请求-查询合并请求diff信息的文件列表
         * @param {DescribeGitMergeRequestDiffsRequest} [describeGitMergeRequestDiffsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest?: DescribeGitMergeRequestDiffsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitMergeRequestDiffs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitMergeRequestDiffs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的参与者
         * @param {DescribeGitMergeRequestParticipantsRequest} [describeGitMergeRequestParticipantsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest?: DescribeGitMergeRequestParticipantsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitMergeRequestParticipants200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitMergeRequestParticipants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询含有某次提交的合并请求
         * @summary 合并请求-查询含有某次提交的合并请求
         * @param {DescribeGitMergeRequestsByShaRequest} [describeGitMergeRequestsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest?: DescribeGitMergeRequestsByShaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitMergeRequestsBySha200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitMergeRequestsBySha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询某项目下的部署公钥列表
         * @summary 仓库设置-查询某项目下的部署公钥列表
         * @param {DescribeGitProjectDeployKeysRequest} [describeGitProjectDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest?: DescribeGitProjectDeployKeysRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitDepotDeployKeys200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitProjectDeployKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询受保护的标签列表
         * @summary 标签信息-查询受保护的标签列表
         * @param {DescribeGitProtectedTagsRequest} [describeGitProtectedTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitProtectedTags(describeGitProtectedTagsRequest?: DescribeGitProtectedTagsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitProtectedTags200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitProtectedTags(describeGitProtectedTagsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitProtectedTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据标签保护规则查询受保护的标签列表
         * @summary 标签信息-根据标签保护规则查询受保护的标签列表
         * @param {DescribeGitProtectedTagsByRuleRequest} [describeGitProtectedTagsByRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest?: DescribeGitProtectedTagsByRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitProtectedTagsByRule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitProtectedTagsByRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取分支或标签信息
         * @summary 仓库分支-获取分支或标签信息
         * @param {DescribeGitRefRequest} [describeGitRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitRef(describeGitRefRequest?: DescribeGitRefRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitRef200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitRef(describeGitRefRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitRef']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询含有某次提交的标签或分支列表
         * @summary Git提交-查询含有某次提交的标签或分支列表
         * @param {DescribeGitRefsByShaRequest} [describeGitRefsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitRefsBySha(describeGitRefsByShaRequest?: DescribeGitRefsByShaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitRefsBySha200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitRefsBySha(describeGitRefsByShaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitRefsBySha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库的版本详情
         * @summary 版本信息-查询仓库的版本详情
         * @param {DescribeGitReleaseDetailRequest} [describeGitReleaseDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitReleaseDetail(describeGitReleaseDetailRequest?: DescribeGitReleaseDetailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitReleaseDetail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitReleaseDetail(describeGitReleaseDetailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitReleaseDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询仓库的版本列表
         * @summary 版本信息-查询仓库的版本列表
         * @param {DescribeGitReleasesRequest} [describeGitReleasesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitReleases(describeGitReleasesRequest?: DescribeGitReleasesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitReleases200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitReleases(describeGitReleasesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitReleases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询单个tag
         * @summary 标签信息-查询单个tag
         * @param {DescribeGitTagRequest} [describeGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitTag(describeGitTagRequest?: DescribeGitTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitTag200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitTag(describeGitTagRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询当前仓库下所有tags
         * @summary 标签信息-查询当前仓库下所有tags
         * @param {DescribeGitTagsRequest} [describeGitTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitTags(describeGitTagsRequest?: DescribeGitTagsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitTags200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitTags(describeGitTagsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 根据分支获取标签列表
         * @summary 标签信息-根据分支获取标签列表
         * @param {DescribeGitTagsByBranchRequest} [describeGitTagsByBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitTagsByBranch(describeGitTagsByBranchRequest?: DescribeGitTagsByBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitTagsByBranch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitTagsByBranch(describeGitTagsByBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitTagsByBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询含有某次提交的标签列表
         * @summary 标签信息-查询含有某次提交的标签列表
         * @param {DescribeGitTagsByShaRequest} [describeGitTagsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitTagsBySha(describeGitTagsByShaRequest?: DescribeGitTagsByShaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitTagsBySha200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitTagsBySha(describeGitTagsByShaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitTagsBySha']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 git 仓库的树
         * @summary 仓库信息-查询git仓库的树
         * @param {DescribeGitTreeRequest} [describeGitTreeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGitTree(describeGitTreeRequest?: DescribeGitTreeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGitTree200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGitTree(describeGitTreeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGitTree']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 授权对象列表分页查询
         * @summary 授权对象列表分页查询
         * @param {DescribeGrantObjectsOnResourceRequest} [describeGrantObjectsOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest?: DescribeGrantObjectsOnResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGrantObjectsOnResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGrantObjectsOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询指定资源下授权的用户列表，包括容器内的用户
         * @summary 授权用户列表分页查询
         * @param {DescribeGrantUsersOnResourceRequest} [describeGrantUsersOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeGrantUsersOnResource(describeGrantUsersOnResourceRequest?: DescribeGrantUsersOnResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeGrantUsersOnResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeGrantUsersOnResource(describeGrantUsersOnResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeGrantUsersOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组部署详情获取
         * @summary CD 主机组部署详情获取
         * @param {DescribeHostServerInstanceRequest} [describeHostServerInstanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeHostServerInstance(describeHostServerInstanceRequest?: DescribeHostServerInstanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeHostServerInstance200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeHostServerInstance(describeHostServerInstanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeHostServerInstance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项详情
         * @summary 事项详情查询
         * @param {DescribeIssueRequest} [describeIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssue(describeIssueRequest?: DescribeIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssue200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssue(describeIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 拿到预签名，上传文件
         * @summary 预签名信息获取
         * @param {DescribeIssueAttachmentPreSignedUrlRequest} [describeIssueAttachmentPreSignedUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest?: DescribeIssueAttachmentPreSignedUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueAttachmentPreSignedUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueAttachmentPreSignedUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过状态以及状态的更新时间查询事项列表
         * @summary 通过状态以及状态的更新时间查询事项列表
         * @param {DescribeIssueByStatusUpdateRequest} [describeIssueByStatusUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest?: DescribeIssueByStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueByStatusUpdate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueByStatusUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项评论列表
         * @summary 事项评论列表查询
         * @param {DescribeIssueCommentListRequest} [describeIssueCommentListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueCommentList(describeIssueCommentListRequest?: DescribeIssueCommentListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueCommentList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueCommentList(describeIssueCommentListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueCommentList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取某个事项的自定义属性变更日志
         * @summary 事项的自定义属性变更日志查询
         * @param {DescribeIssueCustomFieldLogListRequest} [describeIssueCustomFieldLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest?: DescribeIssueCustomFieldLogListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueCustomFieldLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueCustomFieldLogList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项附件的下载地址
         * @summary 事项附件的下载地址查询
         * @param {DescribeIssueFileUrlRequest} [describeIssueFileUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueFileUrl(describeIssueFileUrlRequest?: DescribeIssueFileUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueFileUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueFileUrl(describeIssueFileUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueFileUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项筛选器列表
         * @summary 事项筛选器列表查询
         * @param {DescribeIssueFilterListRequest} [describeIssueFilterListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueFilterList(describeIssueFilterListRequest?: DescribeIssueFilterListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueFilterList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueFilterList(describeIssueFilterListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueFilterList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项列表
         * @summary 事项列表查询
         * @param {DescribeIssueListRequest} [describeIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueList(describeIssueListRequest?: DescribeIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueList(describeIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 事项列表（新），返回分页信息
         * @summary 事项查询,返回分页信息
         * @param {DescribeIssueListWithPageRequest} [describeIssueListWithPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueListWithPage(describeIssueListWithPageRequest?: DescribeIssueListWithPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueListWithPage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueListWithPage(describeIssueListWithPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueListWithPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取某个事项的活动日志
         * @summary 事项活动日志查询
         * @param {DescribeIssueLogListRequest} [describeIssueLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueLogList(describeIssueLogListRequest?: DescribeIssueLogListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueLogList(describeIssueLogListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueLogList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项模块列表
         * @summary 事项模块列表查询
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueModuleList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueModuleList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueModuleList(describeWikiListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueModuleList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项的引用资源列表
         * @summary 事项的引用资源列表查询
         * @param {DescribeIssueReferenceResourcesRequest} [describeIssueReferenceResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueReferenceResources(describeIssueReferenceResourcesRequest?: DescribeIssueReferenceResourcesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueReferenceResources200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueReferenceResources(describeIssueReferenceResourcesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueReferenceResources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项关联的代码仓库信息
         * @summary 事项关联的代码仓库信息查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueRelatedRepos(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueRelatedRepos200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueRelatedRepos(describeIssueRelatedReposRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueRelatedRepos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询事项关联的项目集中的工作项
         * @summary 事项关联的项目集中的工作项查询
         * @param {DescribeIssueRelatedWorkItemListRequest} [describeIssueRelatedWorkItemListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest?: DescribeIssueRelatedWorkItemListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueRelatedWorkItemList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueRelatedWorkItemList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取某个事项加入的所有版本
         * @summary 事项加入的版本查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueReleaseList(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueReleaseList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueReleaseList(describeIssueRelatedReposRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueReleaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 状态变更记录
         * @summary 事项的状态变更记录查询
         * @param {DescribeIssueStatusChangeLogListRequest} [describeIssueStatusChangeLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest?: DescribeIssueStatusChangeLogListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueStatusChangeLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueStatusChangeLogList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询工时日志列表
         * @summary 事项的工时日志查询
         * @param {DescribeIssueWorkLogListRequest} [describeIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIssueWorkLogList(describeIssueWorkLogListRequest?: DescribeIssueWorkLogListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIssueWorkLogList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIssueWorkLogList(describeIssueWorkLogListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIssueWorkLogList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询迭代详情
         * @summary 迭代详情查询
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIteration200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIteration(deleteIterationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIteration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 迭代列表
         * @summary 迭代列表获取
         * @param {DescribeIterationListRequest} [describeIterationListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeIterationList(describeIterationListRequest?: DescribeIterationListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeIterationList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeIterationList(describeIterationListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeIterationList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取团队成员的 SSH 公钥列表
         * @summary 仓库设置-获取团队成员的SSH公钥列表
         * @param {DescribeMemberSshKeyRequest} [describeMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMemberSshKey(describeMemberSshKeyRequest?: DescribeMemberSshKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMemberSshKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMemberSshKey(describeMemberSshKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMemberSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求列表
         * @summary 合并请求-查询合并请求列表
         * @param {DescribeMergeReqCommitsRequest} [describeMergeReqCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeReqCommits(describeMergeReqCommitsRequest?: DescribeMergeReqCommitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeReqCommits200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeReqCommits(describeMergeReqCommitsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeReqCommits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求详情
         * @summary 合并请求-查询合并请求详情
         * @param {DescribeMergeReqInfoRequest} [describeMergeReqInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeReqInfo(describeMergeReqInfoRequest?: DescribeMergeReqInfoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeReqInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeReqInfo(describeMergeReqInfoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeReqInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求详情信息
         * @summary 合并请求-查询合并请求详情信息
         * @param {DescribeMergeRequestRequest} [describeMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeRequest(describeMergeRequestRequest?: DescribeMergeRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeRequest(describeMergeRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取合并请求文件修改记录
         * @summary 合并请求-获取合并请求文件修改记录
         * @param {DescribeMergeRequestFileDiffRequest} [describeMergeRequestFileDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest?: DescribeMergeRequestFileDiffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeRequestFileDiff200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeRequestFileDiff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询合并请求操作记录
         * @summary 合并请求-查询合并请求操作记录
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeRequestLog(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeRequestLog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeRequestLog(modifyCloseMRRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeRequestLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的评审者
         * @param {DescribeMergeRequestReviewersRequest} [describeMergeRequestReviewersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMergeRequestReviewers(describeMergeRequestReviewersRequest?: DescribeMergeRequestReviewersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMergeRequestReviewers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMergeRequestReviewers(describeMergeRequestReviewersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMergeRequestReviewers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取当前用户拥有读权限的仓库列表
         * @summary 仓库信息-获取当前用户拥有读权限的仓库列表
         * @param {DescribeMyDepotsRequest} [describeMyDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeMyDepots(describeMyDepotsRequest?: DescribeMyDepotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeMyDepots200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeMyDepots(describeMyDepotsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeMyDepots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取提交的note信息
         * @summary 仓库信息-获取提交的note信息
         * @param {DescribeNotesByCommitsRequest} [describeNotesByCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeNotesByCommits(describeNotesByCommitsRequest?: DescribeNotesByCommitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeNotesByCommits200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeNotesByCommits(describeNotesByCommitsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeNotesByCommits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 单个项目查询
         * @summary 单个项目查询
         * @param {DescribeOneProjectRequest} [describeOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeOneProject(describeOneProjectRequest?: DescribeOneProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeOneProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeOneProject(describeOneProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeOneProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取个人外部仓库
         * @summary 个人外部仓库获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePersonalExternalDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePersonalExternalDepots200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePersonalExternalDepots(describePersonalExternalDepotsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePersonalExternalDepots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 汉字转拼音
         * @summary 汉字转拼音
         * @param {DescribePinyinRequest} [describePinyinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePinyin(describePinyinRequest?: DescribePinyinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePinyin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePinyin(describePinyinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePinyin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组列表查询（指定资源类型）
         * @summary 权限组列表查询（指定资源类型）
         * @param {DescribePoliciesOnResourceTypeRequest} [describePoliciesOnResourceTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest?: DescribePoliciesOnResourceTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePoliciesOnResourceType200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePoliciesOnResourceType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组详情获取
         * @summary 权限组详情获取
         * @param {DescribePolicyRequest} [describePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePolicy(describePolicyRequest?: DescribePolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePolicy(describePolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 预签名信息获取，上传文件
         * @summary 预签名URL获取
         * @param {DescribePreSignUploadUrlRequest} [describePreSignUploadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePreSignUploadUrl(describePreSignUploadUrlRequest?: DescribePreSignUploadUrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePreSignUploadUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePreSignUploadUrl(describePreSignUploadUrlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePreSignUploadUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 资源权限判定模式获取
         * @summary 资源权限判定模式获取
         * @param {DescribePredicatePolicyOnResourceRequest} [describePredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest?: DescribePredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePredicatePolicyOnResource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePredicatePolicyOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集下项目列表查询
         * @summary 项目集下项目列表查询
         * @param {DescribeProgramProjectsRequest} [describeProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProgramProjects(describeProgramProjectsRequest?: DescribeProgramProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProgramProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProgramProjects(describeProgramProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProgramProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集列表查询
         * @summary 项目集列表查询
         * @param {DescribeProgramsRequest} [describeProgramsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describePrograms(describeProgramsRequest?: DescribeProgramsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribePrograms200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describePrograms(describeProgramsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describePrograms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目公告查询
         * @summary 项目公告查询
         * @param {DescribeProjectAnnouncementRequest} [describeProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectAnnouncement(describeProjectAnnouncementRequest?: DescribeProjectAnnouncementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectAnnouncement200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectAnnouncement(describeProjectAnnouncementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目公告列表查询
         * @summary 项目公告列表查询
         * @param {DescribeProjectAnnouncementsRequest} [describeProjectAnnouncementsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectAnnouncements(describeProjectAnnouncementsRequest?: DescribeProjectAnnouncementsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectAnnouncements200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectAnnouncements(describeProjectAnnouncementsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectAnnouncements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目查询(通过项目名称)
         * @summary 项目查询(通过项目名称)
         * @param {DescribeProjectByNameRequest} [describeProjectByNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectByName(describeProjectByNameRequest?: DescribeProjectByNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeOneProject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectByName(describeProjectByNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目凭据列表查询
         * @summary 项目凭据列表查询
         * @param {DescribeProjectCredentialsRequest} [describeProjectCredentialsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectCredentials(describeProjectCredentialsRequest?: DescribeProjectCredentialsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectCredentials200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectCredentials(describeProjectCredentialsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectCredentials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取仓库分支列表
         * @summary 仓库分支列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectDepotBranches(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectDepotBranches200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectDepotBranches(describeProjectDepotBranchesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectDepotBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取分支下的提交列表
         * @summary 分支下的提交列表获取
         * @param {DescribeProjectDepotCommitsRequest} [describeProjectDepotCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectDepotCommits(describeProjectDepotCommitsRequest?: DescribeProjectDepotCommitsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectDepotBranches200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectDepotCommits(describeProjectDepotCommitsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectDepotCommits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeProjectDepotInfoListRequest} [describeProjectDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectDepotInfoList(describeProjectDepotInfoListRequest?: DescribeProjectDepotInfoListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectDepotInfoList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectDepotInfoList(describeProjectDepotInfoListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectDepotInfoList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取仓库的标签列表
         * @summary 仓库的标签列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectDepotTags(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectDepotBranches200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectDepotTags(describeProjectDepotBranchesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectDepotTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取项目仓库列表
         * @summary 项目仓库列表获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectDepots200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectDepots(describePersonalExternalDepotsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectDepots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询具体事项类型的属性列表
         * @summary 具体事项类型的属性列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectIssueFieldList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectIssueFieldList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectIssueFieldList(describeProjectIssueFieldListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectIssueFieldList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询具体事项类型的状态列表
         * @summary 具体事项类型的状态列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectIssueStatusList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectIssueStatusList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectIssueStatusList(describeProjectIssueFieldListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectIssueStatusList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询项目事项类型列表
         * @summary 项目事项类型列表查询
         * @param {DescribeProjectIssueTypeListRequest} [describeProjectIssueTypeListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectIssueTypeList(describeProjectIssueTypeListRequest?: DescribeProjectIssueTypeListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectIssueTypeList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectIssueTypeList(describeProjectIssueTypeListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectIssueTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目列表查询-指定项目标签
         * @summary 项目列表查询-指定项目标签
         * @param {DescribeProjectLabelsRequest} [describeProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectLabels(describeProjectLabelsRequest?: DescribeProjectLabelsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectLabels200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectLabels(describeProjectLabelsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectLabels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目成员主体查询(包含用户组、部门、成员)
         * @summary 项目成员主体查询(包含用户组、部门、成员)
         * @param {DescribeProjectMemberPrincipalsRequest} [describeProjectMemberPrincipalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest?: DescribeProjectMemberPrincipalsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectMemberPrincipals200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectMemberPrincipals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目成员列表查询
         * @summary 项目成员列表查询
         * @param {DescribeProjectMembersRequest} [describeProjectMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectMembers(describeProjectMembersRequest?: DescribeProjectMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectMembers(describeProjectMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取项目下的合并请求列表
         * @summary 合并请求-获取项目下的合并请求列表
         * @param {DescribeProjectMergeRequestsRequest} [describeProjectMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectMergeRequests(describeProjectMergeRequestsRequest?: DescribeProjectMergeRequestsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeSelfMergeRequests200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectMergeRequests(describeProjectMergeRequestsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectMergeRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目用户组查询
         * @summary 项目用户组查询
         * @param {DescribeProjectRolesRequest} [describeProjectRolesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectRoles(describeProjectRolesRequest?: DescribeProjectRolesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectRoles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectRoles(describeProjectRolesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目查询（通过一级菜单名查询开启某个模块的项目）
         * @summary 项目查询（通过一级菜单名）
         * @param {DescribeProjectsByFeatureRequest} [describeProjectsByFeatureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProjectsByFeature(describeProjectsByFeatureRequest?: DescribeProjectsByFeatureRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectsByFeature200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProjectsByFeature(describeProjectsByFeatureRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProjectsByFeature']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询保护分支详情
         * @summary 仓库设置-查询保护分支详情
         * @param {DescribeProtectedBranchRequest} [describeProtectedBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProtectedBranch(describeProtectedBranchRequest?: DescribeProtectedBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProtectedBranch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProtectedBranch(describeProtectedBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProtectedBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询保护分支成员
         * @summary 仓库设置-查询保护分支成员
         * @param {DescribeProtectedBranchMembersRequest} [describeProtectedBranchMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProtectedBranchMembers(describeProtectedBranchMembersRequest?: DescribeProtectedBranchMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProtectedBranchMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProtectedBranchMembers(describeProtectedBranchMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProtectedBranchMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询保护分支
         * @summary 仓库设置-查询保护分支列表
         * @param {DescribeProtectedBranchesRequest} [describeProtectedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeProtectedBranches(describeProtectedBranchesRequest?: DescribeProtectedBranchesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProtectedBranches200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeProtectedBranches(describeProtectedBranchesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeProtectedBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 管理测试用例
         * @summary 事项关联的测试用例查询
         * @param {DescribeRelatedCaseListRequest} [describeRelatedCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeRelatedCaseList(describeRelatedCaseListRequest?: DescribeRelatedCaseListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeRelatedCaseList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeRelatedCaseList(describeRelatedCaseListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeRelatedCaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 版本详情
         * @summary 版本详情查询
         * @param {DescribeReleaseRequest} [describeReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeRelease(describeReleaseRequest?: DescribeReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyRelease200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeRelease(describeReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 版本发布范围
         * @summary 版本发布范围查询
         * @param {DescribeReleaseIssueListRequest} [describeReleaseIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeReleaseIssueList(describeReleaseIssueListRequest?: DescribeReleaseIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeReleaseIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeReleaseIssueList(describeReleaseIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeReleaseIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询项目内版本列表
         * @summary 版本列表查询
         * @param {DescribeReleaseListRequest} [describeReleaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeReleaseList(describeReleaseListRequest?: DescribeReleaseListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeReleaseList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeReleaseList(describeReleaseListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeReleaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试报告详情
         * @summary 测试报告详情
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeReport(deleteReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试报告列表
         * @summary 测试报告列表
         * @param {DescribeReportListRequest} [describeReportListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeReportList(describeReportListRequest?: DescribeReportListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeReportList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeReportList(describeReportListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeReportList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询需求关联缺陷列表
         * @summary 需求关联缺陷列表查询
         * @param {DescribeRequirementDefectRelationRequest} [describeRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeRequirementDefectRelation(describeRequirementDefectRelationRequest?: DescribeRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeRequirementDefectRelation200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeRequirementDefectRelation(describeRequirementDefectRelationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeRequirementDefectRelation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 需求关联的测试用例列表
         * @summary 需求关联的测试用例列表
         * @param {DescribeRequirementTestCaseListRequest} [describeRequirementTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeRequirementTestCaseList(describeRequirementTestCaseListRequest?: DescribeRequirementTestCaseListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeRequirementTestCaseList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeRequirementTestCaseList(describeRequirementTestCaseListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeRequirementTestCaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 被引用资源列表查询
         * @summary 被引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeResourceReferencesCited(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeResourceReferencesCited200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeResourceReferencesCited(describeResourceReferencesCitingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeResourceReferencesCited']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 引用资源列表查询
         * @summary 引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeResourceReferencesCiting(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeResourceReferencesCiting200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeResourceReferencesCiting(describeResourceReferencesCitingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeResourceReferencesCiting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组可用资源范围分页查询
         * @summary 权限组可用资源范围分页查询
         * @param {DescribeResourceScopeListOnPolicyRequest} [describeResourceScopeListOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest?: DescribeResourceScopeListOnPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeResourceScopeListOnPolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeResourceScopeListOnPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取自己的合并请求列表
         * @summary 合并请求-获取自己的合并请求列表
         * @param {DescribeSelfMergeRequestsRequest} [describeSelfMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeSelfMergeRequests(describeSelfMergeRequestsRequest?: DescribeSelfMergeRequestsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeSelfMergeRequests200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeSelfMergeRequests(describeSelfMergeRequestsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeSelfMergeRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取单个合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取单个合并请求行评论和改动文件diff行评论
         * @param {DescribeSingeMergeRequestNotesRequest} [describeSingeMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest?: DescribeSingeMergeRequestNotesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeSingeMergeRequestNotes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeSingeMergeRequestNotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取当前用户所有SSH公钥
         * @summary 仓库设置-获取当前用户所有SSH公钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeSshKey(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeSshKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeSshKey(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeSshKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询子事项列表
         * @summary 子事项列表查询
         * @param {DescribeSubIssueListRequest} [describeSubIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeSubIssueList(describeSubIssueListRequest?: DescribeSubIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeSubIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeSubIssueList(describeSubIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeSubIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 团队信息查询
         * @summary 团队信息查询
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeam(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeam200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeam(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询团队管理员
         * @summary 团队管理员查询
         * @param {DescribeTeamAdminMembersRequest} [describeTeamAdminMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamAdminMembers(describeTeamAdminMembersRequest?: DescribeTeamAdminMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamAdminMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamAdminMembers(describeTeamAdminMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamAdminMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品列表查询
         * @summary 制品列表查询
         * @param {DescribeTeamArtifactsRequest} [describeTeamArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamArtifacts(describeTeamArtifactsRequest?: DescribeTeamArtifactsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamArtifacts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamArtifacts(describeTeamArtifactsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamArtifacts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @summary 仓库信息-获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @param {DescribeTeamDepotInfoListRequest} [describeTeamDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamDepotInfoList(describeTeamDepotInfoListRequest?: DescribeTeamDepotInfoListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamDepotInfoList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamDepotInfoList(describeTeamDepotInfoListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamDepotInfoList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询企业事项类型列表
         * @summary 企业事项类型列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamIssueTypeList(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamIssueTypeList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamIssueTypeList(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamIssueTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询团队事项列表
         * @summary 查询团队事项列表
         * @param {DescribeTeamIssuesRequest} [describeTeamIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamIssues(describeTeamIssuesRequest?: DescribeTeamIssuesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamIssues200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamIssues(describeTeamIssuesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamIssues']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过用户 ID 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 ID）
         * @param {DescribeTeamMemberRequest} [describeTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamMember(describeTeamMemberRequest?: DescribeTeamMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamMember200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamMember(describeTeamMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过用户 Email 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 Email）
         * @param {DescribeTeamMemberByEmailRequest} [describeTeamMemberByEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamMemberByEmail(describeTeamMemberByEmailRequest?: DescribeTeamMemberByEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamMemberByEmail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamMemberByEmail(describeTeamMemberByEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamMemberByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 团队成员列表查询
         * @summary 团队成员列表查询
         * @param {DescribeTeamMembersRequest} [describeTeamMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTeamMembers(describeTeamMembersRequest?: DescribeTeamMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTeamMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTeamMembers(describeTeamMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTeamMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务详情
         * @summary 测试任务详情
         * @param {DescribeTestRequest} [describeTestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTest(describeTestRequest?: DescribeTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTest(describeTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例详情
         * @summary 测试用例详情
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestCase200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestCase(deleteTestCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例分页数据
         * @summary 测试用例列表
         * @param {DescribeTestCaseListRequest} [describeTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestCaseList(describeTestCaseListRequest?: DescribeTestCaseListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestCaseList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestCaseList(describeTestCaseListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestCaseList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例分组列表
         * @summary 测试用例分组列表
         * @param {DescribeTestCaseSectionListRequest} [describeTestCaseSectionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestCaseSectionList(describeTestCaseSectionListRequest?: DescribeTestCaseSectionListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestCaseSectionList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestCaseSectionList(describeTestCaseSectionListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestCaseSectionList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务关联的缺陷列表
         * @summary 测试任务关联的缺陷列表
         * @param {DescribeTestDefectListRequest} [describeTestDefectListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestDefectList(describeTestDefectListRequest?: DescribeTestDefectListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestDefectList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestDefectList(describeTestDefectListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestDefectList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试任务列表
         * @summary 测试任务列表
         * @param {DescribeTestListRequest} [describeTestListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestList(describeTestListRequest?: DescribeTestListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestList(describeTestListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试计划详情
         * @summary 测试计划详情
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestRun200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestRun(deleteTestRunRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试计划列表
         * @summary 测试计划列表
         * @param {DescribeTestRunListRequest} [describeTestRunListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeTestRunList(describeTestRunListRequest?: DescribeTestRunListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeTestRunList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeTestRunList(describeTestRunListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeTestRunList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组列表分页查询
         * @summary 用户组列表分页查询
         * @param {DescribeUserGroupsRequest} [describeUserGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUserGroups(describeUserGroupsRequest?: DescribeUserGroupsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeUserGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUserGroups(describeUserGroupsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeUserGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询团队成员待交接事项列表
         * @summary 查询团队成员待交接事项列表
         * @param {DescribeUserHandoverIssuesRequest} [describeUserHandoverIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUserHandoverIssues(describeUserHandoverIssuesRequest?: DescribeUserHandoverIssuesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeUserHandoverIssues200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUserHandoverIssues(describeUserHandoverIssuesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeUserHandoverIssues']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目列表查询（已加入的项目）
         * @summary 项目列表查询（已加入的项目）
         * @param {DescribeUserProjectsRequest} [describeUserProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUserProjects(describeUserProjectsRequest?: DescribeUserProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeProjectLabels200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUserProjects(describeUserProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeUserProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户列表查询（根据用户组id分页查询）
         * @summary 用户列表查询（根据用户组id分页查询）
         * @param {DescribeUsersByGroupIdRequest} [describeUsersByGroupIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUsersByGroupId(describeUsersByGroupIdRequest?: DescribeUsersByGroupIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeUsersByGroupId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUsersByGroupId(describeUsersByGroupIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeUsersByGroupId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 授权用户列表分页查询（指定资源）
         * @summary 授权用户列表分页查询（指定资源）
         * @param {DescribeUsersOnResourceAndGrantObjectRequest} [describeUsersOnResourceAndGrantObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest?: DescribeUsersOnResourceAndGrantObjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeUsersOnResourceAndGrantObject200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeUsersOnResourceAndGrantObject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 事项分解信息
         * @summary 事项分解信息查询
         * @param {DescribeWorkItemSalvageRequest} [describeWorkItemSalvageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeWorkItemSalvage(describeWorkItemSalvageRequest?: DescribeWorkItemSalvageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeWorkItemSalvage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeWorkItemSalvage(describeWorkItemSalvageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeWorkItemSalvage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取一个用户在团队内的所有代办事项（即前端页面上个人工作台中的事项列表）
         * @summary 用户在团队内的所有代办事项查询
         * @param {DescribeWorkbenchIssueListRequest} [describeWorkbenchIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeWorkbenchIssueList(describeWorkbenchIssueListRequest?: DescribeWorkbenchIssueListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeWorkbenchIssueList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeWorkbenchIssueList(describeWorkbenchIssueListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.describeWorkbenchIssueList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @summary 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detachFromResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detachFromResource(detachFromResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.detachFromResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @summary 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @param {DetachResourceScopeOnPolicyRequest} [detachResourceScopeOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest?: DetachResourceScopeOnPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.detachResourceScopeOnPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品版本下载 禁止、解禁
         * @summary 制品版本下载 禁止、解禁
         * @param {ForbiddenArtifactVersionRequest} [forbiddenArtifactVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forbiddenArtifactVersion(forbiddenArtifactVersionRequest?: ForbiddenArtifactVersionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forbiddenArtifactVersion(forbiddenArtifactVersionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.forbiddenArtifactVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 初始化项目配置方案
         * @summary 项目配置方案初始化
         * @param {InitProjectTemplateRequest} [initProjectTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initProjectTemplate(initProjectTemplateRequest?: InitProjectTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initProjectTemplate(initProjectTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.initProjectTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 制品授信清单修改
         * @summary 制品授信清单修改
         * @param {ModifyArtifactCreditRequest} [modifyArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyArtifactCredit(modifyArtifactCreditRequest?: ModifyArtifactCreditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyArtifactCredit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyArtifactCredit(modifyArtifactCreditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyArtifactCredit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 指定版本制品的制品属性修改
         * @summary 制品属性修改
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyArtifactProperties(modifyArtifactPropertiesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyArtifactProperties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改保护分支规则相关信息
         * @summary 仓库设置-修改保护分支规则相关信息
         * @param {ModifyBranchProtectionRequest} [modifyBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyBranchProtection(modifyBranchProtectionRequest?: ModifyBranchProtectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyBranchProtection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyBranchProtection(modifyBranchProtectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyBranchProtection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 更改保护分支管理员权限
         * @summary 仓库设置-更改保护分支管理员权限
         * @param {ModifyBranchProtectionMemberPermissionRequest} [modifyBranchProtectionMemberPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest?: ModifyBranchProtectionMemberPermissionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyBranchProtectionMemberPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 云账号更新
         * @summary CD 云账号更新
         * @param {ModifyCdCloudAccountRequest} [modifyCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCdCloudAccount(modifyCdCloudAccountRequest?: ModifyCdCloudAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyCdCloudAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCdCloudAccount(modifyCdCloudAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCdCloudAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 主机组修改
         * @summary CD 主机组修改
         * @param {ModifyCdHostServerGroupRequest} [modifyCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCdHostServerGroup(modifyCdHostServerGroupRequest?: ModifyCdHostServerGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCdHostServerGroup(modifyCdHostServerGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCdHostServerGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ CD 部署流程修改
         * @summary CD 部署流程修改
         * @param {ModifyCdPipelineRequest} [modifyCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCdPipeline(modifyCdPipelineRequest?: ModifyCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyCdPipeline200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCdPipeline(modifyCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 使用、取消使用仓库规范
         * @summary 仓库设置-使用、取消使用仓库规范
         * @param {ModifyChooseDepotSpecRequest} [modifyChooseDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyChooseDepotSpec(modifyChooseDepotSpecRequest?: ModifyChooseDepotSpecRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyChooseDepotSpec200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyChooseDepotSpec(modifyChooseDepotSpecRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyChooseDepotSpec']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 关闭合并请求
         * @summary 合并请求-关闭合并请求
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCloseMR(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCloseMR(modifyCloseMRRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCloseMR']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 自定义构建节点启用、禁用
         * @summary 自定义构建节点启用、禁用
         * @param {ModifyCodingCIAgentEnableRequest} [modifyCodingCIAgentEnableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest?: ModifyCodingCIAgentEnableRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCodingCIAgentEnable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建计划修改
         * @summary 构建计划修改
         * @param {ModifyCodingCIJobRequest} [modifyCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCodingCIJob(modifyCodingCIJobRequest?: ModifyCodingCIJobRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCodingCIJob(modifyCodingCIJobRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyCodingCIJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库默认分支
         * @summary 仓库设置-修改仓库默认分支
         * @param {ModifyDefaultBranchRequest} [modifyDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDefaultBranch(modifyDefaultBranchRequest?: ModifyDefaultBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDefaultBranch(modifyDefaultBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDefaultBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改缺陷所属的需求
         * @summary 缺陷所属的需求修改
         * @param {ModifyDefectRelatedRequirementRequest} [modifyDefectRelatedRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest?: ModifyDefectRelatedRequirementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDefectRelatedRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改部门信息(部门名，移动位置)
         * @summary 部门信息修改
         * @param {ModifyDepartmentRequest} [modifyDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepartment(modifyDepartmentRequest?: ModifyDepartmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepartment(modifyDepartmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部门负责人管理
         * @summary 部门负责人管理
         * @param {ModifyDepartmentAssigneeRequest} [modifyDepartmentAssigneeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepartmentAssignee(modifyDepartmentAssigneeRequest?: ModifyDepartmentAssigneeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepartmentAssignee(modifyDepartmentAssigneeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepartmentAssignee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部门成员管理
         * @summary 部门成员管理
         * @param {ModifyDepartmentMemberRequest} [modifyDepartmentMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepartmentMember(modifyDepartmentMemberRequest?: ModifyDepartmentMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepartmentMember(modifyDepartmentMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepartmentMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库描述
         * @summary 仓库信息-修改仓库描述
         * @param {ModifyDepotDescriptionRequest} [modifyDepotDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotDescription(modifyDepotDescriptionRequest?: ModifyDepotDescriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotDescription(modifyDepotDescriptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotDescription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改 git 仓库文件推送规则
         * @summary 仓库设置-修改git仓库文件推送规则
         * @param {ModifyDepotFilePushRuleRequest} [modifyDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotFilePushRule(modifyDepotFilePushRuleRequest?: ModifyDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepotFilePushRule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotFilePushRule(modifyDepotFilePushRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotFilePushRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改 git 仓库特权者文件推送权限
         * @summary 仓库设置-修改 git 仓库特权者文件推送权限
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepotFilePushRuleDenyPrivilege200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotFilePushRuleDenyPrivilege']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改、新增仓库级别的仓库规范
         * @summary 仓库设置-修改、新增仓库级别的仓库规范
         * @param {ModifyDepotLevelDepotSpecRequest} [modifyDepotLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest?: ModifyDepotLevelDepotSpecRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepotLevelDepotSpec200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotLevelDepotSpec']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库名称
         * @summary 仓库信息-修改仓库名称
         * @param {ModifyDepotNameRequest} [modifyDepotNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotName(modifyDepotNameRequest?: ModifyDepotNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepotName200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotName(modifyDepotNameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库推送设置
         * @summary 仓库设置-修改仓库推送设置
         * @param {ModifyDepotPushSettingRequest} [modifyDepotPushSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotPushSetting(modifyDepotPushSettingRequest?: ModifyDepotPushSettingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyDepotPushSetting200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotPushSetting(modifyDepotPushSettingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotPushSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库容量
         * @summary 仓库信息-修改仓库容量
         * @param {ModifyDepotQuotaRequest} [modifyDepotQuotaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotQuota(modifyDepotQuotaRequest?: ModifyDepotQuotaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotQuota(modifyDepotQuotaRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotQuota']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库设置
         * @summary 仓库设置-修改仓库设置
         * @param {ModifyDepotSettingsRequest} [modifyDepotSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotSettings(modifyDepotSettingsRequest?: ModifyDepotSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotSettings(modifyDepotSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库是否开源设置
         * @summary 仓库设置-修改仓库是否开源设置
         * @param {ModifyDepotSharedSettingRequest} [modifyDepotSharedSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyDepotSharedSetting(modifyDepotSharedSettingRequest?: ModifyDepotSharedSettingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyDepotSharedSetting(modifyDepotSharedSettingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyDepotSharedSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 将某次提交cherry-pick到指定分支
         * @summary Git提交-将某次提交cherry-pick到指定分支
         * @param {ModifyGitCherryPickRequest} [modifyGitCherryPickRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitCherryPick(modifyGitCherryPickRequest?: ModifyGitCherryPickRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitCherryPick(modifyGitCherryPickRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitCherryPick']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 还原某次提交
         * @summary Git提交-还原某次提交
         * @param {ModifyGitCommitRevertRequest} [modifyGitCommitRevertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitCommitRevert(modifyGitCommitRevertRequest?: ModifyGitCommitRevertRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitCommitRevert(modifyGitCommitRevertRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitCommitRevert']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改提交对应的流水线状态
         * @summary Git提交-修改提交对应的流水线状态
         * @param {ModifyGitCommitStatusRequest} [modifyGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitCommitStatus(modifyGitCommitStatusRequest?: ModifyGitCommitStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitCommitStatus(modifyGitCommitStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitCommitStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 仓库归档
         * @summary 仓库设置-仓库归档
         * @param {ModifyGitDepotArchiveRequest} [modifyGitDepotArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitDepotArchive(modifyGitDepotArchiveRequest?: ModifyGitDepotArchiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitDepotArchive(modifyGitDepotArchiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitDepotArchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 仓库解除归档
         * @summary 仓库设置-仓库解除归档
         * @param {ModifyGitDepotUnarchiveRequest} [modifyGitDepotUnarchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest?: ModifyGitDepotUnarchiveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitDepotUnarchive']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库某文件
         * @summary Git提交-修改仓库某文件
         * @param {ModifyGitFilesRequest} [modifyGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitFiles(modifyGitFilesRequest?: ModifyGitFilesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyGitFiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitFiles(modifyGitFilesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 将源分支的改动合并到目标分支
         * @summary 合并请求-将源分支的改动合并到目标分支
         * @param {ModifyGitMergeBranchRequest} [modifyGitMergeBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitMergeBranch(modifyGitMergeBranchRequest?: ModifyGitMergeBranchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyGitMergeBranch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitMergeBranch(modifyGitMergeBranchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitMergeBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改合并请求的标题和描述信息
         * @summary 合并请求-修改合并请求的标题和描述信息
         * @param {ModifyGitMergeRequestRequest} [modifyGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitMergeRequest(modifyGitMergeRequestRequest?: ModifyGitMergeRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyGitMergeRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitMergeRequest(modifyGitMergeRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitMergeRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 合并请求中的源分支进行rebase操作
         * @summary 合并请求-合并请求中的源分支进行rebase操作
         * @param {ModifyGitMergeRequestRebaseRequest} [modifyGitMergeRequestRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest?: ModifyGitMergeRequestRebaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitMergeRequestRebase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ git变基操作
         * @summary 仓库信息-git变基操作
         * @param {ModifyGitRebaseRequest} [modifyGitRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitRebase(modifyGitRebaseRequest?: ModifyGitRebaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitRebase(modifyGitRebaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitRebase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改仓库版本信息
         * @summary 版本信息-修改仓库版本信息
         * @param {ModifyGitReleaseRequest} [modifyGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitRelease(modifyGitReleaseRequest?: ModifyGitReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitRelease(modifyGitReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 仓库转移至同团队下的其他项目中
         * @summary 仓库信息-仓库转移至同团队下的其他项目中
         * @param {ModifyGitTransferRequest} [modifyGitTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyGitTransfer(modifyGitTransferRequest?: ModifyGitTransferRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyGitTransfer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyGitTransfer(modifyGitTransferRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyGitTransfer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改事项
         * @summary 事项修改
         * @param {ModifyIssueRequest} [modifyIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIssue(modifyIssueRequest?: ModifyIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyIssue200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIssue(modifyIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改事项评论
         * @summary 事项评论修改
         * @param {ModifyIssueCommentRequest} [modifyIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIssueComment(modifyIssueCommentRequest?: ModifyIssueCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIssueComment(modifyIssueCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIssueComment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改事项描述
         * @summary 事项描述修改
         * @param {ModifyIssueDescriptionRequest} [modifyIssueDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIssueDescription(modifyIssueDescriptionRequest?: ModifyIssueDescriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIssueDescription(modifyIssueDescriptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIssueDescription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改事项父需求
         * @summary 事项父需求修改
         * @param {ModifyIssueParentRequirementRequest} [modifyIssueParentRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIssueParentRequirement(modifyIssueParentRequirementRequest?: ModifyIssueParentRequirementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIssueParentRequirement(modifyIssueParentRequirementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIssueParentRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改迭代
         * @summary 迭代修改
         * @param {ModifyIterationRequest} [modifyIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIteration(modifyIterationRequest?: ModifyIterationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyIteration200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIteration(modifyIterationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIteration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改迭代状态
         * @summary 修改迭代状态
         * @param {ModifyIterationStatusRequest} [modifyIterationStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIterationStatus(modifyIterationStatusRequest?: ModifyIterationStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyIterationStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIterationStatus(modifyIterationStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyIterationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 执行合并
         * @summary 合并信息-执行合并
         * @param {ModifyMergeMRRequest} [modifyMergeMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMergeMR(modifyMergeMRRequest?: ModifyMergeMRRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyMergeMR200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMergeMR(modifyMergeMRRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyMergeMR']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改合并请求基础设置
         * @summary 仓库设置-修改合并请求基础设置
         * @param {ModifyMergeRequestBasicSettingsRequest} [modifyMergeRequestBasicSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest?: ModifyMergeRequestBasicSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyMergeRequestBasicSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改合并请求合并提交消息模版
         * @summary 仓库设置-修改合并请求合并提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyMergeRequestMergeCommitMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改合并请求合并压缩提交消息模版
         * @summary 仓库设置-修改合并请求合并压缩提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyMergeRequestSquashCommitMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 权限组修改
         * @summary 权限组修改
         * @param {ModifyPolicyRequest} [modifyPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyPolicy(modifyPolicyRequest?: ModifyPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyPolicy200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPolicy(modifyPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目信息修改
         * @summary 项目信息修改
         * @param {ModifyProjectRequest} [modifyProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProject(modifyProjectRequest?: ModifyProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyProject(modifyProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目公告更新
         * @summary 项目公告更新
         * @param {ModifyProjectAnnouncementRequest} [modifyProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProjectAnnouncement(modifyProjectAnnouncementRequest?: ModifyProjectAnnouncementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyProjectAnnouncement200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyProjectAnnouncement(modifyProjectAnnouncementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyProjectAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目标签修改
         * @summary 项目标签修改
         * @param {ModifyProjectLabelRequest} [modifyProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyProjectLabel(modifyProjectLabelRequest?: ModifyProjectLabelRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyProjectLabel200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyProjectLabel(modifyProjectLabelRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyProjectLabel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改版本
         * @summary 版本修改
         * @param {ModifyReleaseRequest} [modifyReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyRelease(modifyReleaseRequest?: ModifyReleaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyRelease200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyRelease(modifyReleaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyRelease']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改、新增团队级别的仓库规范
         * @summary 仓库设置-修改、新增团队级别的仓库规范
         * @param {ModifyTeamLevelDepotSpecRequest} [modifyTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest?: ModifyTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTeamLevelDepotSpec200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTeamLevelDepotSpec']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过用户 ID 团队成员锁定
         * @summary 团队成员锁定
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTeamMemberLocked']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过用户 ID 解锁团队成员
         * @summary 团队成员解锁
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTeamMemberUnlocked']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例修改
         * @summary 测试用例修改
         * @param {ModifyTestCaseRequest} [modifyTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTestCase(modifyTestCaseRequest?: ModifyTestCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestCase200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTestCase(modifyTestCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试用例分组修改
         * @summary 测试用例分组修改
         * @param {ModifyTestCaseSectionRequest} [modifyTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTestCaseSection(modifyTestCaseSectionRequest?: ModifyTestCaseSectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestCaseSection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTestCaseSection(modifyTestCaseSectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTestCaseSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 测试计划修改
         * @summary 测试计划修改
         * @param {ModifyTestRunRequest} [modifyTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyTestRun(modifyTestRunRequest?: ModifyTestRunRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyTestRun200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyTestRun(modifyTestRunRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyTestRun']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 项目集工作项分解/取消分解到项目中的事项
         * @summary 项目集工作项分解&取消分解到项目中的事项
         * @param {ModifyWorkItemSplitIssuesRequest} [modifyWorkItemSplitIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest?: ModifyWorkItemSplitIssuesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.modifyWorkItemSplitIssues']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 批量规划迭代
         * @summary 迭代批量规划
         * @param {PlanIterationIssueRequest} [planIterationIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planIterationIssue(planIterationIssueRequest?: PlanIterationIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planIterationIssue(planIterationIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.planIterationIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 将指定版本的制品的发布状态调整为已发布
         * @summary 制品版本发布
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releaseArtifactVersion(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.releaseArtifactVersion(describeArtifactChecksumsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.releaseArtifactVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部署流程重排序
         * @summary 部署流程重排序
         * @param {ReorderCdPipelinesRequest} [reorderCdPipelinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderCdPipelines(reorderCdPipelinesRequest?: ReorderCdPipelinesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderCdPipelines200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderCdPipelines(reorderCdPipelinesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.reorderCdPipelines']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @summary 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @param {SetGrantToResourceRequest} [setGrantToResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGrantToResource(setGrantToResourceRequest?: SetGrantToResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setGrantToResource(setGrantToResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setGrantToResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 资源权限判定策略设置
         * @summary 资源权限判定策略设置
         * @param {SetPredicatePolicyOnResourceRequest} [setPredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest?: SetPredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setPredicatePolicyOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建停止
         * @summary 构建停止
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopCodingCIBuild(describeCodingCIBuildStageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.stopCodingCIBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 部署流程触发
         * @summary 部署流程触发
         * @param {TriggerCdPipelineRequest} [triggerCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerCdPipeline(triggerCdPipelineRequest?: TriggerCdPipelineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TriggerCdPipeline200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerCdPipeline(triggerCdPipelineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.triggerCdPipeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 构建触发
         * @summary 构建触发
         * @param {TriggerCodingCIBuildRequest} [triggerCodingCIBuildRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerCodingCIBuild(triggerCodingCIBuildRequest?: TriggerCodingCIBuildRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TriggerCodingCIBuild200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerCodingCIBuild(triggerCodingCIBuildRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.triggerCodingCIBuild']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 用户组更新
         * @summary 用户组更新
         * @param {UpdateUserGroupByIdRequest} [updateUserGroupByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserGroupById(updateUserGroupByIdRequest?: UpdateUserGroupByIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserGroupById(updateUserGroupByIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserGroupById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * ✨ 测试计划归档
         * @summary 测试计划归档
         * @param {ArchiveTestRunRequest} [archiveTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTestRun(archiveTestRunRequest?: ArchiveTestRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<ArchiveTestRun200Response> {
            return localVarFp.archiveTestRun(archiveTestRunRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 为指定权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @summary 权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
         * @param {AttachResourceScopeToPolicyRequest} [attachResourceScopeToPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest?: AttachResourceScopeToPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @summary 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachToResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.attachToResource(detachFromResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 绑定 CD 应用到项目
         * @summary 绑定 CD 应用到项目
         * @param {BindCdApplicationToProjectRequest} [bindCdApplicationToProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindCdApplicationToProject(bindCdApplicationToProjectRequest?: BindCdApplicationToProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.bindCdApplicationToProject(bindCdApplicationToProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 关联外部仓库
         * @summary 外部仓库关联
         * @param {BoundExternalDepotRequest} [boundExternalDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boundExternalDepot(boundExternalDepotRequest?: BoundExternalDepotRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.boundExternalDepot(boundExternalDepotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 取消执行中的 CD 部署流程
         * @summary CD 部署流程取消执行
         * @param {CancelCdPipelineRequest} [cancelCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelCdPipeline(cancelCdPipelineRequest?: CancelCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.cancelCdPipeline(cancelCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 清理构建计划缓存
         * @summary 构建计划缓存清理
         * @param {ClearCodingCIJobCacheRequest} [clearCodingCIJobCacheRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCodingCIJobCache(clearCodingCIJobCacheRequest?: ClearCodingCIJobCacheRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.clearCodingCIJobCache(clearCodingCIJobCacheRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品授信清单创建
         * @summary 制品授信清单创建
         * @param {CreateArtifactCreditRequest} [createArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactCredit(createArtifactCreditRequest?: CreateArtifactCreditRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateArtifactCredit200Response> {
            return localVarFp.createArtifactCredit(createArtifactCreditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品属性新增（指定版本）
         * @summary 制品属性新增（指定版本）
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createArtifactProperties(modifyArtifactPropertiesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品仓库创建
         * @summary 制品仓库创建
         * @param {CreateArtifactRepositoryRequest} [createArtifactRepositoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifactRepository(createArtifactRepositoryRequest?: CreateArtifactRepositoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateArtifactRepository200Response> {
            return localVarFp.createArtifactRepository(createArtifactRepositoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 生成附件预上传信息
         * @summary 附件预上传信息生成
         * @param {CreateAttachmentPrepareSignUrlRequest} [createAttachmentPrepareSignUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest?: CreateAttachmentPrepareSignUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateAttachmentPrepareSignUrl200Response> {
            return localVarFp.createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Git仓库创建二进制文件，文件总大小不能超过10Mb
         * @summary Git文件-Git仓库创建二进制文件
         * @param {CreateBinaryFilesRequest} [createBinaryFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBinaryFiles(createBinaryFilesRequest?: CreateBinaryFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateBinaryFiles200Response> {
            return localVarFp.createBinaryFiles(createBinaryFilesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增代码保护规则
         * @summary 仓库设置-新增代码保护规则
         * @param {CreateBranchProtectionRequest} [createBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchProtection(createBranchProtectionRequest?: CreateBranchProtectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createBranchProtection(createBranchProtectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-新增保护分支规则管理员
         * @param {CreateBranchProtectionMemberRequest} [createBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranchProtectionMember(createBranchProtectionMemberRequest?: CreateBranchProtectionMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createBranchProtectionMember(createBranchProtectionMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例添加测试结果
         * @summary 测试用例添加测试结果
         * @param {CreateCaseResultRequest} [createCaseResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCaseResult(createCaseResultRequest?: CreateCaseResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createCaseResult(createCaseResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 云账号添加
         * @summary CD 云账号添加
         * @param {CreateCdCloudAccountRequest} [createCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdCloudAccount(createCdCloudAccountRequest?: CreateCdCloudAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCdCloudAccount200Response> {
            return localVarFp.createCdCloudAccount(createCdCloudAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组添加
         * @summary CD 主机组添加
         * @param {CreateCdHostServerGroupRequest} [createCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdHostServerGroup(createCdHostServerGroupRequest?: CreateCdHostServerGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCdHostServerGroup200Response> {
            return localVarFp.createCdHostServerGroup(createCdHostServerGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 部署流程创建
         * @summary CD 部署流程创建
         * @param {CreateCdPipelineRequest} [createCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdPipeline(createCdPipelineRequest?: CreateCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCdPipeline200Response> {
            return localVarFp.createCdPipeline(createCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 任务执行
         * @summary CD 任务执行
         * @param {CreateCdTaskRequest} [createCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCdTask(createCdTaskRequest?: CreateCdTaskRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCdTask200Response> {
            return localVarFp.createCdTask(createCdTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建构建计划
         * @summary 构建计划创建
         * @param {CreateCodingCIJobRequest} [createCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingCIJob(createCodingCIJobRequest?: CreateCodingCIJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCodingCIJob200Response> {
            return localVarFp.createCodingCIJob(createCodingCIJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据团队模版创建构建计划
         * @summary 构建计划-根据团队模版创建
         * @param {CreateCodingCIJobByTeamTemplateRequest} [createCodingCIJobByTeamTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest?: CreateCodingCIJobByTeamTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCodingCIJobByTeamTemplate200Response> {
            return localVarFp.createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Coding项目创建
         * @summary 项目创建
         * @param {CreateCodingProjectRequest} [createCodingProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCodingProject(createCodingProjectRequest?: CreateCodingProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCodingProject200Response> {
            return localVarFp.createCodingProject(createCodingProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部门创建
         * @summary 部门创建
         * @param {CreateDepartmentRequest} [createDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(createDepartmentRequest?: CreateDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateDepartment200Response> {
            return localVarFp.createDepartment(createDepartmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据模板创建仓库
         * @summary 仓库信息-根据模板创建仓库
         * @param {CreateDepotByTemplateRequest} [createDepotByTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotByTemplate(createDepotByTemplateRequest?: CreateDepotByTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateDepotByTemplate200Response> {
            return localVarFp.createDepotByTemplate(createDepotByTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增 git 仓库文件推送规则
         * @summary 仓库设置-新增git仓库文件推送规则
         * @param {CreateDepotFilePushRuleRequest} [createDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotFilePushRule(createDepotFilePushRuleRequest?: CreateDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response> {
            return localVarFp.createDepotFilePushRule(createDepotFilePushRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增git仓库文件推送规则特权者
         * @summary 仓库设置-新增git仓库文件推送规则特权者
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response> {
            return localVarFp.createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ \"    文件上传        1. 获取预签名URL          Action： 固定为 DescribePreSignUploadUrl   ProjectName: 项目名称   ContentType: 内容类型，和web端的文件上传时content-type是一样的。可以参考web端上传文件时，Http Header: Content-Type   FolderType :文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。   FolderId:  若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过  open api 【创建文件夹】获取。   FileName: 保存的文件名。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe***     {       \"Action\":\"DescribePreSignUploadUrl\",       \"ProjectName\":\"zhishiguanli\",       \"FolderId\":0,       \"FolderType\":1,       \"FileName\": \"20220727_1.csv\",       \"ContentType\": \"image/jpeg\"     }      响应数据:   UploadLink: 上传文件的URL   StorageKey: 上传到存储的文件路径   AuthToken: 用于校验身份数据的token，后续接口中使用   headers: 上传时需要的token信息          ```     {       \"Response\": {         \"RequestId\": \"99b1fbfb-8477-44b3-b19f-35acbcdbdf77\",         \"Data\": {           \"UploadLink\": \"https://coding-net-production-file-1257242599.cos.ap-shanghai.myqcloud.com/c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID7B14xvfnJxWtNpV95c1sAqIwms4_GnHMa-eCuULWfvXWTqp0qv8czbirX1BlXEXd%26q-sign-time%3D1661352589%3B1661354389%26q-key-time%3D1661352589%3B1661354389%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D337c3118dd1385d33f5ada4c0492755ac7d00419\",           \"StorageKey\": \"c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv\",           \"Headers\": \"{\\\"x-cos-security-token\\\":\\\"0ZVlbeAyb6cqcbI2HcZg75xppfMACLPac9f0c5517a5d13d9731b0adb708c2ecdhK1-UdtMEqc-XpsQW5v1bB1BGeHXMlwutOM24SaUfX6lSP531QDfVrKJzLl8-NpCgKZfUE_-_Pg29lfqSvWpbd0D-4pENoBL5IDhkXO1RmmDncvxbwm_aMGRMlPL3YwQEyjPGv8KJ36ZUDm1k5ERnKYf2_OllQtoW5lSeRRnvCQUd7cAvvzSIl6WD-VxXJ2N9jX5Z_bh6B9zFXtCWjr0is550-QaLSM32V0NP0wPV4bBy9PwNLA32gxhsf24dfUZZsBZZVF67lfFGWgcK7SuZRrE_QPiEd9L4et-4KxBj4pXsAxCTWmATrcAonNq6xJ-\\\"}\",           \"AuthToken\": \"819321faa15086676c9c474b8823d6ce67aa4ec907a4e8a37fa396f990bd610c\"         }       }     }     ```                         2. 上传文件CreateFile     这个步骤需要客户端自己完成。     上传URL 可以参考 项目协同中描述内容中的上传文件的 COS URL。          2.1 COS上传   参考脚本如下:   #!/bin/bash          file=本地文件路径     storageKey=返回的StorageKey     url=https://域名/${storageKey}               # 腾讯云COS上传 curl, 注意Authorization值为sign参数，经过urldecode转化后的值。x-cos-security-token 使用 响应中的Headers中返回的值，          curl -X PUT \"${url}\" \\     -H \'Authorization:q-sign-algorithm=sha1&q-ak=AKIDr0xilQrTFEUhvpLvJ9Ro3Ds_REhKTtYv-dXFbNBY8w1aDZR7rpUNPq6hXn_SdANN&q-sign-time=1661351394;1661353194&q-key-time=1661351394;1661353194&q-header-list=host&q-url-param-list=&q-signature=2574959eebb2ddf7dd5e6e19f30126c7a63cec58\' \\     -H \'x-cos-security-token:0ZVlbeAyb6cqcbI2HcZg75xppfMACLPaba476ee7278aba618b8794dcf090c81fhK1-UdtMEqc-XpsQW5v1bHRl8XcitKZd-0CGmDfln5OqFJigfAursov8MRS8h_abNT0Bns7F7D5tN26wXra6oBlvhxZ4wU11Zk2peuDXq4eWSUWOCtvf-3IaxoCs2KEwMtSFcds1byn_00Zj2YxG8ajHQrVT6Gtry9PW3ULfNe-YPpWaX_XArXpoyjWuaXpBjIFvEhR5sB0gGSTtyXhf9S6wWJAisNlwvOls5xAdnNRHJWyt8Td_f-Lc6yYIXV-aD9ZoGyl5NEQcxEip7GQRtb-p8QD9MG_rfYsJiQ0blMGQQGzexo7YHRhRTws6dlXU\' \\     -H \'user-agent:tencentcloud-cos-postman\' \\     -H \'cosclientagent:cos_mc_v4\' \\     -H \'cosclientip:219.136.173.47\' -T \"${file}\"                    2.2 minio上传     minio 上传脚本DEMO如下：     bucket=file-storage     file=\'～/Downloads/测试简单格式1.md (2).zip\'          # 测试导入1.zip          storageKey=c5318506-8807-4612-9ad8-d751c863983d.zip     s3_key=***     s3_secret=***     host=minio.nh51daup.dev.coding.io          resource=\"/${bucket}/${storageKey}\"          # content_type=\"application/octet-stream\"          content_type=\"application/zip\"     date=`date -R`     _signature=\"PUT\\n\\n${content_type}\\n${date}\\n${resource}\"     signature=`echo -en ${_signature} | openssl sha1 -hmac ${s3_secret} -binary | base64`          # minio文件上传 curl 命令          curl -X PUT -T \"${file}\" \\   -H \"Host: ${host}\" \\   -H \"Date: ${date}\" \\   -H \"Content-Type: ${content_type}\" \\   -H \"Authorization: AWS ${s3_key}:${signature}\" \\     http://${host}${resource}          3. 保存文件   StorageKey: 获取预签名URL接口返回的 StorageKey   AuthToken: 获取预签名URL接口返回的 AuthToken          POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d**ab          {       \"Action\":\"CreateFile\",       \"StorageKey\": \"2bdb7eea-57b4-495d-a5d0-67446822cea5.csv\",       \"AuthToken\": \"76ee1e30ef6df0552f0bd939f1f0359510d60d1806028f5c64fa31c116cf3f22\"     }         响应数据格式:   Id: 保存后的文件ID。   Name: 保存后的文件名称          ```     {       \"Response\": {         \"RequestId\": \"9958d6b7-ead6-4674-9ae8-21cd3054282b\",         \"Data\": {           \"Id\": 28909581,           \"Name\": \"20220727_1.csv\"         }       }     }     ```                    4. 创建事项DEMO     更详细参数说明参考open api文档   ProjectName: 项目名称     Name： 事项名称   FileIds: 数组类型，CreateFile 后响应的ID列表               POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9e53a2**e0ddc57ab          ```     {       \"Action\":\"CreateIssue\",       \"ProjectName\":\"zhishiguanli\",       \"Type\":\"DEFECT\",       \"Name\":\"需求清221101\",       \"Priority\":\"0\",       \"FileIds\":[28909581]     }     ```               4.1 项目协同需求描述图片同步方案          ## 方案一          需求系统在通过 OpenAPI 写入 CODING 需求时，通过正则方式提取所有图片，调用 CODING OpenAPI 上传图片到文件网盘，再替换需求内图片地址。     方案前提：     需求系统展示需求数据来源客户需求系统。     具体步骤：          1. 需求系统创建或更新图片时，调用 COIDNG 项目协同创建或编辑 OpenAPI     2. 获取需求系统需求描述     3. 正则提取图片地址     4. 调用 CODING OpenAPI 上传图片到文件网盘，获取到文件 ID     5. 通过文件 ID 和项目 ID 拼接成 CODING 图片相对地址，/api/project/{projectId}/files/{imageFileId}/imagePreview     6. 保存到 CODING 系统前，通过字符替换原图片地址为/api/project/{projectId}/files/{imageFileId}/imagePreview     7. 完成          ## 方案二          CODING 侧在项目协同 OpenAPI 创建或者编辑需求时，将外站图片地址转存（或者不过滤）。          ## 结论          方案一，无需依赖 CODING 更新，可直接开始。     方案二，需要依赖 CODING 更新，正在评估预计时间。          5. 创建文件夹     该接口可用于文件网盘中创建文件夹。   ProjectName: 项目名称   FoldName: 文件夹名称   ParentId: 父文件夹ID,如果是根路径，传 0。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9**a6e0ddc57ab          ```     {       \"Action\":\"CreateFolder\",       \"ProjectName\":\"zhishiguanli\",       \"FoldName\": \"Hello-sub-test-1\",       \"ParentId\": 0     }     ```          响应：          ```     {       \"Response\": {         \"RequestId\": \"e48d9d36-7473-4fac-b005-6fdc46afa69f\",         \"Data\": {           \"Id\": 28909737,           \"Name\": \"Hello-sub-test-1\"         }       }     }     ```       \"
         * @summary 文件创建
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(createFileRequest?: CreateFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateFile200Response> {
            return localVarFp.createFile(createFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 文件夹创建
         * @summary 文件夹创建
         * @param {CreateFolderRequest} [createFolderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(createFolderRequest?: CreateFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateFolder200Response> {
            return localVarFp.createFolder(createFolderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用于代码仓库新建分支
         * @summary 仓库分支-用于代码仓库新建分支
         * @param {CreateGitBranchRequest} [createGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitBranch(createGitBranchRequest?: CreateGitBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitBranch(createGitBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建一次提交
         * @summary Git提交-创建一次提交
         * @param {CreateGitCommitRequest} [createGitCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommit(createGitCommitRequest?: CreateGitCommitRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitCommit200Response> {
            return localVarFp.createGitCommit(createGitCommitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 为某次提交创建一条评论
         * @summary Git提交-为某次提交创建一条评论
         * @param {CreateGitCommitCommentRequest} [createGitCommitCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommitComment(createGitCommitCommentRequest?: CreateGitCommitCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitCommitComment200Response> {
            return localVarFp.createGitCommitComment(createGitCommitCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建提交注释,注意：对于 NotesRef 参数建议默认为空，因为 git 会使用默认的 ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的 ref 来保存您的 git note，有可能会覆盖您原有的 ref。
         * @summary Git提交-创建提交注释。注意：对于 NotesRef 参数建议默认为空，因为git会使用默认的ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的ref来保存您的git note，有可能会覆盖您原有的ref。
         * @param {CreateGitCommitNoteRequest} [createGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitCommitNote(createGitCommitNoteRequest?: CreateGitCommitNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitCommitNote(createGitCommitNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新建部署公钥
         * @summary 仓库设置-新建部署公钥
         * @param {CreateGitDeployKeyRequest} [createGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitDeployKey(createGitDeployKeyRequest?: CreateGitDeployKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitDeployKey(createGitDeployKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建代码仓库
         * @summary 仓库信息-创建代码仓库
         * @param {CreateGitDepotRequest} [createGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitDepot(createGitDepotRequest?: CreateGitDepotRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitDepot200Response> {
            return localVarFp.createGitDepot(createGitDepotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建仓库文件
         * @summary Git文件-创建仓库文件
         * @param {CreateGitFilesRequest} [createGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitFiles(createGitFilesRequest?: CreateGitFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitFiles200Response> {
            return localVarFp.createGitFiles(createGitFilesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建git合并请求
         * @summary 合并请求-创建git合并请求
         * @param {CreateGitMergeReqRequest} [createGitMergeReqRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitMergeReq(createGitMergeReqRequest?: CreateGitMergeReqRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitMergeReq200Response> {
            return localVarFp.createGitMergeReq(createGitMergeReqRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建 Git 合并请求mr
         * @summary 合并请求-创建Git合并请求mr
         * @param {CreateGitMergeRequestRequest} [createGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitMergeRequest(createGitMergeRequestRequest?: CreateGitMergeRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitMergeRequest200Response> {
            return localVarFp.createGitMergeRequest(createGitMergeRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建标签保护规则
         * @summary 仓库设置-创建标签保护规则
         * @param {CreateGitProtectedTagRuleRequest} [createGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitProtectedTagRule(createGitProtectedTagRuleRequest?: CreateGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitProtectedTagRule(createGitProtectedTagRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 批量创建标签保护规则
         * @summary 仓库设置-批量创建标签保护规则
         * @param {CreateGitProtectedTagRulesRequest} [createGitProtectedTagRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitProtectedTagRules(createGitProtectedTagRulesRequest?: CreateGitProtectedTagRulesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitProtectedTagRules(createGitProtectedTagRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新建 git 版本
         * @summary 版本信息-新建git版本
         * @param {CreateGitReleaseRequest} [createGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitRelease(createGitReleaseRequest?: CreateGitReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createGitRelease(createGitReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建标签
         * @summary 标签信息-创建标签
         * @param {CreateGitTagRequest} [createGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGitTag(createGitTagRequest?: CreateGitTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateGitTag200Response> {
            return localVarFp.createGitTag(createGitTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建事项
         * @summary 事项创建
         * @param {CreateIssueRequest} [createIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssue(createIssueRequest?: CreateIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateIssue200Response> {
            return localVarFp.createIssue(createIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 添加前置事项
         * @summary 前置事项添加
         * @param {CreateIssueBlockRequest} [createIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueBlock(createIssueBlockRequest?: CreateIssueBlockRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createIssueBlock(createIssueBlockRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建事项评论
         * @summary 事项评论创建
         * @param {CreateIssueCommentRequest} [createIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueComment(createIssueCommentRequest?: CreateIssueCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createIssueComment(createIssueCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建事项模块
         * @summary 事项模块创建
         * @param {CreateIssueModuleRequest} [createIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueModule(createIssueModuleRequest?: CreateIssueModuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateIssueModule200Response> {
            return localVarFp.createIssueModule(createIssueModuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 登记工时
         * @summary 工时登记
         * @param {CreateIssueWorkHoursRequest} [createIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueWorkHours(createIssueWorkHoursRequest?: CreateIssueWorkHoursRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createIssueWorkHours(createIssueWorkHoursRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建迭代
         * @summary 迭代创建
         * @param {CreateIterationRequest} [createIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIteration(createIterationRequest?: CreateIterationRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateIteration200Response> {
            return localVarFp.createIteration(createIterationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 导入团队成员SSH公钥
         * @summary 仓库设置-导入团队成员SSH公钥
         * @param {CreateMemberSshKeyRequest} [createMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberSshKey(createMemberSshKeyRequest?: CreateMemberSshKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateMemberSshKey200Response> {
            return localVarFp.createMemberSshKey(createMemberSshKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建合并请求行评论和改动文件diff行评论
         * @summary 合并请求-创建合并请求行评论和改动文件diff行评论
         * @param {CreateMergeRequestNoteRequest} [createMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequestNote(createMergeRequestNoteRequest?: CreateMergeRequestNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateMergeRequestNote200Response> {
            return localVarFp.createMergeRequestNote(createMergeRequestNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增合并请求评审者
         * @summary 合并请求-新增合并请求评审者
         * @param {CreateMergeRequestReviewerRequest} [createMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequestReviewer(createMergeRequestReviewerRequest?: CreateMergeRequestReviewerRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateMergeRequestReviewer200Response> {
            return localVarFp.createMergeRequestReviewer(createMergeRequestReviewerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组创建
         * @summary 权限组创建
         * @param {CreatePolicyRequest} [createPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(createPolicyRequest?: CreatePolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyPolicy200Response> {
            return localVarFp.createPolicy(createPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集创建
         * @summary 项目集创建
         * @param {CreateProgramRequest} [createProgramRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgram(createProgramRequest?: CreateProgramRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProgram200Response> {
            return localVarFp.createProgram(createProgramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集成员权限组添加
         * @summary 项目集成员权限组添加
         * @param {CreateProgramMemberPolicyRequest} [createProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgramMemberPolicy(createProgramMemberPolicyRequest?: CreateProgramMemberPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProgramMemberPolicy200Response> {
            return localVarFp.createProgramMemberPolicy(createProgramMemberPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集中添加项目
         * @summary 项目集中添加项目
         * @param {CreateProgramProjectsRequest} [createProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProgramProjects(createProgramProjectsRequest?: CreateProgramProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProgramProjects200Response> {
            return localVarFp.createProgramProjects(createProgramProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目公告创建
         * @summary 项目公告创建
         * @param {CreateProjectAnnouncementRequest} [createProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectAnnouncement(createProjectAnnouncementRequest?: CreateProjectAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProjectAnnouncement200Response> {
            return localVarFp.createProjectAnnouncement(createProjectAnnouncementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目标签创建
         * @summary 项目标签创建
         * @param {CreateProjectLabelRequest} [createProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectLabel(createProjectLabelRequest?: CreateProjectLabelRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyProjectLabel200Response> {
            return localVarFp.createProjectLabel(createProjectLabelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目成员主体新增(包含用户组、部门、成员)
         * @summary 项目成员主体新增(包含用户组、部门、成员)
         * @param {CreateProjectMemberPrincipalRequest} [createProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectMemberPrincipal(createProjectMemberPrincipalRequest?: CreateProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createProjectMemberPrincipal(createProjectMemberPrincipalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 模版项目创建
         * @summary 模版项目创建
         * @param {CreateProjectWithTemplateRequest} [createProjectWithTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWithTemplate(createProjectWithTemplateRequest?: CreateProjectWithTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProjectWithTemplate200Response> {
            return localVarFp.createProjectWithTemplate(createProjectWithTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建只读分支
         * @summary 仓库分支-创建只读分支
         * @param {CreateReadOnlyRefRequest} [createReadOnlyRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReadOnlyRef(createReadOnlyRefRequest?: CreateReadOnlyRefRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createReadOnlyRef(createReadOnlyRefRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建版本
         * @summary 版本创建
         * @param {CreateReleaseRequest} [createReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelease(createReleaseRequest?: CreateReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyRelease200Response> {
            return localVarFp.createRelease(createReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 创建测试报告
         * @summary 测试报告创建
         * @param {CreateReportRequest} [createReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(createReportRequest?: CreateReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateReport200Response> {
            return localVarFp.createReport(createReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 需求关联缺陷
         * @summary 需求关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createRequirementDefectRelation(createRequirementDefectRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 导入用户SSH公钥
         * @summary 仓库设置-导入用户SSH公钥
         * @param {CreateSshKeyRequest} [createSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSshKey(createSshKeyRequest?: CreateSshKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateSshKey200Response> {
            return localVarFp.createSshKey(createSshKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例创建
         * @summary 测试用例创建
         * @param {CreateTestCaseRequest} [createTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestCase(createTestCaseRequest?: CreateTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateTestCase200Response> {
            return localVarFp.createTestCase(createTestCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例分组创建
         * @summary 测试用例分组创建
         * @param {CreateTestCaseSectionRequest} [createTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestCaseSection(createTestCaseSectionRequest?: CreateTestCaseSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestCaseSection200Response> {
            return localVarFp.createTestCaseSection(createTestCaseSectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务关联缺陷
         * @summary 测试任务关联缺陷
         * @param {CreateTestDefectRequest} [createTestDefectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestDefect(createTestDefectRequest?: CreateTestDefectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createTestDefect(createTestDefectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务添加测试结果
         * @summary 测试任务添加测试结果
         * @param {CreateTestResultRequest} [createTestResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestResult(createTestResultRequest?: CreateTestResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createTestResult(createTestResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务状态批量更新
         * @summary 测试任务状态批量更新
         * @param {CreateTestResultsRequest} [createTestResultsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestResults(createTestResultsRequest?: CreateTestResultsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createTestResults(createTestResultsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试计划创建
         * @summary 测试计划创建
         * @param {CreateTestRunRequest} [createTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestRun(createTestRunRequest?: CreateTestRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestRun200Response> {
            return localVarFp.createTestRun(createTestRunRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务添加某步骤的测试结果
         * @summary 测试任务添加某步骤的测试结果
         * @param {CreateTestStepResultRequest} [createTestStepResultRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestStepResult(createTestStepResultRequest?: CreateTestStepResultRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createTestStepResult(createTestStepResultRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组创建
         * @summary 用户组创建
         * @param {CreateUserGroupRequest} [createUserGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserGroup(createUserGroupRequest?: CreateUserGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserGroup200Response> {
            return localVarFp.createUserGroup(createUserGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组添加用户
         * @summary 用户组添加用户
         * @param {CreateUserGroupUsersRequest} [createUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserGroupUsers(createUserGroupUsersRequest?: CreateUserGroupUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.createUserGroupUsers(createUserGroupUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组清理用户
         * @summary 用户组清理用户
         * @param {DeleteAllUsersOnGroupRequest} [deleteAllUsersOnGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest?: DeleteAllUsersOnGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除指定版本制品的指定制品属性
         * @summary 制品属性删除
         * @param {DeleteArtifactPropertiesRequest} [deleteArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactProperties(deleteArtifactPropertiesRequest?: DeleteArtifactPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteArtifactProperties(deleteArtifactPropertiesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除保护分支规则
         * @summary 仓库设置-删除保护分支规则
         * @param {DeleteBranchProtectionRequest} [deleteBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranchProtection(deleteBranchProtectionRequest?: DeleteBranchProtectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteBranchProtection(deleteBranchProtectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 新增保护分支规则管理员
         * @summary 仓库设置-删除保护分支规则管理员
         * @param {DeleteBranchProtectionMemberRequest} [deleteBranchProtectionMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranchProtectionMember(deleteBranchProtectionMemberRequest?: DeleteBranchProtectionMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteBranchProtectionMember(deleteBranchProtectionMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 云账号删除
         * @summary CD 云账号删除
         * @param {DeleteCdCloudAccountRequest} [deleteCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdCloudAccount(deleteCdCloudAccountRequest?: DeleteCdCloudAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteCdCloudAccount(deleteCdCloudAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组删除
         * @summary CD 主机组删除
         * @param {DeleteCdHostServerGroupRequest} [deleteCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdHostServerGroup(deleteCdHostServerGroupRequest?: DeleteCdHostServerGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteCdHostServerGroup(deleteCdHostServerGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 部署流程删除
         * @summary CD 部署流程删除
         * @param {DeleteCdPipelineRequest} [deleteCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCdPipeline(deleteCdPipelineRequest?: DeleteCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteCdPipeline(deleteCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除构建
         * @summary 构建删除
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除构建计划
         * @summary 构建计划删除
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteCodingCIJob(deleteCodingCIJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部门删除
         * @summary 部门删除
         * @param {DeleteDepartmentRequest} [deleteDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment(deleteDepartmentRequest?: DeleteDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteDepartment(deleteDepartmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除 git 仓库文件推送规则
         * @summary 仓库设置-删除git仓库文件推送规则
         * @param {DeleteDepotFilePushRuleRequest} [deleteDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepotFilePushRule(deleteDepotFilePushRuleRequest?: DeleteDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDepotFilePushRule200Response> {
            return localVarFp.deleteDepotFilePushRule(deleteDepotFilePushRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除 git 仓库特权者文件推送权限
         * @summary 仓库设置-删除git仓库特权者文件推送权限
         * @param {DeleteDepotFilePushRuleDenyPrivilegeRequest} [deleteDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest?: DeleteDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteDepotFilePushRuleDenyPrivilege200Response> {
            return localVarFp.deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除代码仓库分支
         * @summary 仓库分支-删除代码仓库分支
         * @param {DeleteGitBranchRequest} [deleteGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitBranch(deleteGitBranchRequest?: DeleteGitBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitBranch(deleteGitBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除部署公钥
         * @summary 仓库设置-删除部署公钥
         * @param {DeleteGitDeployKeyRequest} [deleteGitDeployKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitDeployKey(deleteGitDeployKeyRequest?: DeleteGitDeployKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitDeployKey(deleteGitDeployKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除git仓库
         * @summary 仓库信息-删除git仓库
         * @param {DeleteGitDepotRequest} [deleteGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitDepot(deleteGitDepotRequest?: DeleteGitDepotRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitDepot(deleteGitDepotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除文件并提交
         * @summary Git文件-删除文件并提交
         * @param {DeleteGitFilesRequest} [deleteGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitFiles(deleteGitFilesRequest?: DeleteGitFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteGitFiles200Response> {
            return localVarFp.deleteGitFiles(deleteGitFilesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除已合并到默认分支的分支（此操作不会删除受保护的分支）
         * @summary 仓库分支-删除已合并到默认分支的分支（此操作不会删除受保护的分支)
         * @param {DeleteGitMergedBranchesRequest} [deleteGitMergedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitMergedBranches(deleteGitMergedBranchesRequest?: DeleteGitMergedBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitMergedBranches(deleteGitMergedBranchesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除标签保护规则
         * @summary 标签信息-删除标签保护规则
         * @param {DeleteGitProtectedTagRuleRequest} [deleteGitProtectedTagRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest?: DeleteGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除仓库版本
         * @summary 版本信息-删除仓库版本
         * @param {DeleteGitReleaseRequest} [deleteGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitRelease(deleteGitReleaseRequest?: DeleteGitReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitRelease(deleteGitReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 代码仓库删除tag
         * @summary 标签信息-代码仓库删除tag
         * @param {DeleteGitTagRequest} [deleteGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGitTag(deleteGitTagRequest?: DeleteGitTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteGitTag(deleteGitTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除事项
         * @summary 事项删除
         * @param {DeleteIssueRequest} [deleteIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssue(deleteIssueRequest?: DeleteIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteIssue(deleteIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除前置事项
         * @summary 前置事项删除
         * @param {DeleteIssueBlockRequest} [deleteIssueBlockRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueBlock(deleteIssueBlockRequest?: DeleteIssueBlockRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteIssueBlock(deleteIssueBlockRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除事项模块
         * @summary 事项模块删除
         * @param {DeleteIssueModuleRequest} [deleteIssueModuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueModule(deleteIssueModuleRequest?: DeleteIssueModuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteIssueModule(deleteIssueModuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除工时日志
         * @summary 工时日志删除
         * @param {DeleteIssueWorkHoursRequest} [deleteIssueWorkHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssueWorkHours(deleteIssueWorkHoursRequest?: DeleteIssueWorkHoursRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteIssueWorkHours(deleteIssueWorkHoursRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除迭代
         * @summary 迭代删除
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteIteration(deleteIterationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除团队成员的SSH公钥
         * @summary 仓库设置-删除团队成员的SSH公钥
         * @param {DeleteMemberSshKeyRequest} [deleteMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberSshKey(deleteMemberSshKeyRequest?: DeleteMemberSshKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteMemberSshKey(deleteMemberSshKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除合并请求行评论和改动文件diff行评论
         * @summary 合并请求-删除合并请求行评论和改动文件diff行评论
         * @param {DeleteMergeRequestNoteRequest} [deleteMergeRequestNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMergeRequestNote(deleteMergeRequestNoteRequest?: DeleteMergeRequestNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteMergeRequestNote200Response> {
            return localVarFp.deleteMergeRequestNote(deleteMergeRequestNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除mr评审者
         * @summary 合并请求-删除mr评审者
         * @param {DeleteMergeRequestReviewerRequest} [deleteMergeRequestReviewerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest?: DeleteMergeRequestReviewerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteMergeRequestReviewer200Response> {
            return localVarFp.deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 单个项目删除
         * @summary 单个项目删除
         * @param {DeleteOneProjectRequest} [deleteOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneProject(deleteOneProjectRequest?: DeleteOneProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteOneProject(deleteOneProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组批量删除
         * @summary 权限组批量删除
         * @param {DeletePoliciesByIdRequest} [deletePoliciesByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoliciesById(deletePoliciesByIdRequest?: DeletePoliciesByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletePoliciesById200Response> {
            return localVarFp.deletePoliciesById(deletePoliciesByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集成员权限组删除
         * @summary 项目集成员权限组删除
         * @param {DeleteProgramMemberPolicyRequest} [deleteProgramMemberPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest?: DeleteProgramMemberPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteProgramMemberPolicy200Response> {
            return localVarFp.deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目公告删除
         * @summary 项目公告删除
         * @param {DeleteProjectAnnouncementRequest} [deleteProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectAnnouncement(deleteProjectAnnouncementRequest?: DeleteProjectAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteProjectAnnouncement(deleteProjectAnnouncementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目标签删除
         * @summary 项目标签删除
         * @param {DeleteProjectLabelRequest} [deleteProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectLabel(deleteProjectLabelRequest?: DeleteProjectLabelRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteProjectLabel200Response> {
            return localVarFp.deleteProjectLabel(deleteProjectLabelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目成员主体删除(包含用户组、部门、成员)
         * @summary 项目成员主体删除(包含用户组、部门、成员)
         * @param {DeleteProjectMemberPrincipalRequest} [deleteProjectMemberPrincipalRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest?: DeleteProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除版本
         * @summary 版本删除
         * @param {DeleteReleaseRequest} [deleteReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRelease(deleteReleaseRequest?: DeleteReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteRelease(deleteReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试报告删除
         * @summary 测试报告删除
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteReport(deleteReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 需求取消关联缺陷
         * @summary 需求取消关联缺陷
         * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteRequirementDefectRelation(createRequirementDefectRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除当前用户的SSH公钥
         * @summary 仓库设置-删除当前用户的SSH公钥
         * @param {DeleteSshKeyRequest} [deleteSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSshKey(deleteSshKeyRequest?: DeleteSshKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteSshKey(deleteSshKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除团队级别的分支规范
         * @summary 仓库设置-删除团队级别的分支规范
         * @param {DeleteTeamLevelDepotSpecRequest} [deleteTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest?: DeleteTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 团队成员删除
         * @summary 团队成员删除
         * @param {DeleteTeamMemberRequest} [deleteTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamMember(deleteTeamMemberRequest?: DeleteTeamMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteTeamMember(deleteTeamMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例删除
         * @summary 测试用例删除
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteTestCase(deleteTestCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例分组删除
         * @summary 测试用例分组删除
         * @param {DeleteTestCaseSectionRequest} [deleteTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCaseSection(deleteTestCaseSectionRequest?: DeleteTestCaseSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteTestCaseSection(deleteTestCaseSectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试计划删除
         * @summary 测试计划删除
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteTestRun(deleteTestRunRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组删除
         * @summary 用户组删除
         * @param {DeleteUserGroupByIdsRequest} [deleteUserGroupByIdsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroupByIds(deleteUserGroupByIdsRequest?: DeleteUserGroupByIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteUserGroupByIds(deleteUserGroupByIdsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组删除用户
         * @summary 用户组删除用户
         * @param {DeleteUserGroupUsersRequest} [deleteUserGroupUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserGroupUsers(deleteUserGroupUsersRequest?: DeleteUserGroupUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteUserGroupUsers(deleteUserGroupUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 在堡垒机上安装 CD 客户端必要的 Secret 凭据参数
         * @summary 堡垒机安装 Secret
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAgentSecret(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeAgentSecret200Response> {
            return localVarFp.describeAgentSecret(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取所有合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取所有合并请求行评论和改动文件diff行评论
         * @param {DescribeAllMergeRequestNotesRequest} [describeAllMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest?: DescribeAllMergeRequestNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeAllMergeRequestNotes200Response> {
            return localVarFp.describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目标签查询
         * @summary 项目标签查询
         * @param {DescribeAllProjectLabelsRequest} [describeAllProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllProjectLabels(describeAllProjectLabelsRequest?: DescribeAllProjectLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeAllProjectLabels200Response> {
            return localVarFp.describeAllProjectLabels(describeAllProjectLabelsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询全部有权限的项目工时日志列表
         * @summary 工时日志列表查询
         * @param {DescribeAllProjectsIssueWorkLogListRequest} [describeAllProjectsIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest?: DescribeAllProjectsIssueWorkLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeAllProjectsIssueWorkLogList200Response> {
            return localVarFp.describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品Checksum列表查询
         * @summary 制品Checksum列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactChecksums(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactChecksums200Response> {
            return localVarFp.describeArtifactChecksums(describeArtifactChecksumsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过授信清单ID查询制品授信清单详情
         * @summary 查询制品授信清单详情
         * @param {DescribeArtifactCreditRequest} [describeArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactCredit(describeArtifactCreditRequest?: DescribeArtifactCreditRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactCredit200Response> {
            return localVarFp.describeArtifactCredit(describeArtifactCreditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品授信清单列表查询
         * @summary 制品授信清单列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactCreditList(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactCreditList200Response> {
            return localVarFp.describeArtifactCreditList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品文件临时下载链接获取
         * @summary 制品文件临时下载链接获取
         * @param {DescribeArtifactFileDownloadUrlRequest} [describeArtifactFileDownloadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest?: DescribeArtifactFileDownloadUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactFileDownloadUrl200Response> {
            return localVarFp.describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品包（镜像）列表查询
         * @summary 制品包（镜像）列表查询
         * @param {DescribeArtifactPackageListRequest} [describeArtifactPackageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactPackageList(describeArtifactPackageListRequest?: DescribeArtifactPackageListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactPackageList200Response> {
            return localVarFp.describeArtifactPackageList(describeArtifactPackageListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 指定制品版本的制品属性列表查询
         * @summary 制品属性列表查询
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactProperties(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactProperties200Response> {
            return localVarFp.describeArtifactProperties(describeArtifactChecksumsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品仓库下可下载的文件列表获取
         * @summary 制品仓库下可下载的文件列表获取
         * @param {DescribeArtifactRepositoryFileListRequest} [describeArtifactRepositoryFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest?: DescribeArtifactRepositoryFileListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactRepositoryFileList200Response> {
            return localVarFp.describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询当前团队指定项目的制品仓库列表
         * @summary 制品仓库列表查询
         * @param {DescribeArtifactRepositoryListRequest} [describeArtifactRepositoryListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactRepositoryList(describeArtifactRepositoryListRequest?: DescribeArtifactRepositoryListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactRepositoryList200Response> {
            return localVarFp.describeArtifactRepositoryList(describeArtifactRepositoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品版本可下载的文件列表获取（暂仅支持类型为: 1-Generic;3-maven;4-npm;5-pypi 制品）
         * @summary 制品版本可下载的文件列表获取
         * @param {DescribeArtifactVersionFileListRequest} [describeArtifactVersionFileListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactVersionFileList(describeArtifactVersionFileListRequest?: DescribeArtifactVersionFileListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactVersionFileList200Response> {
            return localVarFp.describeArtifactVersionFileList(describeArtifactVersionFileListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品版本列表查询
         * @summary 制品版本列表查询
         * @param {DescribeArtifactVersionListRequest} [describeArtifactVersionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeArtifactVersionList(describeArtifactVersionListRequest?: DescribeArtifactVersionListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeArtifactVersionList200Response> {
            return localVarFp.describeArtifactVersionList(describeArtifactVersionListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组列表查询（指定资源）
         * @summary 权限组列表查询（指定资源）
         * @param {DescribeAvailablePoliciesOnResourceRequest} [describeAvailablePoliciesOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest?: DescribeAvailablePoliciesOnResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeAvailablePoliciesOnResource200Response> {
            return localVarFp.describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询后置事项
         * @summary 后置事项查询
         * @param {DescribeBlockIssueListRequest} [describeBlockIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBlockIssueList(describeBlockIssueListRequest?: DescribeBlockIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeBlockIssueList200Response> {
            return localVarFp.describeBlockIssueList(describeBlockIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询前置事项
         * @summary 前置事项查询
         * @param {DescribeBlockedByIssueListRequest} [describeBlockedByIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBlockedByIssueList(describeBlockedByIssueListRequest?: DescribeBlockedByIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeBlockedByIssueList200Response> {
            return localVarFp.describeBlockedByIssueList(describeBlockedByIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询单个保护分支规则
         * @summary 仓库设置-查询单个保护分支规则
         * @param {DescribeBranchProtectionRequest} [describeBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtection(describeBranchProtectionRequest?: DescribeBranchProtectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeBranchProtection200Response> {
            return localVarFp.describeBranchProtection(describeBranchProtectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询保护分支规则下所有管理员信息
         * @summary 仓库设置-查询保护分支规则下所有管理员信息
         * @param {DescribeBranchProtectionMembersRequest} [describeBranchProtectionMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtectionMembers(describeBranchProtectionMembersRequest?: DescribeBranchProtectionMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeBranchProtectionMembers200Response> {
            return localVarFp.describeBranchProtectionMembers(describeBranchProtectionMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库保护分支规则集合
         * @summary 仓库设置-查询仓库保护分支规则集合
         * @param {DescribeBranchProtectionsRequest} [describeBranchProtectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeBranchProtections(describeBranchProtectionsRequest?: DescribeBranchProtectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeBranchProtections200Response> {
            return localVarFp.describeBranchProtections(describeBranchProtectionsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查看两个分支是否可以合并
         * @summary 合并请求-查看两个分支是否可以合并
         * @param {DescribeCanMergeRequest} [describeCanMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCanMerge(describeCanMergeRequest?: DescribeCanMergeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCanMerge200Response> {
            return localVarFp.describeCanMerge(describeCanMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 堡垒机列表获取
         * @summary CD 堡垒机列表获取
         * @param {DescribeCdAgentMachinesRequest} [describeCdAgentMachinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdAgentMachines(describeCdAgentMachinesRequest?: DescribeCdAgentMachinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdAgentMachines200Response> {
            return localVarFp.describeCdAgentMachines(describeCdAgentMachinesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 应用详情获取
         * @summary CD 应用详情获取
         * @param {DescribeCdApplicationRequest} [describeCdApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplication(describeCdApplicationRequest?: DescribeCdApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdApplication200Response> {
            return localVarFp.describeCdApplication(describeCdApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 应用列表获取
         * @summary CD 应用列表获取
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplications(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdApplications200Response> {
            return localVarFp.describeCdApplications(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据项目名获取关联应用列表
         * @summary 关联应用列表获取（指定项目名）
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdApplicationsByProject(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdApplicationsByProject200Response> {
            return localVarFp.describeCdApplicationsByProject(describeWikiListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 云账号列表获取
         * @summary CD 云账号列表获取
         * @param {DescribeCdCloudAccountsRequest} [describeCdCloudAccountsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdCloudAccounts(describeCdCloudAccountsRequest?: DescribeCdCloudAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdCloudAccounts200Response> {
            return localVarFp.describeCdCloudAccounts(describeCdCloudAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据应用名列表获取发布次数
         * @summary 发布次数-根据应用名列表获取
         * @param {DescribeCdDeployCountByApplicationsRequest} [describeCdDeployCountByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest?: DescribeCdDeployCountByApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployCountByApplications200Response> {
            return localVarFp.describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 关联应用的发布次数获取（指定项目名）
         * @summary 关联应用的发布次数获取（指定项目名）
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployCountByProject200Response> {
            return localVarFp.describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 发布时长-根据应用名列表获取
         * @summary 发布时长-根据应用名列表获取
         * @param {DescribeCdDeployTimeByApplicationsRequest} [describeCdDeployTimeByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest?: DescribeCdDeployTimeByApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployTimeByApplications200Response> {
            return localVarFp.describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 关联应用的发布时长-根据项目名获取
         * @summary 关联应用的发布时长-根据项目名获取
         * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployTimeByProject200Response> {
            return localVarFp.describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 发布趋势-根据应用名列表获取
         * @summary 发布趋势-根据应用名列表获取
         * @param {DescribeCdDeployTrendByApplicationsRequest} [describeCdDeployTrendByApplicationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest?: DescribeCdDeployTrendByApplicationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployTrendByApplications200Response> {
            return localVarFp.describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 关联应用的发布趋势-根据项目名获取
         * @summary 关联应用的发布趋势-根据项目名获取
         * @param {DescribeCdDeployTrendByProjectRequest} [describeCdDeployTrendByProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest?: DescribeCdDeployTrendByProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdDeployTrendByProject200Response> {
            return localVarFp.describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组获取
         * @summary CD 主机组获取
         * @param {DescribeCdHostServerGroupRequest} [describeCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdHostServerGroup(describeCdHostServerGroupRequest?: DescribeCdHostServerGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdHostServerGroup200Response> {
            return localVarFp.describeCdHostServerGroup(describeCdHostServerGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组列表获取
         * @summary CD 主机组列表获取
         * @param {DescribeCdHostServerGroupsRequest} [describeCdHostServerGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdHostServerGroups(describeCdHostServerGroupsRequest?: DescribeCdHostServerGroupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdHostServerGroups200Response> {
            return localVarFp.describeCdHostServerGroups(describeCdHostServerGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 部署流程执行记录获取
         * @summary CD 部署流程执行记录获取
         * @param {DescribeCdPipelineRequest} [describeCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipeline(describeCdPipelineRequest?: DescribeCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdPipeline200Response> {
            return localVarFp.describeCdPipeline(describeCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 部署流程配置-根据名称获取
         * @summary CD 部署流程配置-根据名称获取
         * @param {DescribeCdPipelineConfigRequest} [describeCdPipelineConfigRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipelineConfig(describeCdPipelineConfigRequest?: DescribeCdPipelineConfigRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdPipelineConfig200Response> {
            return localVarFp.describeCdPipelineConfig(describeCdPipelineConfigRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 应用下的所有部署流程配置获取
         * @summary CD 应用下的所有部署流程配置获取
         * @param {DescribeCdPipelineConfigsRequest} [describeCdPipelineConfigsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdPipelineConfigs(describeCdPipelineConfigsRequest?: DescribeCdPipelineConfigsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdPipelineConfigs200Response> {
            return localVarFp.describeCdPipelineConfigs(describeCdPipelineConfigsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 任务执行记录获取
         * @summary CD 任务执行记录获取
         * @param {DescribeCdTaskRequest} [describeCdTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCdTask(describeCdTaskRequest?: DescribeCdTaskRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCdTask200Response> {
            return localVarFp.describeCdTask(describeCdTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询代码片段详细列表
         * @summary 仓库信息-查询代码片段详细列表
         * @param {DescribeCodeSearchRequest} [describeCodeSearchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodeSearch(describeCodeSearchRequest?: DescribeCodeSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodeSearch200Response> {
            return localVarFp.describeCodeSearch(describeCodeSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询构建记录详情
         * @summary 构建记录详情查询
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuild200Response> {
            return localVarFp.describeCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询构建任务制品
         * @summary 构建任务制品查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildArtifacts200Response> {
            return localVarFp.describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取构建计划环境变量
         * @summary 构建计划环境变量获取
         * @param {DescribeCodingCIBuildEnvsRequest} [describeCodingCIBuildEnvsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest?: DescribeCodingCIBuildEnvsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildEnvs200Response> {
            return localVarFp.describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建任务网页报告查询
         * @summary 构建任务网页报告查询
         * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildHtmlReports200Response> {
            return localVarFp.describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建日志获取
         * @summary 构建日志获取
         * @param {DescribeCodingCIBuildLogRequest} [describeCodingCIBuildLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildLog(describeCodingCIBuildLogRequest?: DescribeCodingCIBuildLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildLog200Response> {
            return localVarFp.describeCodingCIBuildLog(describeCodingCIBuildLogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建完整日志查询（原始日志 Raw）
         * @summary 构建完整日志查询（原始日志 Raw）
         * @param {DescribeCodingCIBuildLogRawRequest} [describeCodingCIBuildLogRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest?: DescribeCodingCIBuildLogRawRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildLogRaw200Response> {
            return localVarFp.describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建计划度量查询
         * @summary 构建计划度量查询
         * @param {DescribeCodingCIBuildMetricsRequest} [describeCodingCIBuildMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest?: DescribeCodingCIBuildMetricsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildMetrics200Response> {
            return localVarFp.describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建任务阶段获取
         * @summary 构建任务阶段获取
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStage(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildStage200Response> {
            return localVarFp.describeCodingCIBuildStage(describeCodingCIBuildStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建任务统计
         * @summary 构建任务统计
         * @param {DescribeCodingCIBuildStatisticsRequest} [describeCodingCIBuildStatisticsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest?: DescribeCodingCIBuildStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildStatistics200Response> {
            return localVarFp.describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建任务指定阶段的步骤获取
         * @summary 构建任务指定阶段的步骤获取
         * @param {DescribeCodingCIBuildStepRequest} [describeCodingCIBuildStepRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStep(describeCodingCIBuildStepRequest?: DescribeCodingCIBuildStepRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildStep200Response> {
            return localVarFp.describeCodingCIBuildStep(describeCodingCIBuildStepRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建步骤日志获取
         * @summary 构建步骤日志获取
         * @param {DescribeCodingCIBuildStepLogRequest} [describeCodingCIBuildStepLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest?: DescribeCodingCIBuildStepLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuildStepLog200Response> {
            return localVarFp.describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建计划的构建列表获取
         * @summary 构建计划的构建列表获取
         * @param {DescribeCodingCIBuildsRequest} [describeCodingCIBuildsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIBuilds(describeCodingCIBuildsRequest?: DescribeCodingCIBuildsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIBuilds200Response> {
            return localVarFp.describeCodingCIBuilds(describeCodingCIBuildsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建计划详情获取
         * @summary 构建计划详情获取
         * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIJob200Response> {
            return localVarFp.describeCodingCIJob(deleteCodingCIJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建计划查询（通过项目ID）
         * @summary 构建计划查询（通过项目ID）
         * @param {DescribeCodingCIJobsRequest} [describeCodingCIJobsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCIJobs(describeCodingCIJobsRequest?: DescribeCodingCIJobsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCIJobs200Response> {
            return localVarFp.describeCodingCIJobs(describeCodingCIJobsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 当前用户信息查询
         * @summary 当前用户信息查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingCurrentUser(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingCurrentUser200Response> {
            return localVarFp.describeCodingCurrentUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目列表查询
         * @summary 项目列表查询
         * @param {DescribeCodingProjectsRequest} [describeCodingProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCodingProjects(describeCodingProjectsRequest?: DescribeCodingProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCodingProjects200Response> {
            return localVarFp.describeCodingProjects(describeCodingProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询commit的ref信息
         * @summary Git提交-查询commit的ref信息
         * @param {DescribeCommitRefsRequest} [describeCommitRefsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCommitRefs(describeCommitRefsRequest?: DescribeCommitRefsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCommitRefs200Response> {
            return localVarFp.describeCommitRefs(describeCommitRefsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询两个请求之间的请求列表（source target顺序正常）
         * @summary Git提交-查询两个请求之间的请求列表（source target顺序正常）
         * @param {DescribeCommitsBetweenCommitAndCommitRequest} [describeCommitsBetweenCommitAndCommitRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest?: DescribeCommitsBetweenCommitAndCommitRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeCommitsBetweenCommitAndCommit200Response> {
            return localVarFp.describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取配置方案
         * @summary 配置方案获取
         * @param {DescribeConfigTemplateListRequest} [describeConfigTemplateListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeConfigTemplateList(describeConfigTemplateListRequest?: DescribeConfigTemplateListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeConfigTemplateList200Response> {
            return localVarFp.describeConfigTemplateList(describeConfigTemplateListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 缺陷类型列表查询
         * @summary 缺陷类型列表查询
         * @param {DescribeDefectTypesRequest} [describeDefectTypesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDefectTypes(describeDefectTypesRequest?: DescribeDefectTypesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDefectTypes200Response> {
            return localVarFp.describeDefectTypes(describeDefectTypesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部门详情查询
         * @summary 部门详情查询
         * @param {DescribeDepartmentRequest} [describeDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepartment(describeDepartmentRequest?: DescribeDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepartment200Response> {
            return localVarFp.describeDepartment(describeDepartmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取部门成员列表（分页列表）查询选中部门下面所有的成员
         * @summary 部门成员列表查询
         * @param {DescribeDepartmentMembersRequest} [describeDepartmentMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepartmentMembers(describeDepartmentMembersRequest?: DescribeDepartmentMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepartmentMembers200Response> {
            return localVarFp.describeDepartmentMembers(describeDepartmentMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeDepotByNameInfoRequest} [describeDepotByNameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotByNameInfo(describeDepotByNameInfoRequest?: DescribeDepotByNameInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotByNameInfo200Response> {
            return localVarFp.describeDepotByNameInfo(describeDepotByNameInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库的默认分支
         * @summary 仓库分支-查询仓库的默认分支
         * @param {DescribeDepotDefaultBranchRequest} [describeDepotDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotDefaultBranch(describeDepotDefaultBranchRequest?: DescribeDepotDefaultBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotDefaultBranch200Response> {
            return localVarFp.describeDepotDefaultBranch(describeDepotDefaultBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 git 仓库文件推送规则
         * @summary 仓库设置-查询git仓库文件推送规则
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotFilePushRules(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotFilePushRules200Response> {
            return localVarFp.describeDepotFilePushRules(describeDepotFilePushRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库合并请求列表
         * @summary 合并请求-查询仓库合并请求列表
         * @param {DescribeDepotMergeRequestsRequest} [describeDepotMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotMergeRequests(describeDepotMergeRequestsRequest?: DescribeDepotMergeRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotMergeRequests200Response> {
            return localVarFp.describeDepotMergeRequests(describeDepotMergeRequestsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库推送设置
         * @summary 仓库设置-查询仓库推送设置
         * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotPushSetting(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotPushSetting200Response> {
            return localVarFp.describeDepotPushSetting(describeDepotFilePushRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库规范详情
         * @summary 仓库设置-查询仓库规范详情
         * @param {DescribeDepotSpecDetailRequest} [describeDepotSpecDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotSpecDetail(describeDepotSpecDetailRequest?: DescribeDepotSpecDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyChooseDepotSpec200Response> {
            return localVarFp.describeDepotSpecDetail(describeDepotSpecDetailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库规范列表
         * @summary 仓库设置-查询仓库规范列表
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDepotSpecs(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDepotSpecs200Response> {
            return localVarFp.describeDepotSpecs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 两次提交之间的文件差异
         * @summary Git提交-两次提交之间的文件差异（source target顺序正常）
         * @param {DescribeDifferentBetween2CommitsRequest} [describeDifferentBetween2CommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest?: DescribeDifferentBetween2CommitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDifferentBetween2Commits200Response> {
            return localVarFp.describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取两次 commit 之间的文件 差异详情
         * @summary Git提交-获取两次commit之间的文件差异详情(废弃，source target顺序不一致)
         * @param {DescribeDifferentBetweenTwoCommitsRequest} [describeDifferentBetweenTwoCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest?: DescribeDifferentBetweenTwoCommitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeDifferentBetweenTwoCommits200Response> {
            return localVarFp.describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取指定 commit 下某文件指定代码行的最后一次提交
         * @summary Git提交-获取指定commit下某文件指定代码行的最后一次提交
         * @param {DescribeGitBlameInfoRequest} [describeGitBlameInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlameInfo(describeGitBlameInfoRequest?: DescribeGitBlameInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBlameInfo200Response> {
            return localVarFp.describeGitBlameInfo(describeGitBlameInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 Git Blob
         * @summary Git文件-查询GitBlob
         * @param {DescribeGitBlobRequest} [describeGitBlobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlob(describeGitBlobRequest?: DescribeGitBlobRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBlob200Response> {
            return localVarFp.describeGitBlob(describeGitBlobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 Git Blob raw 信息
         * @summary Git文件-查询Git Blob raw信息
         * @param {DescribeGitBlobRawRequest} [describeGitBlobRawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBlobRaw(describeGitBlobRawRequest?: DescribeGitBlobRawRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBlobRaw200Response> {
            return localVarFp.describeGitBlobRaw(describeGitBlobRawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询代码仓库单个分支
         * @summary 仓库分支-查询代码仓库单个分支
         * @param {DescribeGitBranchRequest} [describeGitBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranch(describeGitBranchRequest?: DescribeGitBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBranch200Response> {
            return localVarFp.describeGitBranch(describeGitBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库分支列表
         * @summary 仓库分支-查询仓库分支列表
         * @param {DescribeGitBranchListRequest} [describeGitBranchListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranchList(describeGitBranchListRequest?: DescribeGitBranchListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBranchList200Response> {
            return localVarFp.describeGitBranchList(describeGitBranchListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库下所有分支列表
         * @summary 仓库分支-查询仓库下所有分支列表
         * @param {DescribeGitBranchesRequest} [describeGitBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranches(describeGitBranchesRequest?: DescribeGitBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBranches200Response> {
            return localVarFp.describeGitBranches(describeGitBranchesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据sha值查询所在分支
         * @summary 仓库分支-根据sha值查询所在分支
         * @param {DescribeGitBranchesByShaRequest} [describeGitBranchesByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitBranchesBySha(describeGitBranchesByShaRequest?: DescribeGitBranchesByShaRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitBranchesBySha200Response> {
            return localVarFp.describeGitBranchesBySha(describeGitBranchesByShaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取commit评论
         * @summary Git提交-获取commit评论
         * @param {DescribeGitCommitCommentsRequest} [describeGitCommitCommentsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitComments(describeGitCommitCommentsRequest?: DescribeGitCommitCommentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitComments200Response> {
            return localVarFp.describeGitCommitComments(describeGitCommitCommentsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询某次提交的diff信息
         * @summary Git提交-查询某次提交的diff信息
         * @param {DescribeGitCommitDiffRequest} [describeGitCommitDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitDiff(describeGitCommitDiffRequest?: DescribeGitCommitDiffRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitDiff200Response> {
            return localVarFp.describeGitCommitDiff(describeGitCommitDiffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库某次提交改动的文件路径列表
         * @summary Git提交-查询仓库某次提交改动的文件路径列表
         * @param {DescribeGitCommitFilePathListRequest} [describeGitCommitFilePathListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitFilePathList(describeGitCommitFilePathListRequest?: DescribeGitCommitFilePathListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitFilePathList200Response> {
            return localVarFp.describeGitCommitFilePathList(describeGitCommitFilePathListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询单个请求详情信息
         * @summary Git提交-查询单个请求详情信息
         * @param {DescribeGitCommitInfoRequest} [describeGitCommitInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitInfo(describeGitCommitInfoRequest?: DescribeGitCommitInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitInfo200Response> {
            return localVarFp.describeGitCommitInfo(describeGitCommitInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitInfos(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitInfos200Response> {
            return localVarFp.describeGitCommitInfos(describeGitCommitInfosRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取提交注释
         * @summary Git提交-获取提交注释
         * @param {DescribeGitCommitNoteRequest} [describeGitCommitNoteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitNote(describeGitCommitNoteRequest?: DescribeGitCommitNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitNote200Response> {
            return localVarFp.describeGitCommitNote(describeGitCommitNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询提交对应的流水线状态
         * @summary Git提交-查询提交对应的流水线状态
         * @param {DescribeGitCommitStatusRequest} [describeGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitStatus(describeGitCommitStatusRequest?: DescribeGitCommitStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitStatus200Response> {
            return localVarFp.describeGitCommitStatus(describeGitCommitStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库分支下提交列表
         * @summary Git提交-查询仓库分支下提交列表
         * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitCommitsInPage(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitCommitsInPage200Response> {
            return localVarFp.describeGitCommitsInPage(describeGitCommitInfosRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 git 仓库的贡献者
         * @summary 仓库信息-查询git仓库的贡献者
         * @param {DescribeGitContributorsRequest} [describeGitContributorsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitContributors(describeGitContributorsRequest?: DescribeGitContributorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitContributors200Response> {
            return localVarFp.describeGitContributors(describeGitContributorsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据代码仓库id获取代码仓库信息
         * @summary 仓库信息-根据代码仓库id获取代码仓库信息
         * @param {DescribeGitDepotRequest} [describeGitDepotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitDepot(describeGitDepotRequest?: DescribeGitDepotRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitDepot200Response> {
            return localVarFp.describeGitDepot(describeGitDepotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询某仓库下的部署公钥列表
         * @summary 仓库设置-查询某仓库下的部署公钥列表
         * @param {DescribeGitDepotDeployKeysRequest} [describeGitDepotDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest?: DescribeGitDepotDeployKeysRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitDepotDeployKeys200Response> {
            return localVarFp.describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取文件详情
         * @summary Git文件-获取文件详情
         * @param {DescribeGitFileRequest} [describeGitFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFile(describeGitFileRequest?: DescribeGitFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitFile200Response> {
            return localVarFp.describeGitFile(describeGitFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询某次提交某文件的内容
         * @summary Git提交-查询某次提交某文件的内容
         * @param {DescribeGitFileContentRequest} [describeGitFileContentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFileContent(describeGitFileContentRequest?: DescribeGitFileContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitFileContent200Response> {
            return localVarFp.describeGitFileContent(describeGitFileContentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 检查仓库文件
         * @summary Git文件-检查仓库文件是否存在
         * @param {DescribeGitFileStatRequest} [describeGitFileStatRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFileStat(describeGitFileStatRequest?: DescribeGitFileStatRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitFileStat200Response> {
            return localVarFp.describeGitFileStat(describeGitFileStatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取分支目录结构
         * @summary Git文件-查询仓库目录下文件和文件夹名字
         * @param {DescribeGitFilesRequest} [describeGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitFiles(describeGitFilesRequest?: DescribeGitFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitFiles200Response> {
            return localVarFp.describeGitFiles(describeGitFilesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询两个分支的公共祖先
         * @summary 仓库分支-查询两个分支的公共祖先
         * @param {DescribeGitMergeBaseRequest} [describeGitMergeBaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeBase(describeGitMergeBaseRequest?: DescribeGitMergeBaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitMergeBase200Response> {
            return localVarFp.describeGitMergeBase(describeGitMergeBaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求文件的 diff 详情
         * @summary 合并请求-查询合并请求文件的 diff 详情
         * @param {DescribeGitMergeRequestDiffDetailRequest} [describeGitMergeRequestDiffDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest?: DescribeGitMergeRequestDiffDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitMergeRequestDiffDetail200Response> {
            return localVarFp.describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求 diff 信息的文件列表
         * @summary 合并请求-查询合并请求diff信息的文件列表
         * @param {DescribeGitMergeRequestDiffsRequest} [describeGitMergeRequestDiffsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest?: DescribeGitMergeRequestDiffsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitMergeRequestDiffs200Response> {
            return localVarFp.describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的参与者
         * @param {DescribeGitMergeRequestParticipantsRequest} [describeGitMergeRequestParticipantsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest?: DescribeGitMergeRequestParticipantsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitMergeRequestParticipants200Response> {
            return localVarFp.describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询含有某次提交的合并请求
         * @summary 合并请求-查询含有某次提交的合并请求
         * @param {DescribeGitMergeRequestsByShaRequest} [describeGitMergeRequestsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest?: DescribeGitMergeRequestsByShaRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitMergeRequestsBySha200Response> {
            return localVarFp.describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询某项目下的部署公钥列表
         * @summary 仓库设置-查询某项目下的部署公钥列表
         * @param {DescribeGitProjectDeployKeysRequest} [describeGitProjectDeployKeysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest?: DescribeGitProjectDeployKeysRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitDepotDeployKeys200Response> {
            return localVarFp.describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询受保护的标签列表
         * @summary 标签信息-查询受保护的标签列表
         * @param {DescribeGitProtectedTagsRequest} [describeGitProtectedTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProtectedTags(describeGitProtectedTagsRequest?: DescribeGitProtectedTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitProtectedTags200Response> {
            return localVarFp.describeGitProtectedTags(describeGitProtectedTagsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据标签保护规则查询受保护的标签列表
         * @summary 标签信息-根据标签保护规则查询受保护的标签列表
         * @param {DescribeGitProtectedTagsByRuleRequest} [describeGitProtectedTagsByRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest?: DescribeGitProtectedTagsByRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitProtectedTagsByRule200Response> {
            return localVarFp.describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取分支或标签信息
         * @summary 仓库分支-获取分支或标签信息
         * @param {DescribeGitRefRequest} [describeGitRefRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitRef(describeGitRefRequest?: DescribeGitRefRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitRef200Response> {
            return localVarFp.describeGitRef(describeGitRefRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询含有某次提交的标签或分支列表
         * @summary Git提交-查询含有某次提交的标签或分支列表
         * @param {DescribeGitRefsByShaRequest} [describeGitRefsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitRefsBySha(describeGitRefsByShaRequest?: DescribeGitRefsByShaRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitRefsBySha200Response> {
            return localVarFp.describeGitRefsBySha(describeGitRefsByShaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库的版本详情
         * @summary 版本信息-查询仓库的版本详情
         * @param {DescribeGitReleaseDetailRequest} [describeGitReleaseDetailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitReleaseDetail(describeGitReleaseDetailRequest?: DescribeGitReleaseDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitReleaseDetail200Response> {
            return localVarFp.describeGitReleaseDetail(describeGitReleaseDetailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询仓库的版本列表
         * @summary 版本信息-查询仓库的版本列表
         * @param {DescribeGitReleasesRequest} [describeGitReleasesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitReleases(describeGitReleasesRequest?: DescribeGitReleasesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitReleases200Response> {
            return localVarFp.describeGitReleases(describeGitReleasesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询单个tag
         * @summary 标签信息-查询单个tag
         * @param {DescribeGitTagRequest} [describeGitTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTag(describeGitTagRequest?: DescribeGitTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitTag200Response> {
            return localVarFp.describeGitTag(describeGitTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询当前仓库下所有tags
         * @summary 标签信息-查询当前仓库下所有tags
         * @param {DescribeGitTagsRequest} [describeGitTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTags(describeGitTagsRequest?: DescribeGitTagsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitTags200Response> {
            return localVarFp.describeGitTags(describeGitTagsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 根据分支获取标签列表
         * @summary 标签信息-根据分支获取标签列表
         * @param {DescribeGitTagsByBranchRequest} [describeGitTagsByBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTagsByBranch(describeGitTagsByBranchRequest?: DescribeGitTagsByBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitTagsByBranch200Response> {
            return localVarFp.describeGitTagsByBranch(describeGitTagsByBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询含有某次提交的标签列表
         * @summary 标签信息-查询含有某次提交的标签列表
         * @param {DescribeGitTagsByShaRequest} [describeGitTagsByShaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTagsBySha(describeGitTagsByShaRequest?: DescribeGitTagsByShaRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitTagsBySha200Response> {
            return localVarFp.describeGitTagsBySha(describeGitTagsByShaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 git 仓库的树
         * @summary 仓库信息-查询git仓库的树
         * @param {DescribeGitTreeRequest} [describeGitTreeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGitTree(describeGitTreeRequest?: DescribeGitTreeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGitTree200Response> {
            return localVarFp.describeGitTree(describeGitTreeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 授权对象列表分页查询
         * @summary 授权对象列表分页查询
         * @param {DescribeGrantObjectsOnResourceRequest} [describeGrantObjectsOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest?: DescribeGrantObjectsOnResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGrantObjectsOnResource200Response> {
            return localVarFp.describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询指定资源下授权的用户列表，包括容器内的用户
         * @summary 授权用户列表分页查询
         * @param {DescribeGrantUsersOnResourceRequest} [describeGrantUsersOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeGrantUsersOnResource(describeGrantUsersOnResourceRequest?: DescribeGrantUsersOnResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeGrantUsersOnResource200Response> {
            return localVarFp.describeGrantUsersOnResource(describeGrantUsersOnResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组部署详情获取
         * @summary CD 主机组部署详情获取
         * @param {DescribeHostServerInstanceRequest} [describeHostServerInstanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeHostServerInstance(describeHostServerInstanceRequest?: DescribeHostServerInstanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeHostServerInstance200Response> {
            return localVarFp.describeHostServerInstance(describeHostServerInstanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项详情
         * @summary 事项详情查询
         * @param {DescribeIssueRequest} [describeIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssue(describeIssueRequest?: DescribeIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssue200Response> {
            return localVarFp.describeIssue(describeIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 拿到预签名，上传文件
         * @summary 预签名信息获取
         * @param {DescribeIssueAttachmentPreSignedUrlRequest} [describeIssueAttachmentPreSignedUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest?: DescribeIssueAttachmentPreSignedUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueAttachmentPreSignedUrl200Response> {
            return localVarFp.describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过状态以及状态的更新时间查询事项列表
         * @summary 通过状态以及状态的更新时间查询事项列表
         * @param {DescribeIssueByStatusUpdateRequest} [describeIssueByStatusUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest?: DescribeIssueByStatusUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueByStatusUpdate200Response> {
            return localVarFp.describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项评论列表
         * @summary 事项评论列表查询
         * @param {DescribeIssueCommentListRequest} [describeIssueCommentListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueCommentList(describeIssueCommentListRequest?: DescribeIssueCommentListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueCommentList200Response> {
            return localVarFp.describeIssueCommentList(describeIssueCommentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取某个事项的自定义属性变更日志
         * @summary 事项的自定义属性变更日志查询
         * @param {DescribeIssueCustomFieldLogListRequest} [describeIssueCustomFieldLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest?: DescribeIssueCustomFieldLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueCustomFieldLogList200Response> {
            return localVarFp.describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项附件的下载地址
         * @summary 事项附件的下载地址查询
         * @param {DescribeIssueFileUrlRequest} [describeIssueFileUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueFileUrl(describeIssueFileUrlRequest?: DescribeIssueFileUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueFileUrl200Response> {
            return localVarFp.describeIssueFileUrl(describeIssueFileUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项筛选器列表
         * @summary 事项筛选器列表查询
         * @param {DescribeIssueFilterListRequest} [describeIssueFilterListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueFilterList(describeIssueFilterListRequest?: DescribeIssueFilterListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueFilterList200Response> {
            return localVarFp.describeIssueFilterList(describeIssueFilterListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项列表
         * @summary 事项列表查询
         * @param {DescribeIssueListRequest} [describeIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueList(describeIssueListRequest?: DescribeIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueList200Response> {
            return localVarFp.describeIssueList(describeIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 事项列表（新），返回分页信息
         * @summary 事项查询,返回分页信息
         * @param {DescribeIssueListWithPageRequest} [describeIssueListWithPageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueListWithPage(describeIssueListWithPageRequest?: DescribeIssueListWithPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueListWithPage200Response> {
            return localVarFp.describeIssueListWithPage(describeIssueListWithPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取某个事项的活动日志
         * @summary 事项活动日志查询
         * @param {DescribeIssueLogListRequest} [describeIssueLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueLogList(describeIssueLogListRequest?: DescribeIssueLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueLogList200Response> {
            return localVarFp.describeIssueLogList(describeIssueLogListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项模块列表
         * @summary 事项模块列表查询
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueModuleList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueModuleList200Response> {
            return localVarFp.describeIssueModuleList(describeWikiListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项的引用资源列表
         * @summary 事项的引用资源列表查询
         * @param {DescribeIssueReferenceResourcesRequest} [describeIssueReferenceResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueReferenceResources(describeIssueReferenceResourcesRequest?: DescribeIssueReferenceResourcesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueReferenceResources200Response> {
            return localVarFp.describeIssueReferenceResources(describeIssueReferenceResourcesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项关联的代码仓库信息
         * @summary 事项关联的代码仓库信息查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueRelatedRepos(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueRelatedRepos200Response> {
            return localVarFp.describeIssueRelatedRepos(describeIssueRelatedReposRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询事项关联的项目集中的工作项
         * @summary 事项关联的项目集中的工作项查询
         * @param {DescribeIssueRelatedWorkItemListRequest} [describeIssueRelatedWorkItemListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest?: DescribeIssueRelatedWorkItemListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueRelatedWorkItemList200Response> {
            return localVarFp.describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取某个事项加入的所有版本
         * @summary 事项加入的版本查询
         * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueReleaseList(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueReleaseList200Response> {
            return localVarFp.describeIssueReleaseList(describeIssueRelatedReposRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 状态变更记录
         * @summary 事项的状态变更记录查询
         * @param {DescribeIssueStatusChangeLogListRequest} [describeIssueStatusChangeLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest?: DescribeIssueStatusChangeLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueStatusChangeLogList200Response> {
            return localVarFp.describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询工时日志列表
         * @summary 事项的工时日志查询
         * @param {DescribeIssueWorkLogListRequest} [describeIssueWorkLogListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIssueWorkLogList(describeIssueWorkLogListRequest?: DescribeIssueWorkLogListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIssueWorkLogList200Response> {
            return localVarFp.describeIssueWorkLogList(describeIssueWorkLogListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询迭代详情
         * @summary 迭代详情查询
         * @param {DeleteIterationRequest} [deleteIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIteration200Response> {
            return localVarFp.describeIteration(deleteIterationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 迭代列表
         * @summary 迭代列表获取
         * @param {DescribeIterationListRequest} [describeIterationListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeIterationList(describeIterationListRequest?: DescribeIterationListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeIterationList200Response> {
            return localVarFp.describeIterationList(describeIterationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取团队成员的 SSH 公钥列表
         * @summary 仓库设置-获取团队成员的SSH公钥列表
         * @param {DescribeMemberSshKeyRequest} [describeMemberSshKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMemberSshKey(describeMemberSshKeyRequest?: DescribeMemberSshKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMemberSshKey200Response> {
            return localVarFp.describeMemberSshKey(describeMemberSshKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求列表
         * @summary 合并请求-查询合并请求列表
         * @param {DescribeMergeReqCommitsRequest} [describeMergeReqCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeReqCommits(describeMergeReqCommitsRequest?: DescribeMergeReqCommitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeReqCommits200Response> {
            return localVarFp.describeMergeReqCommits(describeMergeReqCommitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求详情
         * @summary 合并请求-查询合并请求详情
         * @param {DescribeMergeReqInfoRequest} [describeMergeReqInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeReqInfo(describeMergeReqInfoRequest?: DescribeMergeReqInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeReqInfo200Response> {
            return localVarFp.describeMergeReqInfo(describeMergeReqInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求详情信息
         * @summary 合并请求-查询合并请求详情信息
         * @param {DescribeMergeRequestRequest} [describeMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequest(describeMergeRequestRequest?: DescribeMergeRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeRequest200Response> {
            return localVarFp.describeMergeRequest(describeMergeRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取合并请求文件修改记录
         * @summary 合并请求-获取合并请求文件修改记录
         * @param {DescribeMergeRequestFileDiffRequest} [describeMergeRequestFileDiffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest?: DescribeMergeRequestFileDiffRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeRequestFileDiff200Response> {
            return localVarFp.describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询合并请求操作记录
         * @summary 合并请求-查询合并请求操作记录
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestLog(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeRequestLog200Response> {
            return localVarFp.describeMergeRequestLog(modifyCloseMRRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取合并请求的参与者
         * @summary 合并请求-获取合并请求的评审者
         * @param {DescribeMergeRequestReviewersRequest} [describeMergeRequestReviewersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMergeRequestReviewers(describeMergeRequestReviewersRequest?: DescribeMergeRequestReviewersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMergeRequestReviewers200Response> {
            return localVarFp.describeMergeRequestReviewers(describeMergeRequestReviewersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取当前用户拥有读权限的仓库列表
         * @summary 仓库信息-获取当前用户拥有读权限的仓库列表
         * @param {DescribeMyDepotsRequest} [describeMyDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeMyDepots(describeMyDepotsRequest?: DescribeMyDepotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeMyDepots200Response> {
            return localVarFp.describeMyDepots(describeMyDepotsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取提交的note信息
         * @summary 仓库信息-获取提交的note信息
         * @param {DescribeNotesByCommitsRequest} [describeNotesByCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeNotesByCommits(describeNotesByCommitsRequest?: DescribeNotesByCommitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeNotesByCommits200Response> {
            return localVarFp.describeNotesByCommits(describeNotesByCommitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 单个项目查询
         * @summary 单个项目查询
         * @param {DescribeOneProjectRequest} [describeOneProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeOneProject(describeOneProjectRequest?: DescribeOneProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeOneProject200Response> {
            return localVarFp.describeOneProject(describeOneProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取个人外部仓库
         * @summary 个人外部仓库获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePersonalExternalDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePersonalExternalDepots200Response> {
            return localVarFp.describePersonalExternalDepots(describePersonalExternalDepotsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 汉字转拼音
         * @summary 汉字转拼音
         * @param {DescribePinyinRequest} [describePinyinRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePinyin(describePinyinRequest?: DescribePinyinRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePinyin200Response> {
            return localVarFp.describePinyin(describePinyinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组列表查询（指定资源类型）
         * @summary 权限组列表查询（指定资源类型）
         * @param {DescribePoliciesOnResourceTypeRequest} [describePoliciesOnResourceTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest?: DescribePoliciesOnResourceTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePoliciesOnResourceType200Response> {
            return localVarFp.describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组详情获取
         * @summary 权限组详情获取
         * @param {DescribePolicyRequest} [describePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePolicy(describePolicyRequest?: DescribePolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePolicy200Response> {
            return localVarFp.describePolicy(describePolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 预签名信息获取，上传文件
         * @summary 预签名URL获取
         * @param {DescribePreSignUploadUrlRequest} [describePreSignUploadUrlRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePreSignUploadUrl(describePreSignUploadUrlRequest?: DescribePreSignUploadUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePreSignUploadUrl200Response> {
            return localVarFp.describePreSignUploadUrl(describePreSignUploadUrlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 资源权限判定模式获取
         * @summary 资源权限判定模式获取
         * @param {DescribePredicatePolicyOnResourceRequest} [describePredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest?: DescribePredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePredicatePolicyOnResource200Response> {
            return localVarFp.describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集下项目列表查询
         * @summary 项目集下项目列表查询
         * @param {DescribeProgramProjectsRequest} [describeProgramProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProgramProjects(describeProgramProjectsRequest?: DescribeProgramProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProgramProjects200Response> {
            return localVarFp.describeProgramProjects(describeProgramProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集列表查询
         * @summary 项目集列表查询
         * @param {DescribeProgramsRequest} [describeProgramsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePrograms(describeProgramsRequest?: DescribeProgramsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribePrograms200Response> {
            return localVarFp.describePrograms(describeProgramsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目公告查询
         * @summary 项目公告查询
         * @param {DescribeProjectAnnouncementRequest} [describeProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectAnnouncement(describeProjectAnnouncementRequest?: DescribeProjectAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProjectAnnouncement200Response> {
            return localVarFp.describeProjectAnnouncement(describeProjectAnnouncementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目公告列表查询
         * @summary 项目公告列表查询
         * @param {DescribeProjectAnnouncementsRequest} [describeProjectAnnouncementsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectAnnouncements(describeProjectAnnouncementsRequest?: DescribeProjectAnnouncementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectAnnouncements200Response> {
            return localVarFp.describeProjectAnnouncements(describeProjectAnnouncementsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目查询(通过项目名称)
         * @summary 项目查询(通过项目名称)
         * @param {DescribeProjectByNameRequest} [describeProjectByNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectByName(describeProjectByNameRequest?: DescribeProjectByNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeOneProject200Response> {
            return localVarFp.describeProjectByName(describeProjectByNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目凭据列表查询
         * @summary 项目凭据列表查询
         * @param {DescribeProjectCredentialsRequest} [describeProjectCredentialsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectCredentials(describeProjectCredentialsRequest?: DescribeProjectCredentialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectCredentials200Response> {
            return localVarFp.describeProjectCredentials(describeProjectCredentialsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取仓库分支列表
         * @summary 仓库分支列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotBranches(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectDepotBranches200Response> {
            return localVarFp.describeProjectDepotBranches(describeProjectDepotBranchesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取分支下的提交列表
         * @summary 分支下的提交列表获取
         * @param {DescribeProjectDepotCommitsRequest} [describeProjectDepotCommitsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotCommits(describeProjectDepotCommitsRequest?: DescribeProjectDepotCommitsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectDepotBranches200Response> {
            return localVarFp.describeProjectDepotCommits(describeProjectDepotCommitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询项目下所有的仓库信息列表
         * @summary 仓库信息-查询项目下所有的仓库信息列表
         * @param {DescribeProjectDepotInfoListRequest} [describeProjectDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotInfoList(describeProjectDepotInfoListRequest?: DescribeProjectDepotInfoListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectDepotInfoList200Response> {
            return localVarFp.describeProjectDepotInfoList(describeProjectDepotInfoListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取仓库的标签列表
         * @summary 仓库的标签列表获取
         * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepotTags(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectDepotBranches200Response> {
            return localVarFp.describeProjectDepotTags(describeProjectDepotBranchesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取项目仓库列表
         * @summary 项目仓库列表获取
         * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectDepots200Response> {
            return localVarFp.describeProjectDepots(describePersonalExternalDepotsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询具体事项类型的属性列表
         * @summary 具体事项类型的属性列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueFieldList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectIssueFieldList200Response> {
            return localVarFp.describeProjectIssueFieldList(describeProjectIssueFieldListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询具体事项类型的状态列表
         * @summary 具体事项类型的状态列表查询
         * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueStatusList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectIssueStatusList200Response> {
            return localVarFp.describeProjectIssueStatusList(describeProjectIssueFieldListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询项目事项类型列表
         * @summary 项目事项类型列表查询
         * @param {DescribeProjectIssueTypeListRequest} [describeProjectIssueTypeListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectIssueTypeList(describeProjectIssueTypeListRequest?: DescribeProjectIssueTypeListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectIssueTypeList200Response> {
            return localVarFp.describeProjectIssueTypeList(describeProjectIssueTypeListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目列表查询-指定项目标签
         * @summary 项目列表查询-指定项目标签
         * @param {DescribeProjectLabelsRequest} [describeProjectLabelsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectLabels(describeProjectLabelsRequest?: DescribeProjectLabelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectLabels200Response> {
            return localVarFp.describeProjectLabels(describeProjectLabelsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目成员主体查询(包含用户组、部门、成员)
         * @summary 项目成员主体查询(包含用户组、部门、成员)
         * @param {DescribeProjectMemberPrincipalsRequest} [describeProjectMemberPrincipalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest?: DescribeProjectMemberPrincipalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectMemberPrincipals200Response> {
            return localVarFp.describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目成员列表查询
         * @summary 项目成员列表查询
         * @param {DescribeProjectMembersRequest} [describeProjectMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMembers(describeProjectMembersRequest?: DescribeProjectMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectMembers200Response> {
            return localVarFp.describeProjectMembers(describeProjectMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取项目下的合并请求列表
         * @summary 合并请求-获取项目下的合并请求列表
         * @param {DescribeProjectMergeRequestsRequest} [describeProjectMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectMergeRequests(describeProjectMergeRequestsRequest?: DescribeProjectMergeRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeSelfMergeRequests200Response> {
            return localVarFp.describeProjectMergeRequests(describeProjectMergeRequestsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目用户组查询
         * @summary 项目用户组查询
         * @param {DescribeProjectRolesRequest} [describeProjectRolesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectRoles(describeProjectRolesRequest?: DescribeProjectRolesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectRoles200Response> {
            return localVarFp.describeProjectRoles(describeProjectRolesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目查询（通过一级菜单名查询开启某个模块的项目）
         * @summary 项目查询（通过一级菜单名）
         * @param {DescribeProjectsByFeatureRequest} [describeProjectsByFeatureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProjectsByFeature(describeProjectsByFeatureRequest?: DescribeProjectsByFeatureRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectsByFeature200Response> {
            return localVarFp.describeProjectsByFeature(describeProjectsByFeatureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询保护分支详情
         * @summary 仓库设置-查询保护分支详情
         * @param {DescribeProtectedBranchRequest} [describeProtectedBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranch(describeProtectedBranchRequest?: DescribeProtectedBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProtectedBranch200Response> {
            return localVarFp.describeProtectedBranch(describeProtectedBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询保护分支成员
         * @summary 仓库设置-查询保护分支成员
         * @param {DescribeProtectedBranchMembersRequest} [describeProtectedBranchMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranchMembers(describeProtectedBranchMembersRequest?: DescribeProtectedBranchMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProtectedBranchMembers200Response> {
            return localVarFp.describeProtectedBranchMembers(describeProtectedBranchMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询保护分支
         * @summary 仓库设置-查询保护分支列表
         * @param {DescribeProtectedBranchesRequest} [describeProtectedBranchesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeProtectedBranches(describeProtectedBranchesRequest?: DescribeProtectedBranchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProtectedBranches200Response> {
            return localVarFp.describeProtectedBranches(describeProtectedBranchesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 管理测试用例
         * @summary 事项关联的测试用例查询
         * @param {DescribeRelatedCaseListRequest} [describeRelatedCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRelatedCaseList(describeRelatedCaseListRequest?: DescribeRelatedCaseListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeRelatedCaseList200Response> {
            return localVarFp.describeRelatedCaseList(describeRelatedCaseListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 版本详情
         * @summary 版本详情查询
         * @param {DescribeReleaseRequest} [describeReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRelease(describeReleaseRequest?: DescribeReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyRelease200Response> {
            return localVarFp.describeRelease(describeReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 版本发布范围
         * @summary 版本发布范围查询
         * @param {DescribeReleaseIssueListRequest} [describeReleaseIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReleaseIssueList(describeReleaseIssueListRequest?: DescribeReleaseIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeReleaseIssueList200Response> {
            return localVarFp.describeReleaseIssueList(describeReleaseIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询项目内版本列表
         * @summary 版本列表查询
         * @param {DescribeReleaseListRequest} [describeReleaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReleaseList(describeReleaseListRequest?: DescribeReleaseListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeReleaseList200Response> {
            return localVarFp.describeReleaseList(describeReleaseListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试报告详情
         * @summary 测试报告详情
         * @param {DeleteReportRequest} [deleteReportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeReport200Response> {
            return localVarFp.describeReport(deleteReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试报告列表
         * @summary 测试报告列表
         * @param {DescribeReportListRequest} [describeReportListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeReportList(describeReportListRequest?: DescribeReportListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeReportList200Response> {
            return localVarFp.describeReportList(describeReportListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询需求关联缺陷列表
         * @summary 需求关联缺陷列表查询
         * @param {DescribeRequirementDefectRelationRequest} [describeRequirementDefectRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRequirementDefectRelation(describeRequirementDefectRelationRequest?: DescribeRequirementDefectRelationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeRequirementDefectRelation200Response> {
            return localVarFp.describeRequirementDefectRelation(describeRequirementDefectRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 需求关联的测试用例列表
         * @summary 需求关联的测试用例列表
         * @param {DescribeRequirementTestCaseListRequest} [describeRequirementTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeRequirementTestCaseList(describeRequirementTestCaseListRequest?: DescribeRequirementTestCaseListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeRequirementTestCaseList200Response> {
            return localVarFp.describeRequirementTestCaseList(describeRequirementTestCaseListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 被引用资源列表查询
         * @summary 被引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceReferencesCited(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeResourceReferencesCited200Response> {
            return localVarFp.describeResourceReferencesCited(describeResourceReferencesCitingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 引用资源列表查询
         * @summary 引用资源列表查询
         * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceReferencesCiting(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeResourceReferencesCiting200Response> {
            return localVarFp.describeResourceReferencesCiting(describeResourceReferencesCitingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组可用资源范围分页查询
         * @summary 权限组可用资源范围分页查询
         * @param {DescribeResourceScopeListOnPolicyRequest} [describeResourceScopeListOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest?: DescribeResourceScopeListOnPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeResourceScopeListOnPolicy200Response> {
            return localVarFp.describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取自己的合并请求列表
         * @summary 合并请求-获取自己的合并请求列表
         * @param {DescribeSelfMergeRequestsRequest} [describeSelfMergeRequestsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSelfMergeRequests(describeSelfMergeRequestsRequest?: DescribeSelfMergeRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeSelfMergeRequests200Response> {
            return localVarFp.describeSelfMergeRequests(describeSelfMergeRequestsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取单个合并请求行评论和改动文件diff行评论
         * @summary 合并请求-获取单个合并请求行评论和改动文件diff行评论
         * @param {DescribeSingeMergeRequestNotesRequest} [describeSingeMergeRequestNotesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest?: DescribeSingeMergeRequestNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeSingeMergeRequestNotes200Response> {
            return localVarFp.describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取当前用户所有SSH公钥
         * @summary 仓库设置-获取当前用户所有SSH公钥
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSshKey(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeSshKey200Response> {
            return localVarFp.describeSshKey(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询子事项列表
         * @summary 子事项列表查询
         * @param {DescribeSubIssueListRequest} [describeSubIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeSubIssueList(describeSubIssueListRequest?: DescribeSubIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeSubIssueList200Response> {
            return localVarFp.describeSubIssueList(describeSubIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 团队信息查询
         * @summary 团队信息查询
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeam(body?: any, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeam200Response> {
            return localVarFp.describeTeam(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询团队管理员
         * @summary 团队管理员查询
         * @param {DescribeTeamAdminMembersRequest} [describeTeamAdminMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamAdminMembers(describeTeamAdminMembersRequest?: DescribeTeamAdminMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamAdminMembers200Response> {
            return localVarFp.describeTeamAdminMembers(describeTeamAdminMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品列表查询
         * @summary 制品列表查询
         * @param {DescribeTeamArtifactsRequest} [describeTeamArtifactsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamArtifacts(describeTeamArtifactsRequest?: DescribeTeamArtifactsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamArtifacts200Response> {
            return localVarFp.describeTeamArtifacts(describeTeamArtifactsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @summary 仓库信息-获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
         * @param {DescribeTeamDepotInfoListRequest} [describeTeamDepotInfoListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamDepotInfoList(describeTeamDepotInfoListRequest?: DescribeTeamDepotInfoListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamDepotInfoList200Response> {
            return localVarFp.describeTeamDepotInfoList(describeTeamDepotInfoListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询企业事项类型列表
         * @summary 企业事项类型列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamIssueTypeList(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamIssueTypeList200Response> {
            return localVarFp.describeTeamIssueTypeList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询团队事项列表
         * @summary 查询团队事项列表
         * @param {DescribeTeamIssuesRequest} [describeTeamIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamIssues(describeTeamIssuesRequest?: DescribeTeamIssuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamIssues200Response> {
            return localVarFp.describeTeamIssues(describeTeamIssuesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过用户 ID 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 ID）
         * @param {DescribeTeamMemberRequest} [describeTeamMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMember(describeTeamMemberRequest?: DescribeTeamMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamMember200Response> {
            return localVarFp.describeTeamMember(describeTeamMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过用户 Email 查询团队成员信息
         * @summary 团队成员信息查询（通过用户 Email）
         * @param {DescribeTeamMemberByEmailRequest} [describeTeamMemberByEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMemberByEmail(describeTeamMemberByEmailRequest?: DescribeTeamMemberByEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamMemberByEmail200Response> {
            return localVarFp.describeTeamMemberByEmail(describeTeamMemberByEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 团队成员列表查询
         * @summary 团队成员列表查询
         * @param {DescribeTeamMembersRequest} [describeTeamMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTeamMembers(describeTeamMembersRequest?: DescribeTeamMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTeamMembers200Response> {
            return localVarFp.describeTeamMembers(describeTeamMembersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务详情
         * @summary 测试任务详情
         * @param {DescribeTestRequest} [describeTestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTest(describeTestRequest?: DescribeTestRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTest200Response> {
            return localVarFp.describeTest(describeTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例详情
         * @summary 测试用例详情
         * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestCase200Response> {
            return localVarFp.describeTestCase(deleteTestCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例分页数据
         * @summary 测试用例列表
         * @param {DescribeTestCaseListRequest} [describeTestCaseListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCaseList(describeTestCaseListRequest?: DescribeTestCaseListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestCaseList200Response> {
            return localVarFp.describeTestCaseList(describeTestCaseListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例分组列表
         * @summary 测试用例分组列表
         * @param {DescribeTestCaseSectionListRequest} [describeTestCaseSectionListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestCaseSectionList(describeTestCaseSectionListRequest?: DescribeTestCaseSectionListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestCaseSectionList200Response> {
            return localVarFp.describeTestCaseSectionList(describeTestCaseSectionListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务关联的缺陷列表
         * @summary 测试任务关联的缺陷列表
         * @param {DescribeTestDefectListRequest} [describeTestDefectListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestDefectList(describeTestDefectListRequest?: DescribeTestDefectListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestDefectList200Response> {
            return localVarFp.describeTestDefectList(describeTestDefectListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试任务列表
         * @summary 测试任务列表
         * @param {DescribeTestListRequest} [describeTestListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestList(describeTestListRequest?: DescribeTestListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestList200Response> {
            return localVarFp.describeTestList(describeTestListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试计划详情
         * @summary 测试计划详情
         * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestRun200Response> {
            return localVarFp.describeTestRun(deleteTestRunRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试计划列表
         * @summary 测试计划列表
         * @param {DescribeTestRunListRequest} [describeTestRunListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeTestRunList(describeTestRunListRequest?: DescribeTestRunListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeTestRunList200Response> {
            return localVarFp.describeTestRunList(describeTestRunListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组列表分页查询
         * @summary 用户组列表分页查询
         * @param {DescribeUserGroupsRequest} [describeUserGroupsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserGroups(describeUserGroupsRequest?: DescribeUserGroupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeUserGroups200Response> {
            return localVarFp.describeUserGroups(describeUserGroupsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询团队成员待交接事项列表
         * @summary 查询团队成员待交接事项列表
         * @param {DescribeUserHandoverIssuesRequest} [describeUserHandoverIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserHandoverIssues(describeUserHandoverIssuesRequest?: DescribeUserHandoverIssuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeUserHandoverIssues200Response> {
            return localVarFp.describeUserHandoverIssues(describeUserHandoverIssuesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目列表查询（已加入的项目）
         * @summary 项目列表查询（已加入的项目）
         * @param {DescribeUserProjectsRequest} [describeUserProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUserProjects(describeUserProjectsRequest?: DescribeUserProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeProjectLabels200Response> {
            return localVarFp.describeUserProjects(describeUserProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户列表查询（根据用户组id分页查询）
         * @summary 用户列表查询（根据用户组id分页查询）
         * @param {DescribeUsersByGroupIdRequest} [describeUsersByGroupIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUsersByGroupId(describeUsersByGroupIdRequest?: DescribeUsersByGroupIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeUsersByGroupId200Response> {
            return localVarFp.describeUsersByGroupId(describeUsersByGroupIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 授权用户列表分页查询（指定资源）
         * @summary 授权用户列表分页查询（指定资源）
         * @param {DescribeUsersOnResourceAndGrantObjectRequest} [describeUsersOnResourceAndGrantObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest?: DescribeUsersOnResourceAndGrantObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeUsersOnResourceAndGrantObject200Response> {
            return localVarFp.describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 事项分解信息
         * @summary 事项分解信息查询
         * @param {DescribeWorkItemSalvageRequest} [describeWorkItemSalvageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWorkItemSalvage(describeWorkItemSalvageRequest?: DescribeWorkItemSalvageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeWorkItemSalvage200Response> {
            return localVarFp.describeWorkItemSalvage(describeWorkItemSalvageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取一个用户在团队内的所有代办事项（即前端页面上个人工作台中的事项列表）
         * @summary 用户在团队内的所有代办事项查询
         * @param {DescribeWorkbenchIssueListRequest} [describeWorkbenchIssueListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWorkbenchIssueList(describeWorkbenchIssueListRequest?: DescribeWorkbenchIssueListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeWorkbenchIssueList200Response> {
            return localVarFp.describeWorkbenchIssueList(describeWorkbenchIssueListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @summary 授权收回，只收回参数指定的授权，已有其它授权不受影响
         * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachFromResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.detachFromResource(detachFromResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @summary 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
         * @param {DetachResourceScopeOnPolicyRequest} [detachResourceScopeOnPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest?: DetachResourceScopeOnPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品版本下载 禁止、解禁
         * @summary 制品版本下载 禁止、解禁
         * @param {ForbiddenArtifactVersionRequest} [forbiddenArtifactVersionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forbiddenArtifactVersion(forbiddenArtifactVersionRequest?: ForbiddenArtifactVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.forbiddenArtifactVersion(forbiddenArtifactVersionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 初始化项目配置方案
         * @summary 项目配置方案初始化
         * @param {InitProjectTemplateRequest} [initProjectTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProjectTemplate(initProjectTemplateRequest?: InitProjectTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.initProjectTemplate(initProjectTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 制品授信清单修改
         * @summary 制品授信清单修改
         * @param {ModifyArtifactCreditRequest} [modifyArtifactCreditRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyArtifactCredit(modifyArtifactCreditRequest?: ModifyArtifactCreditRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyArtifactCredit200Response> {
            return localVarFp.modifyArtifactCredit(modifyArtifactCreditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 指定版本制品的制品属性修改
         * @summary 制品属性修改
         * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyArtifactProperties(modifyArtifactPropertiesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改保护分支规则相关信息
         * @summary 仓库设置-修改保护分支规则相关信息
         * @param {ModifyBranchProtectionRequest} [modifyBranchProtectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyBranchProtection(modifyBranchProtectionRequest?: ModifyBranchProtectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyBranchProtection200Response> {
            return localVarFp.modifyBranchProtection(modifyBranchProtectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 更改保护分支管理员权限
         * @summary 仓库设置-更改保护分支管理员权限
         * @param {ModifyBranchProtectionMemberPermissionRequest} [modifyBranchProtectionMemberPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest?: ModifyBranchProtectionMemberPermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 云账号更新
         * @summary CD 云账号更新
         * @param {ModifyCdCloudAccountRequest} [modifyCdCloudAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdCloudAccount(modifyCdCloudAccountRequest?: ModifyCdCloudAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyCdCloudAccount200Response> {
            return localVarFp.modifyCdCloudAccount(modifyCdCloudAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 主机组修改
         * @summary CD 主机组修改
         * @param {ModifyCdHostServerGroupRequest} [modifyCdHostServerGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdHostServerGroup(modifyCdHostServerGroupRequest?: ModifyCdHostServerGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyCdHostServerGroup200Response> {
            return localVarFp.modifyCdHostServerGroup(modifyCdHostServerGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ CD 部署流程修改
         * @summary CD 部署流程修改
         * @param {ModifyCdPipelineRequest} [modifyCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCdPipeline(modifyCdPipelineRequest?: ModifyCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyCdPipeline200Response> {
            return localVarFp.modifyCdPipeline(modifyCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 使用、取消使用仓库规范
         * @summary 仓库设置-使用、取消使用仓库规范
         * @param {ModifyChooseDepotSpecRequest} [modifyChooseDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyChooseDepotSpec(modifyChooseDepotSpecRequest?: ModifyChooseDepotSpecRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyChooseDepotSpec200Response> {
            return localVarFp.modifyChooseDepotSpec(modifyChooseDepotSpecRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 关闭合并请求
         * @summary 合并请求-关闭合并请求
         * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCloseMR(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyCloseMR(modifyCloseMRRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 自定义构建节点启用、禁用
         * @summary 自定义构建节点启用、禁用
         * @param {ModifyCodingCIAgentEnableRequest} [modifyCodingCIAgentEnableRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest?: ModifyCodingCIAgentEnableRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建计划修改
         * @summary 构建计划修改
         * @param {ModifyCodingCIJobRequest} [modifyCodingCIJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCodingCIJob(modifyCodingCIJobRequest?: ModifyCodingCIJobRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyCodingCIJob(modifyCodingCIJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库默认分支
         * @summary 仓库设置-修改仓库默认分支
         * @param {ModifyDefaultBranchRequest} [modifyDefaultBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDefaultBranch(modifyDefaultBranchRequest?: ModifyDefaultBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDefaultBranch(modifyDefaultBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改缺陷所属的需求
         * @summary 缺陷所属的需求修改
         * @param {ModifyDefectRelatedRequirementRequest} [modifyDefectRelatedRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest?: ModifyDefectRelatedRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改部门信息(部门名，移动位置)
         * @summary 部门信息修改
         * @param {ModifyDepartmentRequest} [modifyDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartment(modifyDepartmentRequest?: ModifyDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepartment200Response> {
            return localVarFp.modifyDepartment(modifyDepartmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部门负责人管理
         * @summary 部门负责人管理
         * @param {ModifyDepartmentAssigneeRequest} [modifyDepartmentAssigneeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartmentAssignee(modifyDepartmentAssigneeRequest?: ModifyDepartmentAssigneeRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepartmentAssignee(modifyDepartmentAssigneeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部门成员管理
         * @summary 部门成员管理
         * @param {ModifyDepartmentMemberRequest} [modifyDepartmentMemberRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepartmentMember(modifyDepartmentMemberRequest?: ModifyDepartmentMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepartmentMember(modifyDepartmentMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库描述
         * @summary 仓库信息-修改仓库描述
         * @param {ModifyDepotDescriptionRequest} [modifyDepotDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotDescription(modifyDepotDescriptionRequest?: ModifyDepotDescriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepotDescription(modifyDepotDescriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改 git 仓库文件推送规则
         * @summary 仓库设置-修改git仓库文件推送规则
         * @param {ModifyDepotFilePushRuleRequest} [modifyDepotFilePushRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotFilePushRule(modifyDepotFilePushRuleRequest?: ModifyDepotFilePushRuleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepotFilePushRule200Response> {
            return localVarFp.modifyDepotFilePushRule(modifyDepotFilePushRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改 git 仓库特权者文件推送权限
         * @summary 仓库设置-修改 git 仓库特权者文件推送权限
         * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepotFilePushRuleDenyPrivilege200Response> {
            return localVarFp.modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改、新增仓库级别的仓库规范
         * @summary 仓库设置-修改、新增仓库级别的仓库规范
         * @param {ModifyDepotLevelDepotSpecRequest} [modifyDepotLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest?: ModifyDepotLevelDepotSpecRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepotLevelDepotSpec200Response> {
            return localVarFp.modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库名称
         * @summary 仓库信息-修改仓库名称
         * @param {ModifyDepotNameRequest} [modifyDepotNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotName(modifyDepotNameRequest?: ModifyDepotNameRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepotName200Response> {
            return localVarFp.modifyDepotName(modifyDepotNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库推送设置
         * @summary 仓库设置-修改仓库推送设置
         * @param {ModifyDepotPushSettingRequest} [modifyDepotPushSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotPushSetting(modifyDepotPushSettingRequest?: ModifyDepotPushSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyDepotPushSetting200Response> {
            return localVarFp.modifyDepotPushSetting(modifyDepotPushSettingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库容量
         * @summary 仓库信息-修改仓库容量
         * @param {ModifyDepotQuotaRequest} [modifyDepotQuotaRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotQuota(modifyDepotQuotaRequest?: ModifyDepotQuotaRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepotQuota(modifyDepotQuotaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库设置
         * @summary 仓库设置-修改仓库设置
         * @param {ModifyDepotSettingsRequest} [modifyDepotSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotSettings(modifyDepotSettingsRequest?: ModifyDepotSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepotSettings(modifyDepotSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库是否开源设置
         * @summary 仓库设置-修改仓库是否开源设置
         * @param {ModifyDepotSharedSettingRequest} [modifyDepotSharedSettingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyDepotSharedSetting(modifyDepotSharedSettingRequest?: ModifyDepotSharedSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyDepotSharedSetting(modifyDepotSharedSettingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 将某次提交cherry-pick到指定分支
         * @summary Git提交-将某次提交cherry-pick到指定分支
         * @param {ModifyGitCherryPickRequest} [modifyGitCherryPickRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCherryPick(modifyGitCherryPickRequest?: ModifyGitCherryPickRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitCherryPick(modifyGitCherryPickRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 还原某次提交
         * @summary Git提交-还原某次提交
         * @param {ModifyGitCommitRevertRequest} [modifyGitCommitRevertRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCommitRevert(modifyGitCommitRevertRequest?: ModifyGitCommitRevertRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitCommitRevert(modifyGitCommitRevertRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改提交对应的流水线状态
         * @summary Git提交-修改提交对应的流水线状态
         * @param {ModifyGitCommitStatusRequest} [modifyGitCommitStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitCommitStatus(modifyGitCommitStatusRequest?: ModifyGitCommitStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitCommitStatus(modifyGitCommitStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 仓库归档
         * @summary 仓库设置-仓库归档
         * @param {ModifyGitDepotArchiveRequest} [modifyGitDepotArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitDepotArchive(modifyGitDepotArchiveRequest?: ModifyGitDepotArchiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitDepotArchive(modifyGitDepotArchiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 仓库解除归档
         * @summary 仓库设置-仓库解除归档
         * @param {ModifyGitDepotUnarchiveRequest} [modifyGitDepotUnarchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest?: ModifyGitDepotUnarchiveRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库某文件
         * @summary Git提交-修改仓库某文件
         * @param {ModifyGitFilesRequest} [modifyGitFilesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitFiles(modifyGitFilesRequest?: ModifyGitFilesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyGitFiles200Response> {
            return localVarFp.modifyGitFiles(modifyGitFilesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 将源分支的改动合并到目标分支
         * @summary 合并请求-将源分支的改动合并到目标分支
         * @param {ModifyGitMergeBranchRequest} [modifyGitMergeBranchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeBranch(modifyGitMergeBranchRequest?: ModifyGitMergeBranchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyGitMergeBranch200Response> {
            return localVarFp.modifyGitMergeBranch(modifyGitMergeBranchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改合并请求的标题和描述信息
         * @summary 合并请求-修改合并请求的标题和描述信息
         * @param {ModifyGitMergeRequestRequest} [modifyGitMergeRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeRequest(modifyGitMergeRequestRequest?: ModifyGitMergeRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyGitMergeRequest200Response> {
            return localVarFp.modifyGitMergeRequest(modifyGitMergeRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 合并请求中的源分支进行rebase操作
         * @summary 合并请求-合并请求中的源分支进行rebase操作
         * @param {ModifyGitMergeRequestRebaseRequest} [modifyGitMergeRequestRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest?: ModifyGitMergeRequestRebaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ git变基操作
         * @summary 仓库信息-git变基操作
         * @param {ModifyGitRebaseRequest} [modifyGitRebaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitRebase(modifyGitRebaseRequest?: ModifyGitRebaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitRebase(modifyGitRebaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改仓库版本信息
         * @summary 版本信息-修改仓库版本信息
         * @param {ModifyGitReleaseRequest} [modifyGitReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitRelease(modifyGitReleaseRequest?: ModifyGitReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyGitRelease(modifyGitReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 仓库转移至同团队下的其他项目中
         * @summary 仓库信息-仓库转移至同团队下的其他项目中
         * @param {ModifyGitTransferRequest} [modifyGitTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyGitTransfer(modifyGitTransferRequest?: ModifyGitTransferRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyGitTransfer200Response> {
            return localVarFp.modifyGitTransfer(modifyGitTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改事项
         * @summary 事项修改
         * @param {ModifyIssueRequest} [modifyIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssue(modifyIssueRequest?: ModifyIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyIssue200Response> {
            return localVarFp.modifyIssue(modifyIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改事项评论
         * @summary 事项评论修改
         * @param {ModifyIssueCommentRequest} [modifyIssueCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueComment(modifyIssueCommentRequest?: ModifyIssueCommentRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyIssueComment(modifyIssueCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改事项描述
         * @summary 事项描述修改
         * @param {ModifyIssueDescriptionRequest} [modifyIssueDescriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueDescription(modifyIssueDescriptionRequest?: ModifyIssueDescriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyIssueDescription(modifyIssueDescriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改事项父需求
         * @summary 事项父需求修改
         * @param {ModifyIssueParentRequirementRequest} [modifyIssueParentRequirementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssueParentRequirement(modifyIssueParentRequirementRequest?: ModifyIssueParentRequirementRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyIssueParentRequirement(modifyIssueParentRequirementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改迭代
         * @summary 迭代修改
         * @param {ModifyIterationRequest} [modifyIterationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIteration(modifyIterationRequest?: ModifyIterationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyIteration200Response> {
            return localVarFp.modifyIteration(modifyIterationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改迭代状态
         * @summary 修改迭代状态
         * @param {ModifyIterationStatusRequest} [modifyIterationStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIterationStatus(modifyIterationStatusRequest?: ModifyIterationStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyIterationStatus200Response> {
            return localVarFp.modifyIterationStatus(modifyIterationStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 执行合并
         * @summary 合并信息-执行合并
         * @param {ModifyMergeMRRequest} [modifyMergeMRRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeMR(modifyMergeMRRequest?: ModifyMergeMRRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyMergeMR200Response> {
            return localVarFp.modifyMergeMR(modifyMergeMRRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改合并请求基础设置
         * @summary 仓库设置-修改合并请求基础设置
         * @param {ModifyMergeRequestBasicSettingsRequest} [modifyMergeRequestBasicSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest?: ModifyMergeRequestBasicSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改合并请求合并提交消息模版
         * @summary 仓库设置-修改合并请求合并提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改合并请求合并压缩提交消息模版
         * @summary 仓库设置-修改合并请求合并压缩提交消息模版
         * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 权限组修改
         * @summary 权限组修改
         * @param {ModifyPolicyRequest} [modifyPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPolicy(modifyPolicyRequest?: ModifyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyPolicy200Response> {
            return localVarFp.modifyPolicy(modifyPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目信息修改
         * @summary 项目信息修改
         * @param {ModifyProjectRequest} [modifyProjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProject(modifyProjectRequest?: ModifyProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyProject(modifyProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目公告更新
         * @summary 项目公告更新
         * @param {ModifyProjectAnnouncementRequest} [modifyProjectAnnouncementRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProjectAnnouncement(modifyProjectAnnouncementRequest?: ModifyProjectAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyProjectAnnouncement200Response> {
            return localVarFp.modifyProjectAnnouncement(modifyProjectAnnouncementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目标签修改
         * @summary 项目标签修改
         * @param {ModifyProjectLabelRequest} [modifyProjectLabelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyProjectLabel(modifyProjectLabelRequest?: ModifyProjectLabelRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyProjectLabel200Response> {
            return localVarFp.modifyProjectLabel(modifyProjectLabelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改版本
         * @summary 版本修改
         * @param {ModifyReleaseRequest} [modifyReleaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyRelease(modifyReleaseRequest?: ModifyReleaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyRelease200Response> {
            return localVarFp.modifyRelease(modifyReleaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改、新增团队级别的仓库规范
         * @summary 仓库设置-修改、新增团队级别的仓库规范
         * @param {ModifyTeamLevelDepotSpecRequest} [modifyTeamLevelDepotSpecRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest?: ModifyTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTeamLevelDepotSpec200Response> {
            return localVarFp.modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过用户 ID 团队成员锁定
         * @summary 团队成员锁定
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过用户 ID 解锁团队成员
         * @summary 团队成员解锁
         * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例修改
         * @summary 测试用例修改
         * @param {ModifyTestCaseRequest} [modifyTestCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestCase(modifyTestCaseRequest?: ModifyTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestCase200Response> {
            return localVarFp.modifyTestCase(modifyTestCaseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试用例分组修改
         * @summary 测试用例分组修改
         * @param {ModifyTestCaseSectionRequest} [modifyTestCaseSectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestCaseSection(modifyTestCaseSectionRequest?: ModifyTestCaseSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestCaseSection200Response> {
            return localVarFp.modifyTestCaseSection(modifyTestCaseSectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 测试计划修改
         * @summary 测试计划修改
         * @param {ModifyTestRunRequest} [modifyTestRunRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyTestRun(modifyTestRunRequest?: ModifyTestRunRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyTestRun200Response> {
            return localVarFp.modifyTestRun(modifyTestRunRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 项目集工作项分解/取消分解到项目中的事项
         * @summary 项目集工作项分解&取消分解到项目中的事项
         * @param {ModifyWorkItemSplitIssuesRequest} [modifyWorkItemSplitIssuesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest?: ModifyWorkItemSplitIssuesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 批量规划迭代
         * @summary 迭代批量规划
         * @param {PlanIterationIssueRequest} [planIterationIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planIterationIssue(planIterationIssueRequest?: PlanIterationIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.planIterationIssue(planIterationIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 将指定版本的制品的发布状态调整为已发布
         * @summary 制品版本发布
         * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseArtifactVersion(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.releaseArtifactVersion(describeArtifactChecksumsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部署流程重排序
         * @summary 部署流程重排序
         * @param {ReorderCdPipelinesRequest} [reorderCdPipelinesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderCdPipelines(reorderCdPipelinesRequest?: ReorderCdPipelinesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderCdPipelines200Response> {
            return localVarFp.reorderCdPipelines(reorderCdPipelinesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @summary 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
         * @param {SetGrantToResourceRequest} [setGrantToResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantToResource(setGrantToResourceRequest?: SetGrantToResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.setGrantToResource(setGrantToResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 资源权限判定策略设置
         * @summary 资源权限判定策略设置
         * @param {SetPredicatePolicyOnResourceRequest} [setPredicatePolicyOnResourceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest?: SetPredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建停止
         * @summary 构建停止
         * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.stopCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 部署流程触发
         * @summary 部署流程触发
         * @param {TriggerCdPipelineRequest} [triggerCdPipelineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerCdPipeline(triggerCdPipelineRequest?: TriggerCdPipelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<TriggerCdPipeline200Response> {
            return localVarFp.triggerCdPipeline(triggerCdPipelineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 构建触发
         * @summary 构建触发
         * @param {TriggerCodingCIBuildRequest} [triggerCodingCIBuildRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerCodingCIBuild(triggerCodingCIBuildRequest?: TriggerCodingCIBuildRequest, options?: RawAxiosRequestConfig): AxiosPromise<TriggerCodingCIBuild200Response> {
            return localVarFp.triggerCodingCIBuild(triggerCodingCIBuildRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 用户组更新
         * @summary 用户组更新
         * @param {UpdateUserGroupByIdRequest} [updateUserGroupByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGroupById(updateUserGroupByIdRequest?: UpdateUserGroupByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.updateUserGroupById(updateUserGroupByIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * ✨ 测试计划归档
     * @summary 测试计划归档
     * @param {ArchiveTestRunRequest} [archiveTestRunRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public archiveTestRun(archiveTestRunRequest?: ArchiveTestRunRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).archiveTestRun(archiveTestRunRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 为指定权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
     * @summary 权限组添加可用的资源，原有其它资源不受影响，若已存在的资源不再进行追加
     * @param {AttachResourceScopeToPolicyRequest} [attachResourceScopeToPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest?: AttachResourceScopeToPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).attachResourceScopeToPolicy(attachResourceScopeToPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
     * @summary 授权追加，原有其它授权不受影响，若授权已存在不再进行追加
     * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attachToResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).attachToResource(detachFromResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 绑定 CD 应用到项目
     * @summary 绑定 CD 应用到项目
     * @param {BindCdApplicationToProjectRequest} [bindCdApplicationToProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bindCdApplicationToProject(bindCdApplicationToProjectRequest?: BindCdApplicationToProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).bindCdApplicationToProject(bindCdApplicationToProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 关联外部仓库
     * @summary 外部仓库关联
     * @param {BoundExternalDepotRequest} [boundExternalDepotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public boundExternalDepot(boundExternalDepotRequest?: BoundExternalDepotRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).boundExternalDepot(boundExternalDepotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 取消执行中的 CD 部署流程
     * @summary CD 部署流程取消执行
     * @param {CancelCdPipelineRequest} [cancelCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cancelCdPipeline(cancelCdPipelineRequest?: CancelCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cancelCdPipeline(cancelCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 清理构建计划缓存
     * @summary 构建计划缓存清理
     * @param {ClearCodingCIJobCacheRequest} [clearCodingCIJobCacheRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clearCodingCIJobCache(clearCodingCIJobCacheRequest?: ClearCodingCIJobCacheRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clearCodingCIJobCache(clearCodingCIJobCacheRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品授信清单创建
     * @summary 制品授信清单创建
     * @param {CreateArtifactCreditRequest} [createArtifactCreditRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createArtifactCredit(createArtifactCreditRequest?: CreateArtifactCreditRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createArtifactCredit(createArtifactCreditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品属性新增（指定版本）
     * @summary 制品属性新增（指定版本）
     * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createArtifactProperties(modifyArtifactPropertiesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品仓库创建
     * @summary 制品仓库创建
     * @param {CreateArtifactRepositoryRequest} [createArtifactRepositoryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createArtifactRepository(createArtifactRepositoryRequest?: CreateArtifactRepositoryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createArtifactRepository(createArtifactRepositoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 生成附件预上传信息
     * @summary 附件预上传信息生成
     * @param {CreateAttachmentPrepareSignUrlRequest} [createAttachmentPrepareSignUrlRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest?: CreateAttachmentPrepareSignUrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAttachmentPrepareSignUrl(createAttachmentPrepareSignUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Git仓库创建二进制文件，文件总大小不能超过10Mb
     * @summary Git文件-Git仓库创建二进制文件
     * @param {CreateBinaryFilesRequest} [createBinaryFilesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBinaryFiles(createBinaryFilesRequest?: CreateBinaryFilesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBinaryFiles(createBinaryFilesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增代码保护规则
     * @summary 仓库设置-新增代码保护规则
     * @param {CreateBranchProtectionRequest} [createBranchProtectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBranchProtection(createBranchProtectionRequest?: CreateBranchProtectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBranchProtection(createBranchProtectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增保护分支规则管理员
     * @summary 仓库设置-新增保护分支规则管理员
     * @param {CreateBranchProtectionMemberRequest} [createBranchProtectionMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBranchProtectionMember(createBranchProtectionMemberRequest?: CreateBranchProtectionMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBranchProtectionMember(createBranchProtectionMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例添加测试结果
     * @summary 测试用例添加测试结果
     * @param {CreateCaseResultRequest} [createCaseResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCaseResult(createCaseResultRequest?: CreateCaseResultRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCaseResult(createCaseResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 云账号添加
     * @summary CD 云账号添加
     * @param {CreateCdCloudAccountRequest} [createCdCloudAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCdCloudAccount(createCdCloudAccountRequest?: CreateCdCloudAccountRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCdCloudAccount(createCdCloudAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组添加
     * @summary CD 主机组添加
     * @param {CreateCdHostServerGroupRequest} [createCdHostServerGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCdHostServerGroup(createCdHostServerGroupRequest?: CreateCdHostServerGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCdHostServerGroup(createCdHostServerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 部署流程创建
     * @summary CD 部署流程创建
     * @param {CreateCdPipelineRequest} [createCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCdPipeline(createCdPipelineRequest?: CreateCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCdPipeline(createCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 任务执行
     * @summary CD 任务执行
     * @param {CreateCdTaskRequest} [createCdTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCdTask(createCdTaskRequest?: CreateCdTaskRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCdTask(createCdTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建构建计划
     * @summary 构建计划创建
     * @param {CreateCodingCIJobRequest} [createCodingCIJobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCodingCIJob(createCodingCIJobRequest?: CreateCodingCIJobRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCodingCIJob(createCodingCIJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据团队模版创建构建计划
     * @summary 构建计划-根据团队模版创建
     * @param {CreateCodingCIJobByTeamTemplateRequest} [createCodingCIJobByTeamTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest?: CreateCodingCIJobByTeamTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCodingCIJobByTeamTemplate(createCodingCIJobByTeamTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Coding项目创建
     * @summary 项目创建
     * @param {CreateCodingProjectRequest} [createCodingProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCodingProject(createCodingProjectRequest?: CreateCodingProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCodingProject(createCodingProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部门创建
     * @summary 部门创建
     * @param {CreateDepartmentRequest} [createDepartmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDepartment(createDepartmentRequest?: CreateDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDepartment(createDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据模板创建仓库
     * @summary 仓库信息-根据模板创建仓库
     * @param {CreateDepotByTemplateRequest} [createDepotByTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDepotByTemplate(createDepotByTemplateRequest?: CreateDepotByTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDepotByTemplate(createDepotByTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增 git 仓库文件推送规则
     * @summary 仓库设置-新增git仓库文件推送规则
     * @param {CreateDepotFilePushRuleRequest} [createDepotFilePushRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDepotFilePushRule(createDepotFilePushRuleRequest?: CreateDepotFilePushRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDepotFilePushRule(createDepotFilePushRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增git仓库文件推送规则特权者
     * @summary 仓库设置-新增git仓库文件推送规则特权者
     * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDepotFilePushRulePrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ \"    文件上传        1. 获取预签名URL          Action： 固定为 DescribePreSignUploadUrl   ProjectName: 项目名称   ContentType: 内容类型，和web端的文件上传时content-type是一样的。可以参考web端上传文件时，Http Header: Content-Type   FolderType :文件夹类型，0: 常规文件夹, 1:隐藏文件夹。 如果是用于项目协同上传附件的场景，配置为1；如果是上传到文件网盘则配置为0。   FolderId:  若上传项目协同附件场景时，不需要配置或默认为0即可。若用于上传到文件网盘，可以设置文件夹ID, 用于文件存放位置，ID值通过  open api 【创建文件夹】获取。   FileName: 保存的文件名。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe***     {       \"Action\":\"DescribePreSignUploadUrl\",       \"ProjectName\":\"zhishiguanli\",       \"FolderId\":0,       \"FolderType\":1,       \"FileName\": \"20220727_1.csv\",       \"ContentType\": \"image/jpeg\"     }      响应数据:   UploadLink: 上传文件的URL   StorageKey: 上传到存储的文件路径   AuthToken: 用于校验身份数据的token，后续接口中使用   headers: 上传时需要的token信息          ```     {       \"Response\": {         \"RequestId\": \"99b1fbfb-8477-44b3-b19f-35acbcdbdf77\",         \"Data\": {           \"UploadLink\": \"https://coding-net-production-file-1257242599.cos.ap-shanghai.myqcloud.com/c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID7B14xvfnJxWtNpV95c1sAqIwms4_GnHMa-eCuULWfvXWTqp0qv8czbirX1BlXEXd%26q-sign-time%3D1661352589%3B1661354389%26q-key-time%3D1661352589%3B1661354389%26q-header-list%3Dhost%26q-url-param-list%3D%26q-signature%3D337c3118dd1385d33f5ada4c0492755ac7d00419\",           \"StorageKey\": \"c69883ec-4ae6-45eb-a28d-b73dcfa83d02.csv\",           \"Headers\": \"{\\\"x-cos-security-token\\\":\\\"0ZVlbeAyb6cqcbI2HcZg75xppfMACLPac9f0c5517a5d13d9731b0adb708c2ecdhK1-UdtMEqc-XpsQW5v1bB1BGeHXMlwutOM24SaUfX6lSP531QDfVrKJzLl8-NpCgKZfUE_-_Pg29lfqSvWpbd0D-4pENoBL5IDhkXO1RmmDncvxbwm_aMGRMlPL3YwQEyjPGv8KJ36ZUDm1k5ERnKYf2_OllQtoW5lSeRRnvCQUd7cAvvzSIl6WD-VxXJ2N9jX5Z_bh6B9zFXtCWjr0is550-QaLSM32V0NP0wPV4bBy9PwNLA32gxhsf24dfUZZsBZZVF67lfFGWgcK7SuZRrE_QPiEd9L4et-4KxBj4pXsAxCTWmATrcAonNq6xJ-\\\"}\",           \"AuthToken\": \"819321faa15086676c9c474b8823d6ce67aa4ec907a4e8a37fa396f990bd610c\"         }       }     }     ```                         2. 上传文件CreateFile     这个步骤需要客户端自己完成。     上传URL 可以参考 项目协同中描述内容中的上传文件的 COS URL。          2.1 COS上传   参考脚本如下:   #!/bin/bash          file=本地文件路径     storageKey=返回的StorageKey     url=https://域名/${storageKey}               # 腾讯云COS上传 curl, 注意Authorization值为sign参数，经过urldecode转化后的值。x-cos-security-token 使用 响应中的Headers中返回的值，          curl -X PUT \"${url}\" \\     -H \'Authorization:q-sign-algorithm=sha1&q-ak=AKIDr0xilQrTFEUhvpLvJ9Ro3Ds_REhKTtYv-dXFbNBY8w1aDZR7rpUNPq6hXn_SdANN&q-sign-time=1661351394;1661353194&q-key-time=1661351394;1661353194&q-header-list=host&q-url-param-list=&q-signature=2574959eebb2ddf7dd5e6e19f30126c7a63cec58\' \\     -H \'x-cos-security-token:0ZVlbeAyb6cqcbI2HcZg75xppfMACLPaba476ee7278aba618b8794dcf090c81fhK1-UdtMEqc-XpsQW5v1bHRl8XcitKZd-0CGmDfln5OqFJigfAursov8MRS8h_abNT0Bns7F7D5tN26wXra6oBlvhxZ4wU11Zk2peuDXq4eWSUWOCtvf-3IaxoCs2KEwMtSFcds1byn_00Zj2YxG8ajHQrVT6Gtry9PW3ULfNe-YPpWaX_XArXpoyjWuaXpBjIFvEhR5sB0gGSTtyXhf9S6wWJAisNlwvOls5xAdnNRHJWyt8Td_f-Lc6yYIXV-aD9ZoGyl5NEQcxEip7GQRtb-p8QD9MG_rfYsJiQ0blMGQQGzexo7YHRhRTws6dlXU\' \\     -H \'user-agent:tencentcloud-cos-postman\' \\     -H \'cosclientagent:cos_mc_v4\' \\     -H \'cosclientip:219.136.173.47\' -T \"${file}\"                    2.2 minio上传     minio 上传脚本DEMO如下：     bucket=file-storage     file=\'～/Downloads/测试简单格式1.md (2).zip\'          # 测试导入1.zip          storageKey=c5318506-8807-4612-9ad8-d751c863983d.zip     s3_key=***     s3_secret=***     host=minio.nh51daup.dev.coding.io          resource=\"/${bucket}/${storageKey}\"          # content_type=\"application/octet-stream\"          content_type=\"application/zip\"     date=`date -R`     _signature=\"PUT\\n\\n${content_type}\\n${date}\\n${resource}\"     signature=`echo -en ${_signature} | openssl sha1 -hmac ${s3_secret} -binary | base64`          # minio文件上传 curl 命令          curl -X PUT -T \"${file}\" \\   -H \"Host: ${host}\" \\   -H \"Date: ${date}\" \\   -H \"Content-Type: ${content_type}\" \\   -H \"Authorization: AWS ${s3_key}:${signature}\" \\     http://${host}${resource}          3. 保存文件   StorageKey: 获取预签名URL接口返回的 StorageKey   AuthToken: 获取预签名URL接口返回的 AuthToken          POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d**ab          {       \"Action\":\"CreateFile\",       \"StorageKey\": \"2bdb7eea-57b4-495d-a5d0-67446822cea5.csv\",       \"AuthToken\": \"76ee1e30ef6df0552f0bd939f1f0359510d60d1806028f5c64fa31c116cf3f22\"     }         响应数据格式:   Id: 保存后的文件ID。   Name: 保存后的文件名称          ```     {       \"Response\": {         \"RequestId\": \"9958d6b7-ead6-4674-9ae8-21cd3054282b\",         \"Data\": {           \"Id\": 28909581,           \"Name\": \"20220727_1.csv\"         }       }     }     ```                    4. 创建事项DEMO     更详细参数说明参考open api文档   ProjectName: 项目名称     Name： 事项名称   FileIds: 数组类型，CreateFile 后响应的ID列表               POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9e53a2**e0ddc57ab          ```     {       \"Action\":\"CreateIssue\",       \"ProjectName\":\"zhishiguanli\",       \"Type\":\"DEFECT\",       \"Name\":\"需求清221101\",       \"Priority\":\"0\",       \"FileIds\":[28909581]     }     ```               4.1 项目协同需求描述图片同步方案          ## 方案一          需求系统在通过 OpenAPI 写入 CODING 需求时，通过正则方式提取所有图片，调用 CODING OpenAPI 上传图片到文件网盘，再替换需求内图片地址。     方案前提：     需求系统展示需求数据来源客户需求系统。     具体步骤：          1. 需求系统创建或更新图片时，调用 COIDNG 项目协同创建或编辑 OpenAPI     2. 获取需求系统需求描述     3. 正则提取图片地址     4. 调用 CODING OpenAPI 上传图片到文件网盘，获取到文件 ID     5. 通过文件 ID 和项目 ID 拼接成 CODING 图片相对地址，/api/project/{projectId}/files/{imageFileId}/imagePreview     6. 保存到 CODING 系统前，通过字符替换原图片地址为/api/project/{projectId}/files/{imageFileId}/imagePreview     7. 完成          ## 方案二          CODING 侧在项目协同 OpenAPI 创建或者编辑需求时，将外站图片地址转存（或者不过滤）。          ## 结论          方案一，无需依赖 CODING 更新，可直接开始。     方案二，需要依赖 CODING 更新，正在评估预计时间。          5. 创建文件夹     该接口可用于文件网盘中创建文件夹。   ProjectName: 项目名称   FoldName: 文件夹名称   ParentId: 父文件夹ID,如果是根路径，传 0。     POST https://e.coding.net/open-api   Accept: application/json   Authorization: token 79dfe1d9**a6e0ddc57ab          ```     {       \"Action\":\"CreateFolder\",       \"ProjectName\":\"zhishiguanli\",       \"FoldName\": \"Hello-sub-test-1\",       \"ParentId\": 0     }     ```          响应：          ```     {       \"Response\": {         \"RequestId\": \"e48d9d36-7473-4fac-b005-6fdc46afa69f\",         \"Data\": {           \"Id\": 28909737,           \"Name\": \"Hello-sub-test-1\"         }       }     }     ```       \"
     * @summary 文件创建
     * @param {CreateFileRequest} [createFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createFile(createFileRequest?: CreateFileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createFile(createFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 文件夹创建
     * @summary 文件夹创建
     * @param {CreateFolderRequest} [createFolderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createFolder(createFolderRequest?: CreateFolderRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createFolder(createFolderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用于代码仓库新建分支
     * @summary 仓库分支-用于代码仓库新建分支
     * @param {CreateGitBranchRequest} [createGitBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitBranch(createGitBranchRequest?: CreateGitBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitBranch(createGitBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建一次提交
     * @summary Git提交-创建一次提交
     * @param {CreateGitCommitRequest} [createGitCommitRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitCommit(createGitCommitRequest?: CreateGitCommitRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitCommit(createGitCommitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 为某次提交创建一条评论
     * @summary Git提交-为某次提交创建一条评论
     * @param {CreateGitCommitCommentRequest} [createGitCommitCommentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitCommitComment(createGitCommitCommentRequest?: CreateGitCommitCommentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitCommitComment(createGitCommitCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建提交注释,注意：对于 NotesRef 参数建议默认为空，因为 git 会使用默认的 ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的 ref 来保存您的 git note，有可能会覆盖您原有的 ref。
     * @summary Git提交-创建提交注释。注意：对于 NotesRef 参数建议默认为空，因为git会使用默认的ref ：refs/notes/commits，如果填了这个参数，会用这个参数指定的ref来保存您的git note，有可能会覆盖您原有的ref。
     * @param {CreateGitCommitNoteRequest} [createGitCommitNoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitCommitNote(createGitCommitNoteRequest?: CreateGitCommitNoteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitCommitNote(createGitCommitNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新建部署公钥
     * @summary 仓库设置-新建部署公钥
     * @param {CreateGitDeployKeyRequest} [createGitDeployKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitDeployKey(createGitDeployKeyRequest?: CreateGitDeployKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitDeployKey(createGitDeployKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建代码仓库
     * @summary 仓库信息-创建代码仓库
     * @param {CreateGitDepotRequest} [createGitDepotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitDepot(createGitDepotRequest?: CreateGitDepotRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitDepot(createGitDepotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建仓库文件
     * @summary Git文件-创建仓库文件
     * @param {CreateGitFilesRequest} [createGitFilesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitFiles(createGitFilesRequest?: CreateGitFilesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitFiles(createGitFilesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建git合并请求
     * @summary 合并请求-创建git合并请求
     * @param {CreateGitMergeReqRequest} [createGitMergeReqRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitMergeReq(createGitMergeReqRequest?: CreateGitMergeReqRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitMergeReq(createGitMergeReqRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建 Git 合并请求mr
     * @summary 合并请求-创建Git合并请求mr
     * @param {CreateGitMergeRequestRequest} [createGitMergeRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitMergeRequest(createGitMergeRequestRequest?: CreateGitMergeRequestRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitMergeRequest(createGitMergeRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建标签保护规则
     * @summary 仓库设置-创建标签保护规则
     * @param {CreateGitProtectedTagRuleRequest} [createGitProtectedTagRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitProtectedTagRule(createGitProtectedTagRuleRequest?: CreateGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitProtectedTagRule(createGitProtectedTagRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 批量创建标签保护规则
     * @summary 仓库设置-批量创建标签保护规则
     * @param {CreateGitProtectedTagRulesRequest} [createGitProtectedTagRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitProtectedTagRules(createGitProtectedTagRulesRequest?: CreateGitProtectedTagRulesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitProtectedTagRules(createGitProtectedTagRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新建 git 版本
     * @summary 版本信息-新建git版本
     * @param {CreateGitReleaseRequest} [createGitReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitRelease(createGitReleaseRequest?: CreateGitReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitRelease(createGitReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建标签
     * @summary 标签信息-创建标签
     * @param {CreateGitTagRequest} [createGitTagRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGitTag(createGitTagRequest?: CreateGitTagRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGitTag(createGitTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建事项
     * @summary 事项创建
     * @param {CreateIssueRequest} [createIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIssue(createIssueRequest?: CreateIssueRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIssue(createIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 添加前置事项
     * @summary 前置事项添加
     * @param {CreateIssueBlockRequest} [createIssueBlockRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIssueBlock(createIssueBlockRequest?: CreateIssueBlockRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIssueBlock(createIssueBlockRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建事项评论
     * @summary 事项评论创建
     * @param {CreateIssueCommentRequest} [createIssueCommentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIssueComment(createIssueCommentRequest?: CreateIssueCommentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIssueComment(createIssueCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建事项模块
     * @summary 事项模块创建
     * @param {CreateIssueModuleRequest} [createIssueModuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIssueModule(createIssueModuleRequest?: CreateIssueModuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIssueModule(createIssueModuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 登记工时
     * @summary 工时登记
     * @param {CreateIssueWorkHoursRequest} [createIssueWorkHoursRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIssueWorkHours(createIssueWorkHoursRequest?: CreateIssueWorkHoursRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIssueWorkHours(createIssueWorkHoursRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建迭代
     * @summary 迭代创建
     * @param {CreateIterationRequest} [createIterationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIteration(createIterationRequest?: CreateIterationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIteration(createIterationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 导入团队成员SSH公钥
     * @summary 仓库设置-导入团队成员SSH公钥
     * @param {CreateMemberSshKeyRequest} [createMemberSshKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMemberSshKey(createMemberSshKeyRequest?: CreateMemberSshKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMemberSshKey(createMemberSshKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建合并请求行评论和改动文件diff行评论
     * @summary 合并请求-创建合并请求行评论和改动文件diff行评论
     * @param {CreateMergeRequestNoteRequest} [createMergeRequestNoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMergeRequestNote(createMergeRequestNoteRequest?: CreateMergeRequestNoteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMergeRequestNote(createMergeRequestNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增合并请求评审者
     * @summary 合并请求-新增合并请求评审者
     * @param {CreateMergeRequestReviewerRequest} [createMergeRequestReviewerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMergeRequestReviewer(createMergeRequestReviewerRequest?: CreateMergeRequestReviewerRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMergeRequestReviewer(createMergeRequestReviewerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组创建
     * @summary 权限组创建
     * @param {CreatePolicyRequest} [createPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPolicy(createPolicyRequest?: CreatePolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPolicy(createPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集创建
     * @summary 项目集创建
     * @param {CreateProgramRequest} [createProgramRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProgram(createProgramRequest?: CreateProgramRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProgram(createProgramRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集成员权限组添加
     * @summary 项目集成员权限组添加
     * @param {CreateProgramMemberPolicyRequest} [createProgramMemberPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProgramMemberPolicy(createProgramMemberPolicyRequest?: CreateProgramMemberPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProgramMemberPolicy(createProgramMemberPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集中添加项目
     * @summary 项目集中添加项目
     * @param {CreateProgramProjectsRequest} [createProgramProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProgramProjects(createProgramProjectsRequest?: CreateProgramProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProgramProjects(createProgramProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目公告创建
     * @summary 项目公告创建
     * @param {CreateProjectAnnouncementRequest} [createProjectAnnouncementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProjectAnnouncement(createProjectAnnouncementRequest?: CreateProjectAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProjectAnnouncement(createProjectAnnouncementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目标签创建
     * @summary 项目标签创建
     * @param {CreateProjectLabelRequest} [createProjectLabelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProjectLabel(createProjectLabelRequest?: CreateProjectLabelRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProjectLabel(createProjectLabelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目成员主体新增(包含用户组、部门、成员)
     * @summary 项目成员主体新增(包含用户组、部门、成员)
     * @param {CreateProjectMemberPrincipalRequest} [createProjectMemberPrincipalRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProjectMemberPrincipal(createProjectMemberPrincipalRequest?: CreateProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProjectMemberPrincipal(createProjectMemberPrincipalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 模版项目创建
     * @summary 模版项目创建
     * @param {CreateProjectWithTemplateRequest} [createProjectWithTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProjectWithTemplate(createProjectWithTemplateRequest?: CreateProjectWithTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProjectWithTemplate(createProjectWithTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建只读分支
     * @summary 仓库分支-创建只读分支
     * @param {CreateReadOnlyRefRequest} [createReadOnlyRefRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createReadOnlyRef(createReadOnlyRefRequest?: CreateReadOnlyRefRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createReadOnlyRef(createReadOnlyRefRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建版本
     * @summary 版本创建
     * @param {CreateReleaseRequest} [createReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRelease(createReleaseRequest?: CreateReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRelease(createReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 创建测试报告
     * @summary 测试报告创建
     * @param {CreateReportRequest} [createReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createReport(createReportRequest?: CreateReportRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createReport(createReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 需求关联缺陷
     * @summary 需求关联缺陷
     * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRequirementDefectRelation(createRequirementDefectRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 导入用户SSH公钥
     * @summary 仓库设置-导入用户SSH公钥
     * @param {CreateSshKeyRequest} [createSshKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSshKey(createSshKeyRequest?: CreateSshKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSshKey(createSshKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例创建
     * @summary 测试用例创建
     * @param {CreateTestCaseRequest} [createTestCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestCase(createTestCaseRequest?: CreateTestCaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestCase(createTestCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例分组创建
     * @summary 测试用例分组创建
     * @param {CreateTestCaseSectionRequest} [createTestCaseSectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestCaseSection(createTestCaseSectionRequest?: CreateTestCaseSectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestCaseSection(createTestCaseSectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务关联缺陷
     * @summary 测试任务关联缺陷
     * @param {CreateTestDefectRequest} [createTestDefectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestDefect(createTestDefectRequest?: CreateTestDefectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestDefect(createTestDefectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务添加测试结果
     * @summary 测试任务添加测试结果
     * @param {CreateTestResultRequest} [createTestResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestResult(createTestResultRequest?: CreateTestResultRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestResult(createTestResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务状态批量更新
     * @summary 测试任务状态批量更新
     * @param {CreateTestResultsRequest} [createTestResultsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestResults(createTestResultsRequest?: CreateTestResultsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestResults(createTestResultsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试计划创建
     * @summary 测试计划创建
     * @param {CreateTestRunRequest} [createTestRunRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestRun(createTestRunRequest?: CreateTestRunRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestRun(createTestRunRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务添加某步骤的测试结果
     * @summary 测试任务添加某步骤的测试结果
     * @param {CreateTestStepResultRequest} [createTestStepResultRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTestStepResult(createTestStepResultRequest?: CreateTestStepResultRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTestStepResult(createTestStepResultRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组创建
     * @summary 用户组创建
     * @param {CreateUserGroupRequest} [createUserGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserGroup(createUserGroupRequest?: CreateUserGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUserGroup(createUserGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组添加用户
     * @summary 用户组添加用户
     * @param {CreateUserGroupUsersRequest} [createUserGroupUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserGroupUsers(createUserGroupUsersRequest?: CreateUserGroupUsersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUserGroupUsers(createUserGroupUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组清理用户
     * @summary 用户组清理用户
     * @param {DeleteAllUsersOnGroupRequest} [deleteAllUsersOnGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest?: DeleteAllUsersOnGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAllUsersOnGroup(deleteAllUsersOnGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除指定版本制品的指定制品属性
     * @summary 制品属性删除
     * @param {DeleteArtifactPropertiesRequest} [deleteArtifactPropertiesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteArtifactProperties(deleteArtifactPropertiesRequest?: DeleteArtifactPropertiesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteArtifactProperties(deleteArtifactPropertiesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除保护分支规则
     * @summary 仓库设置-删除保护分支规则
     * @param {DeleteBranchProtectionRequest} [deleteBranchProtectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBranchProtection(deleteBranchProtectionRequest?: DeleteBranchProtectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBranchProtection(deleteBranchProtectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 新增保护分支规则管理员
     * @summary 仓库设置-删除保护分支规则管理员
     * @param {DeleteBranchProtectionMemberRequest} [deleteBranchProtectionMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBranchProtectionMember(deleteBranchProtectionMemberRequest?: DeleteBranchProtectionMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBranchProtectionMember(deleteBranchProtectionMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 云账号删除
     * @summary CD 云账号删除
     * @param {DeleteCdCloudAccountRequest} [deleteCdCloudAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCdCloudAccount(deleteCdCloudAccountRequest?: DeleteCdCloudAccountRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCdCloudAccount(deleteCdCloudAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组删除
     * @summary CD 主机组删除
     * @param {DeleteCdHostServerGroupRequest} [deleteCdHostServerGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCdHostServerGroup(deleteCdHostServerGroupRequest?: DeleteCdHostServerGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCdHostServerGroup(deleteCdHostServerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 部署流程删除
     * @summary CD 部署流程删除
     * @param {DeleteCdPipelineRequest} [deleteCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCdPipeline(deleteCdPipelineRequest?: DeleteCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCdPipeline(deleteCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除构建
     * @summary 构建删除
     * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除构建计划
     * @summary 构建计划删除
     * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCodingCIJob(deleteCodingCIJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部门删除
     * @summary 部门删除
     * @param {DeleteDepartmentRequest} [deleteDepartmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDepartment(deleteDepartmentRequest?: DeleteDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDepartment(deleteDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除 git 仓库文件推送规则
     * @summary 仓库设置-删除git仓库文件推送规则
     * @param {DeleteDepotFilePushRuleRequest} [deleteDepotFilePushRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDepotFilePushRule(deleteDepotFilePushRuleRequest?: DeleteDepotFilePushRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDepotFilePushRule(deleteDepotFilePushRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除 git 仓库特权者文件推送权限
     * @summary 仓库设置-删除git仓库特权者文件推送权限
     * @param {DeleteDepotFilePushRuleDenyPrivilegeRequest} [deleteDepotFilePushRuleDenyPrivilegeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest?: DeleteDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDepotFilePushRuleDenyPrivilege(deleteDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除代码仓库分支
     * @summary 仓库分支-删除代码仓库分支
     * @param {DeleteGitBranchRequest} [deleteGitBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitBranch(deleteGitBranchRequest?: DeleteGitBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitBranch(deleteGitBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除部署公钥
     * @summary 仓库设置-删除部署公钥
     * @param {DeleteGitDeployKeyRequest} [deleteGitDeployKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitDeployKey(deleteGitDeployKeyRequest?: DeleteGitDeployKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitDeployKey(deleteGitDeployKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除git仓库
     * @summary 仓库信息-删除git仓库
     * @param {DeleteGitDepotRequest} [deleteGitDepotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitDepot(deleteGitDepotRequest?: DeleteGitDepotRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitDepot(deleteGitDepotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除文件并提交
     * @summary Git文件-删除文件并提交
     * @param {DeleteGitFilesRequest} [deleteGitFilesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitFiles(deleteGitFilesRequest?: DeleteGitFilesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitFiles(deleteGitFilesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除已合并到默认分支的分支（此操作不会删除受保护的分支）
     * @summary 仓库分支-删除已合并到默认分支的分支（此操作不会删除受保护的分支)
     * @param {DeleteGitMergedBranchesRequest} [deleteGitMergedBranchesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitMergedBranches(deleteGitMergedBranchesRequest?: DeleteGitMergedBranchesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitMergedBranches(deleteGitMergedBranchesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除标签保护规则
     * @summary 标签信息-删除标签保护规则
     * @param {DeleteGitProtectedTagRuleRequest} [deleteGitProtectedTagRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest?: DeleteGitProtectedTagRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitProtectedTagRule(deleteGitProtectedTagRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除仓库版本
     * @summary 版本信息-删除仓库版本
     * @param {DeleteGitReleaseRequest} [deleteGitReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitRelease(deleteGitReleaseRequest?: DeleteGitReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitRelease(deleteGitReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 代码仓库删除tag
     * @summary 标签信息-代码仓库删除tag
     * @param {DeleteGitTagRequest} [deleteGitTagRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGitTag(deleteGitTagRequest?: DeleteGitTagRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteGitTag(deleteGitTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除事项
     * @summary 事项删除
     * @param {DeleteIssueRequest} [deleteIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIssue(deleteIssueRequest?: DeleteIssueRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIssue(deleteIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除前置事项
     * @summary 前置事项删除
     * @param {DeleteIssueBlockRequest} [deleteIssueBlockRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIssueBlock(deleteIssueBlockRequest?: DeleteIssueBlockRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIssueBlock(deleteIssueBlockRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除事项模块
     * @summary 事项模块删除
     * @param {DeleteIssueModuleRequest} [deleteIssueModuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIssueModule(deleteIssueModuleRequest?: DeleteIssueModuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIssueModule(deleteIssueModuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除工时日志
     * @summary 工时日志删除
     * @param {DeleteIssueWorkHoursRequest} [deleteIssueWorkHoursRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIssueWorkHours(deleteIssueWorkHoursRequest?: DeleteIssueWorkHoursRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIssueWorkHours(deleteIssueWorkHoursRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除迭代
     * @summary 迭代删除
     * @param {DeleteIterationRequest} [deleteIterationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIteration(deleteIterationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除团队成员的SSH公钥
     * @summary 仓库设置-删除团队成员的SSH公钥
     * @param {DeleteMemberSshKeyRequest} [deleteMemberSshKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMemberSshKey(deleteMemberSshKeyRequest?: DeleteMemberSshKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMemberSshKey(deleteMemberSshKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除合并请求行评论和改动文件diff行评论
     * @summary 合并请求-删除合并请求行评论和改动文件diff行评论
     * @param {DeleteMergeRequestNoteRequest} [deleteMergeRequestNoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMergeRequestNote(deleteMergeRequestNoteRequest?: DeleteMergeRequestNoteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMergeRequestNote(deleteMergeRequestNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除mr评审者
     * @summary 合并请求-删除mr评审者
     * @param {DeleteMergeRequestReviewerRequest} [deleteMergeRequestReviewerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest?: DeleteMergeRequestReviewerRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMergeRequestReviewer(deleteMergeRequestReviewerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 单个项目删除
     * @summary 单个项目删除
     * @param {DeleteOneProjectRequest} [deleteOneProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOneProject(deleteOneProjectRequest?: DeleteOneProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOneProject(deleteOneProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组批量删除
     * @summary 权限组批量删除
     * @param {DeletePoliciesByIdRequest} [deletePoliciesByIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePoliciesById(deletePoliciesByIdRequest?: DeletePoliciesByIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePoliciesById(deletePoliciesByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集成员权限组删除
     * @summary 项目集成员权限组删除
     * @param {DeleteProgramMemberPolicyRequest} [deleteProgramMemberPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest?: DeleteProgramMemberPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProgramMemberPolicy(deleteProgramMemberPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目公告删除
     * @summary 项目公告删除
     * @param {DeleteProjectAnnouncementRequest} [deleteProjectAnnouncementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectAnnouncement(deleteProjectAnnouncementRequest?: DeleteProjectAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectAnnouncement(deleteProjectAnnouncementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目标签删除
     * @summary 项目标签删除
     * @param {DeleteProjectLabelRequest} [deleteProjectLabelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectLabel(deleteProjectLabelRequest?: DeleteProjectLabelRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectLabel(deleteProjectLabelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目成员主体删除(包含用户组、部门、成员)
     * @summary 项目成员主体删除(包含用户组、部门、成员)
     * @param {DeleteProjectMemberPrincipalRequest} [deleteProjectMemberPrincipalRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest?: DeleteProjectMemberPrincipalRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectMemberPrincipal(deleteProjectMemberPrincipalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除版本
     * @summary 版本删除
     * @param {DeleteReleaseRequest} [deleteReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRelease(deleteReleaseRequest?: DeleteReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRelease(deleteReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试报告删除
     * @summary 测试报告删除
     * @param {DeleteReportRequest} [deleteReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteReport(deleteReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 需求取消关联缺陷
     * @summary 需求取消关联缺陷
     * @param {CreateRequirementDefectRelationRequest} [createRequirementDefectRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRequirementDefectRelation(createRequirementDefectRelationRequest?: CreateRequirementDefectRelationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRequirementDefectRelation(createRequirementDefectRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除当前用户的SSH公钥
     * @summary 仓库设置-删除当前用户的SSH公钥
     * @param {DeleteSshKeyRequest} [deleteSshKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSshKey(deleteSshKeyRequest?: DeleteSshKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSshKey(deleteSshKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除团队级别的分支规范
     * @summary 仓库设置-删除团队级别的分支规范
     * @param {DeleteTeamLevelDepotSpecRequest} [deleteTeamLevelDepotSpecRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest?: DeleteTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTeamLevelDepotSpec(deleteTeamLevelDepotSpecRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 团队成员删除
     * @summary 团队成员删除
     * @param {DeleteTeamMemberRequest} [deleteTeamMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTeamMember(deleteTeamMemberRequest?: DeleteTeamMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTeamMember(deleteTeamMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例删除
     * @summary 测试用例删除
     * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTestCase(deleteTestCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例分组删除
     * @summary 测试用例分组删除
     * @param {DeleteTestCaseSectionRequest} [deleteTestCaseSectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTestCaseSection(deleteTestCaseSectionRequest?: DeleteTestCaseSectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTestCaseSection(deleteTestCaseSectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试计划删除
     * @summary 测试计划删除
     * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTestRun(deleteTestRunRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组删除
     * @summary 用户组删除
     * @param {DeleteUserGroupByIdsRequest} [deleteUserGroupByIdsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserGroupByIds(deleteUserGroupByIdsRequest?: DeleteUserGroupByIdsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUserGroupByIds(deleteUserGroupByIdsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组删除用户
     * @summary 用户组删除用户
     * @param {DeleteUserGroupUsersRequest} [deleteUserGroupUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserGroupUsers(deleteUserGroupUsersRequest?: DeleteUserGroupUsersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUserGroupUsers(deleteUserGroupUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 在堡垒机上安装 CD 客户端必要的 Secret 凭据参数
     * @summary 堡垒机安装 Secret
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeAgentSecret(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeAgentSecret(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取所有合并请求行评论和改动文件diff行评论
     * @summary 合并请求-获取所有合并请求行评论和改动文件diff行评论
     * @param {DescribeAllMergeRequestNotesRequest} [describeAllMergeRequestNotesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest?: DescribeAllMergeRequestNotesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeAllMergeRequestNotes(describeAllMergeRequestNotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目标签查询
     * @summary 项目标签查询
     * @param {DescribeAllProjectLabelsRequest} [describeAllProjectLabelsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeAllProjectLabels(describeAllProjectLabelsRequest?: DescribeAllProjectLabelsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeAllProjectLabels(describeAllProjectLabelsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询全部有权限的项目工时日志列表
     * @summary 工时日志列表查询
     * @param {DescribeAllProjectsIssueWorkLogListRequest} [describeAllProjectsIssueWorkLogListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest?: DescribeAllProjectsIssueWorkLogListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeAllProjectsIssueWorkLogList(describeAllProjectsIssueWorkLogListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品Checksum列表查询
     * @summary 制品Checksum列表查询
     * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactChecksums(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactChecksums(describeArtifactChecksumsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过授信清单ID查询制品授信清单详情
     * @summary 查询制品授信清单详情
     * @param {DescribeArtifactCreditRequest} [describeArtifactCreditRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactCredit(describeArtifactCreditRequest?: DescribeArtifactCreditRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactCredit(describeArtifactCreditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品授信清单列表查询
     * @summary 制品授信清单列表查询
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactCreditList(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactCreditList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品文件临时下载链接获取
     * @summary 制品文件临时下载链接获取
     * @param {DescribeArtifactFileDownloadUrlRequest} [describeArtifactFileDownloadUrlRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest?: DescribeArtifactFileDownloadUrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactFileDownloadUrl(describeArtifactFileDownloadUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品包（镜像）列表查询
     * @summary 制品包（镜像）列表查询
     * @param {DescribeArtifactPackageListRequest} [describeArtifactPackageListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactPackageList(describeArtifactPackageListRequest?: DescribeArtifactPackageListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactPackageList(describeArtifactPackageListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 指定制品版本的制品属性列表查询
     * @summary 制品属性列表查询
     * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactProperties(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactProperties(describeArtifactChecksumsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品仓库下可下载的文件列表获取
     * @summary 制品仓库下可下载的文件列表获取
     * @param {DescribeArtifactRepositoryFileListRequest} [describeArtifactRepositoryFileListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest?: DescribeArtifactRepositoryFileListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactRepositoryFileList(describeArtifactRepositoryFileListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询当前团队指定项目的制品仓库列表
     * @summary 制品仓库列表查询
     * @param {DescribeArtifactRepositoryListRequest} [describeArtifactRepositoryListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactRepositoryList(describeArtifactRepositoryListRequest?: DescribeArtifactRepositoryListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactRepositoryList(describeArtifactRepositoryListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品版本可下载的文件列表获取（暂仅支持类型为: 1-Generic;3-maven;4-npm;5-pypi 制品）
     * @summary 制品版本可下载的文件列表获取
     * @param {DescribeArtifactVersionFileListRequest} [describeArtifactVersionFileListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactVersionFileList(describeArtifactVersionFileListRequest?: DescribeArtifactVersionFileListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactVersionFileList(describeArtifactVersionFileListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品版本列表查询
     * @summary 制品版本列表查询
     * @param {DescribeArtifactVersionListRequest} [describeArtifactVersionListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeArtifactVersionList(describeArtifactVersionListRequest?: DescribeArtifactVersionListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeArtifactVersionList(describeArtifactVersionListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组列表查询（指定资源）
     * @summary 权限组列表查询（指定资源）
     * @param {DescribeAvailablePoliciesOnResourceRequest} [describeAvailablePoliciesOnResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest?: DescribeAvailablePoliciesOnResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeAvailablePoliciesOnResource(describeAvailablePoliciesOnResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询后置事项
     * @summary 后置事项查询
     * @param {DescribeBlockIssueListRequest} [describeBlockIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeBlockIssueList(describeBlockIssueListRequest?: DescribeBlockIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeBlockIssueList(describeBlockIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询前置事项
     * @summary 前置事项查询
     * @param {DescribeBlockedByIssueListRequest} [describeBlockedByIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeBlockedByIssueList(describeBlockedByIssueListRequest?: DescribeBlockedByIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeBlockedByIssueList(describeBlockedByIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询单个保护分支规则
     * @summary 仓库设置-查询单个保护分支规则
     * @param {DescribeBranchProtectionRequest} [describeBranchProtectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeBranchProtection(describeBranchProtectionRequest?: DescribeBranchProtectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeBranchProtection(describeBranchProtectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询保护分支规则下所有管理员信息
     * @summary 仓库设置-查询保护分支规则下所有管理员信息
     * @param {DescribeBranchProtectionMembersRequest} [describeBranchProtectionMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeBranchProtectionMembers(describeBranchProtectionMembersRequest?: DescribeBranchProtectionMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeBranchProtectionMembers(describeBranchProtectionMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库保护分支规则集合
     * @summary 仓库设置-查询仓库保护分支规则集合
     * @param {DescribeBranchProtectionsRequest} [describeBranchProtectionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeBranchProtections(describeBranchProtectionsRequest?: DescribeBranchProtectionsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeBranchProtections(describeBranchProtectionsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查看两个分支是否可以合并
     * @summary 合并请求-查看两个分支是否可以合并
     * @param {DescribeCanMergeRequest} [describeCanMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCanMerge(describeCanMergeRequest?: DescribeCanMergeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCanMerge(describeCanMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 堡垒机列表获取
     * @summary CD 堡垒机列表获取
     * @param {DescribeCdAgentMachinesRequest} [describeCdAgentMachinesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdAgentMachines(describeCdAgentMachinesRequest?: DescribeCdAgentMachinesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdAgentMachines(describeCdAgentMachinesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 应用详情获取
     * @summary CD 应用详情获取
     * @param {DescribeCdApplicationRequest} [describeCdApplicationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdApplication(describeCdApplicationRequest?: DescribeCdApplicationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdApplication(describeCdApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 应用列表获取
     * @summary CD 应用列表获取
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdApplications(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdApplications(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据项目名获取关联应用列表
     * @summary 关联应用列表获取（指定项目名）
     * @param {DescribeWikiListRequest} [describeWikiListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdApplicationsByProject(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdApplicationsByProject(describeWikiListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 云账号列表获取
     * @summary CD 云账号列表获取
     * @param {DescribeCdCloudAccountsRequest} [describeCdCloudAccountsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdCloudAccounts(describeCdCloudAccountsRequest?: DescribeCdCloudAccountsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdCloudAccounts(describeCdCloudAccountsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据应用名列表获取发布次数
     * @summary 发布次数-根据应用名列表获取
     * @param {DescribeCdDeployCountByApplicationsRequest} [describeCdDeployCountByApplicationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest?: DescribeCdDeployCountByApplicationsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployCountByApplications(describeCdDeployCountByApplicationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 关联应用的发布次数获取（指定项目名）
     * @summary 关联应用的发布次数获取（指定项目名）
     * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployCountByProject(describeCdDeployTimeByProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 发布时长-根据应用名列表获取
     * @summary 发布时长-根据应用名列表获取
     * @param {DescribeCdDeployTimeByApplicationsRequest} [describeCdDeployTimeByApplicationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest?: DescribeCdDeployTimeByApplicationsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployTimeByApplications(describeCdDeployTimeByApplicationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 关联应用的发布时长-根据项目名获取
     * @summary 关联应用的发布时长-根据项目名获取
     * @param {DescribeCdDeployTimeByProjectRequest} [describeCdDeployTimeByProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest?: DescribeCdDeployTimeByProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployTimeByProject(describeCdDeployTimeByProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 发布趋势-根据应用名列表获取
     * @summary 发布趋势-根据应用名列表获取
     * @param {DescribeCdDeployTrendByApplicationsRequest} [describeCdDeployTrendByApplicationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest?: DescribeCdDeployTrendByApplicationsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployTrendByApplications(describeCdDeployTrendByApplicationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 关联应用的发布趋势-根据项目名获取
     * @summary 关联应用的发布趋势-根据项目名获取
     * @param {DescribeCdDeployTrendByProjectRequest} [describeCdDeployTrendByProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest?: DescribeCdDeployTrendByProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdDeployTrendByProject(describeCdDeployTrendByProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组获取
     * @summary CD 主机组获取
     * @param {DescribeCdHostServerGroupRequest} [describeCdHostServerGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdHostServerGroup(describeCdHostServerGroupRequest?: DescribeCdHostServerGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdHostServerGroup(describeCdHostServerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组列表获取
     * @summary CD 主机组列表获取
     * @param {DescribeCdHostServerGroupsRequest} [describeCdHostServerGroupsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdHostServerGroups(describeCdHostServerGroupsRequest?: DescribeCdHostServerGroupsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdHostServerGroups(describeCdHostServerGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 部署流程执行记录获取
     * @summary CD 部署流程执行记录获取
     * @param {DescribeCdPipelineRequest} [describeCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdPipeline(describeCdPipelineRequest?: DescribeCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdPipeline(describeCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 部署流程配置-根据名称获取
     * @summary CD 部署流程配置-根据名称获取
     * @param {DescribeCdPipelineConfigRequest} [describeCdPipelineConfigRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdPipelineConfig(describeCdPipelineConfigRequest?: DescribeCdPipelineConfigRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdPipelineConfig(describeCdPipelineConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 应用下的所有部署流程配置获取
     * @summary CD 应用下的所有部署流程配置获取
     * @param {DescribeCdPipelineConfigsRequest} [describeCdPipelineConfigsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdPipelineConfigs(describeCdPipelineConfigsRequest?: DescribeCdPipelineConfigsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdPipelineConfigs(describeCdPipelineConfigsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 任务执行记录获取
     * @summary CD 任务执行记录获取
     * @param {DescribeCdTaskRequest} [describeCdTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCdTask(describeCdTaskRequest?: DescribeCdTaskRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCdTask(describeCdTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询代码片段详细列表
     * @summary 仓库信息-查询代码片段详细列表
     * @param {DescribeCodeSearchRequest} [describeCodeSearchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodeSearch(describeCodeSearchRequest?: DescribeCodeSearchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodeSearch(describeCodeSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询构建记录详情
     * @summary 构建记录详情查询
     * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询构建任务制品
     * @summary 构建任务制品查询
     * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildArtifacts(describeCodingCIBuildArtifactsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取构建计划环境变量
     * @summary 构建计划环境变量获取
     * @param {DescribeCodingCIBuildEnvsRequest} [describeCodingCIBuildEnvsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest?: DescribeCodingCIBuildEnvsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildEnvs(describeCodingCIBuildEnvsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建任务网页报告查询
     * @summary 构建任务网页报告查询
     * @param {DescribeCodingCIBuildArtifactsRequest} [describeCodingCIBuildArtifactsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest?: DescribeCodingCIBuildArtifactsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildHtmlReports(describeCodingCIBuildArtifactsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建日志获取
     * @summary 构建日志获取
     * @param {DescribeCodingCIBuildLogRequest} [describeCodingCIBuildLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildLog(describeCodingCIBuildLogRequest?: DescribeCodingCIBuildLogRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildLog(describeCodingCIBuildLogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建完整日志查询（原始日志 Raw）
     * @summary 构建完整日志查询（原始日志 Raw）
     * @param {DescribeCodingCIBuildLogRawRequest} [describeCodingCIBuildLogRawRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest?: DescribeCodingCIBuildLogRawRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildLogRaw(describeCodingCIBuildLogRawRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建计划度量查询
     * @summary 构建计划度量查询
     * @param {DescribeCodingCIBuildMetricsRequest} [describeCodingCIBuildMetricsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest?: DescribeCodingCIBuildMetricsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildMetrics(describeCodingCIBuildMetricsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建任务阶段获取
     * @summary 构建任务阶段获取
     * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildStage(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildStage(describeCodingCIBuildStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建任务统计
     * @summary 构建任务统计
     * @param {DescribeCodingCIBuildStatisticsRequest} [describeCodingCIBuildStatisticsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest?: DescribeCodingCIBuildStatisticsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildStatistics(describeCodingCIBuildStatisticsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建任务指定阶段的步骤获取
     * @summary 构建任务指定阶段的步骤获取
     * @param {DescribeCodingCIBuildStepRequest} [describeCodingCIBuildStepRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildStep(describeCodingCIBuildStepRequest?: DescribeCodingCIBuildStepRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildStep(describeCodingCIBuildStepRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建步骤日志获取
     * @summary 构建步骤日志获取
     * @param {DescribeCodingCIBuildStepLogRequest} [describeCodingCIBuildStepLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest?: DescribeCodingCIBuildStepLogRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuildStepLog(describeCodingCIBuildStepLogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建计划的构建列表获取
     * @summary 构建计划的构建列表获取
     * @param {DescribeCodingCIBuildsRequest} [describeCodingCIBuildsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIBuilds(describeCodingCIBuildsRequest?: DescribeCodingCIBuildsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIBuilds(describeCodingCIBuildsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建计划详情获取
     * @summary 构建计划详情获取
     * @param {DeleteCodingCIJobRequest} [deleteCodingCIJobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIJob(deleteCodingCIJobRequest?: DeleteCodingCIJobRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIJob(deleteCodingCIJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建计划查询（通过项目ID）
     * @summary 构建计划查询（通过项目ID）
     * @param {DescribeCodingCIJobsRequest} [describeCodingCIJobsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCIJobs(describeCodingCIJobsRequest?: DescribeCodingCIJobsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCIJobs(describeCodingCIJobsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 当前用户信息查询
     * @summary 当前用户信息查询
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingCurrentUser(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingCurrentUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目列表查询
     * @summary 项目列表查询
     * @param {DescribeCodingProjectsRequest} [describeCodingProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCodingProjects(describeCodingProjectsRequest?: DescribeCodingProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCodingProjects(describeCodingProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询commit的ref信息
     * @summary Git提交-查询commit的ref信息
     * @param {DescribeCommitRefsRequest} [describeCommitRefsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCommitRefs(describeCommitRefsRequest?: DescribeCommitRefsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCommitRefs(describeCommitRefsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询两个请求之间的请求列表（source target顺序正常）
     * @summary Git提交-查询两个请求之间的请求列表（source target顺序正常）
     * @param {DescribeCommitsBetweenCommitAndCommitRequest} [describeCommitsBetweenCommitAndCommitRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest?: DescribeCommitsBetweenCommitAndCommitRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeCommitsBetweenCommitAndCommit(describeCommitsBetweenCommitAndCommitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取配置方案
     * @summary 配置方案获取
     * @param {DescribeConfigTemplateListRequest} [describeConfigTemplateListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeConfigTemplateList(describeConfigTemplateListRequest?: DescribeConfigTemplateListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeConfigTemplateList(describeConfigTemplateListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 缺陷类型列表查询
     * @summary 缺陷类型列表查询
     * @param {DescribeDefectTypesRequest} [describeDefectTypesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDefectTypes(describeDefectTypesRequest?: DescribeDefectTypesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDefectTypes(describeDefectTypesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部门详情查询
     * @summary 部门详情查询
     * @param {DescribeDepartmentRequest} [describeDepartmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepartment(describeDepartmentRequest?: DescribeDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepartment(describeDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取部门成员列表（分页列表）查询选中部门下面所有的成员
     * @summary 部门成员列表查询
     * @param {DescribeDepartmentMembersRequest} [describeDepartmentMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepartmentMembers(describeDepartmentMembersRequest?: DescribeDepartmentMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepartmentMembers(describeDepartmentMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询项目下所有的仓库信息列表
     * @summary 仓库信息-查询项目下所有的仓库信息列表
     * @param {DescribeDepotByNameInfoRequest} [describeDepotByNameInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotByNameInfo(describeDepotByNameInfoRequest?: DescribeDepotByNameInfoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotByNameInfo(describeDepotByNameInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库的默认分支
     * @summary 仓库分支-查询仓库的默认分支
     * @param {DescribeDepotDefaultBranchRequest} [describeDepotDefaultBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotDefaultBranch(describeDepotDefaultBranchRequest?: DescribeDepotDefaultBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotDefaultBranch(describeDepotDefaultBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 git 仓库文件推送规则
     * @summary 仓库设置-查询git仓库文件推送规则
     * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotFilePushRules(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotFilePushRules(describeDepotFilePushRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库合并请求列表
     * @summary 合并请求-查询仓库合并请求列表
     * @param {DescribeDepotMergeRequestsRequest} [describeDepotMergeRequestsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotMergeRequests(describeDepotMergeRequestsRequest?: DescribeDepotMergeRequestsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotMergeRequests(describeDepotMergeRequestsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库推送设置
     * @summary 仓库设置-查询仓库推送设置
     * @param {DescribeDepotFilePushRulesRequest} [describeDepotFilePushRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotPushSetting(describeDepotFilePushRulesRequest?: DescribeDepotFilePushRulesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotPushSetting(describeDepotFilePushRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库规范详情
     * @summary 仓库设置-查询仓库规范详情
     * @param {DescribeDepotSpecDetailRequest} [describeDepotSpecDetailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotSpecDetail(describeDepotSpecDetailRequest?: DescribeDepotSpecDetailRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotSpecDetail(describeDepotSpecDetailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库规范列表
     * @summary 仓库设置-查询仓库规范列表
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDepotSpecs(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDepotSpecs(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 两次提交之间的文件差异
     * @summary Git提交-两次提交之间的文件差异（source target顺序正常）
     * @param {DescribeDifferentBetween2CommitsRequest} [describeDifferentBetween2CommitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest?: DescribeDifferentBetween2CommitsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDifferentBetween2Commits(describeDifferentBetween2CommitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取两次 commit 之间的文件 差异详情
     * @summary Git提交-获取两次commit之间的文件差异详情(废弃，source target顺序不一致)
     * @param {DescribeDifferentBetweenTwoCommitsRequest} [describeDifferentBetweenTwoCommitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest?: DescribeDifferentBetweenTwoCommitsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeDifferentBetweenTwoCommits(describeDifferentBetweenTwoCommitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取指定 commit 下某文件指定代码行的最后一次提交
     * @summary Git提交-获取指定commit下某文件指定代码行的最后一次提交
     * @param {DescribeGitBlameInfoRequest} [describeGitBlameInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBlameInfo(describeGitBlameInfoRequest?: DescribeGitBlameInfoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBlameInfo(describeGitBlameInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 Git Blob
     * @summary Git文件-查询GitBlob
     * @param {DescribeGitBlobRequest} [describeGitBlobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBlob(describeGitBlobRequest?: DescribeGitBlobRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBlob(describeGitBlobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 Git Blob raw 信息
     * @summary Git文件-查询Git Blob raw信息
     * @param {DescribeGitBlobRawRequest} [describeGitBlobRawRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBlobRaw(describeGitBlobRawRequest?: DescribeGitBlobRawRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBlobRaw(describeGitBlobRawRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询代码仓库单个分支
     * @summary 仓库分支-查询代码仓库单个分支
     * @param {DescribeGitBranchRequest} [describeGitBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBranch(describeGitBranchRequest?: DescribeGitBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBranch(describeGitBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库分支列表
     * @summary 仓库分支-查询仓库分支列表
     * @param {DescribeGitBranchListRequest} [describeGitBranchListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBranchList(describeGitBranchListRequest?: DescribeGitBranchListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBranchList(describeGitBranchListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库下所有分支列表
     * @summary 仓库分支-查询仓库下所有分支列表
     * @param {DescribeGitBranchesRequest} [describeGitBranchesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBranches(describeGitBranchesRequest?: DescribeGitBranchesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBranches(describeGitBranchesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据sha值查询所在分支
     * @summary 仓库分支-根据sha值查询所在分支
     * @param {DescribeGitBranchesByShaRequest} [describeGitBranchesByShaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitBranchesBySha(describeGitBranchesByShaRequest?: DescribeGitBranchesByShaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitBranchesBySha(describeGitBranchesByShaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取commit评论
     * @summary Git提交-获取commit评论
     * @param {DescribeGitCommitCommentsRequest} [describeGitCommitCommentsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitComments(describeGitCommitCommentsRequest?: DescribeGitCommitCommentsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitComments(describeGitCommitCommentsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询某次提交的diff信息
     * @summary Git提交-查询某次提交的diff信息
     * @param {DescribeGitCommitDiffRequest} [describeGitCommitDiffRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitDiff(describeGitCommitDiffRequest?: DescribeGitCommitDiffRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitDiff(describeGitCommitDiffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库某次提交改动的文件路径列表
     * @summary Git提交-查询仓库某次提交改动的文件路径列表
     * @param {DescribeGitCommitFilePathListRequest} [describeGitCommitFilePathListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitFilePathList(describeGitCommitFilePathListRequest?: DescribeGitCommitFilePathListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitFilePathList(describeGitCommitFilePathListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询单个请求详情信息
     * @summary Git提交-查询单个请求详情信息
     * @param {DescribeGitCommitInfoRequest} [describeGitCommitInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitInfo(describeGitCommitInfoRequest?: DescribeGitCommitInfoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitInfo(describeGitCommitInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库分支下提交列表
     * @summary Git提交-查询仓库分支下提交列表
     * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitInfos(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitInfos(describeGitCommitInfosRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取提交注释
     * @summary Git提交-获取提交注释
     * @param {DescribeGitCommitNoteRequest} [describeGitCommitNoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitNote(describeGitCommitNoteRequest?: DescribeGitCommitNoteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitNote(describeGitCommitNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询提交对应的流水线状态
     * @summary Git提交-查询提交对应的流水线状态
     * @param {DescribeGitCommitStatusRequest} [describeGitCommitStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitStatus(describeGitCommitStatusRequest?: DescribeGitCommitStatusRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitStatus(describeGitCommitStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库分支下提交列表
     * @summary Git提交-查询仓库分支下提交列表
     * @param {DescribeGitCommitInfosRequest} [describeGitCommitInfosRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitCommitsInPage(describeGitCommitInfosRequest?: DescribeGitCommitInfosRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitCommitsInPage(describeGitCommitInfosRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 git 仓库的贡献者
     * @summary 仓库信息-查询git仓库的贡献者
     * @param {DescribeGitContributorsRequest} [describeGitContributorsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitContributors(describeGitContributorsRequest?: DescribeGitContributorsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitContributors(describeGitContributorsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据代码仓库id获取代码仓库信息
     * @summary 仓库信息-根据代码仓库id获取代码仓库信息
     * @param {DescribeGitDepotRequest} [describeGitDepotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitDepot(describeGitDepotRequest?: DescribeGitDepotRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitDepot(describeGitDepotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询某仓库下的部署公钥列表
     * @summary 仓库设置-查询某仓库下的部署公钥列表
     * @param {DescribeGitDepotDeployKeysRequest} [describeGitDepotDeployKeysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest?: DescribeGitDepotDeployKeysRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitDepotDeployKeys(describeGitDepotDeployKeysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取文件详情
     * @summary Git文件-获取文件详情
     * @param {DescribeGitFileRequest} [describeGitFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitFile(describeGitFileRequest?: DescribeGitFileRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitFile(describeGitFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询某次提交某文件的内容
     * @summary Git提交-查询某次提交某文件的内容
     * @param {DescribeGitFileContentRequest} [describeGitFileContentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitFileContent(describeGitFileContentRequest?: DescribeGitFileContentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitFileContent(describeGitFileContentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 检查仓库文件
     * @summary Git文件-检查仓库文件是否存在
     * @param {DescribeGitFileStatRequest} [describeGitFileStatRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitFileStat(describeGitFileStatRequest?: DescribeGitFileStatRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitFileStat(describeGitFileStatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取分支目录结构
     * @summary Git文件-查询仓库目录下文件和文件夹名字
     * @param {DescribeGitFilesRequest} [describeGitFilesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitFiles(describeGitFilesRequest?: DescribeGitFilesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitFiles(describeGitFilesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询两个分支的公共祖先
     * @summary 仓库分支-查询两个分支的公共祖先
     * @param {DescribeGitMergeBaseRequest} [describeGitMergeBaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitMergeBase(describeGitMergeBaseRequest?: DescribeGitMergeBaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitMergeBase(describeGitMergeBaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求文件的 diff 详情
     * @summary 合并请求-查询合并请求文件的 diff 详情
     * @param {DescribeGitMergeRequestDiffDetailRequest} [describeGitMergeRequestDiffDetailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest?: DescribeGitMergeRequestDiffDetailRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitMergeRequestDiffDetail(describeGitMergeRequestDiffDetailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求 diff 信息的文件列表
     * @summary 合并请求-查询合并请求diff信息的文件列表
     * @param {DescribeGitMergeRequestDiffsRequest} [describeGitMergeRequestDiffsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest?: DescribeGitMergeRequestDiffsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitMergeRequestDiffs(describeGitMergeRequestDiffsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取合并请求的参与者
     * @summary 合并请求-获取合并请求的参与者
     * @param {DescribeGitMergeRequestParticipantsRequest} [describeGitMergeRequestParticipantsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest?: DescribeGitMergeRequestParticipantsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitMergeRequestParticipants(describeGitMergeRequestParticipantsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询含有某次提交的合并请求
     * @summary 合并请求-查询含有某次提交的合并请求
     * @param {DescribeGitMergeRequestsByShaRequest} [describeGitMergeRequestsByShaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest?: DescribeGitMergeRequestsByShaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitMergeRequestsBySha(describeGitMergeRequestsByShaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询某项目下的部署公钥列表
     * @summary 仓库设置-查询某项目下的部署公钥列表
     * @param {DescribeGitProjectDeployKeysRequest} [describeGitProjectDeployKeysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest?: DescribeGitProjectDeployKeysRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitProjectDeployKeys(describeGitProjectDeployKeysRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询受保护的标签列表
     * @summary 标签信息-查询受保护的标签列表
     * @param {DescribeGitProtectedTagsRequest} [describeGitProtectedTagsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitProtectedTags(describeGitProtectedTagsRequest?: DescribeGitProtectedTagsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitProtectedTags(describeGitProtectedTagsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据标签保护规则查询受保护的标签列表
     * @summary 标签信息-根据标签保护规则查询受保护的标签列表
     * @param {DescribeGitProtectedTagsByRuleRequest} [describeGitProtectedTagsByRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest?: DescribeGitProtectedTagsByRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitProtectedTagsByRule(describeGitProtectedTagsByRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取分支或标签信息
     * @summary 仓库分支-获取分支或标签信息
     * @param {DescribeGitRefRequest} [describeGitRefRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitRef(describeGitRefRequest?: DescribeGitRefRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitRef(describeGitRefRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询含有某次提交的标签或分支列表
     * @summary Git提交-查询含有某次提交的标签或分支列表
     * @param {DescribeGitRefsByShaRequest} [describeGitRefsByShaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitRefsBySha(describeGitRefsByShaRequest?: DescribeGitRefsByShaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitRefsBySha(describeGitRefsByShaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库的版本详情
     * @summary 版本信息-查询仓库的版本详情
     * @param {DescribeGitReleaseDetailRequest} [describeGitReleaseDetailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitReleaseDetail(describeGitReleaseDetailRequest?: DescribeGitReleaseDetailRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitReleaseDetail(describeGitReleaseDetailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询仓库的版本列表
     * @summary 版本信息-查询仓库的版本列表
     * @param {DescribeGitReleasesRequest} [describeGitReleasesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitReleases(describeGitReleasesRequest?: DescribeGitReleasesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitReleases(describeGitReleasesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询单个tag
     * @summary 标签信息-查询单个tag
     * @param {DescribeGitTagRequest} [describeGitTagRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitTag(describeGitTagRequest?: DescribeGitTagRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitTag(describeGitTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询当前仓库下所有tags
     * @summary 标签信息-查询当前仓库下所有tags
     * @param {DescribeGitTagsRequest} [describeGitTagsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitTags(describeGitTagsRequest?: DescribeGitTagsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitTags(describeGitTagsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 根据分支获取标签列表
     * @summary 标签信息-根据分支获取标签列表
     * @param {DescribeGitTagsByBranchRequest} [describeGitTagsByBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitTagsByBranch(describeGitTagsByBranchRequest?: DescribeGitTagsByBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitTagsByBranch(describeGitTagsByBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询含有某次提交的标签列表
     * @summary 标签信息-查询含有某次提交的标签列表
     * @param {DescribeGitTagsByShaRequest} [describeGitTagsByShaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitTagsBySha(describeGitTagsByShaRequest?: DescribeGitTagsByShaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitTagsBySha(describeGitTagsByShaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 git 仓库的树
     * @summary 仓库信息-查询git仓库的树
     * @param {DescribeGitTreeRequest} [describeGitTreeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGitTree(describeGitTreeRequest?: DescribeGitTreeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGitTree(describeGitTreeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 授权对象列表分页查询
     * @summary 授权对象列表分页查询
     * @param {DescribeGrantObjectsOnResourceRequest} [describeGrantObjectsOnResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest?: DescribeGrantObjectsOnResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGrantObjectsOnResource(describeGrantObjectsOnResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询指定资源下授权的用户列表，包括容器内的用户
     * @summary 授权用户列表分页查询
     * @param {DescribeGrantUsersOnResourceRequest} [describeGrantUsersOnResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeGrantUsersOnResource(describeGrantUsersOnResourceRequest?: DescribeGrantUsersOnResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeGrantUsersOnResource(describeGrantUsersOnResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组部署详情获取
     * @summary CD 主机组部署详情获取
     * @param {DescribeHostServerInstanceRequest} [describeHostServerInstanceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeHostServerInstance(describeHostServerInstanceRequest?: DescribeHostServerInstanceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeHostServerInstance(describeHostServerInstanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项详情
     * @summary 事项详情查询
     * @param {DescribeIssueRequest} [describeIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssue(describeIssueRequest?: DescribeIssueRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssue(describeIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 拿到预签名，上传文件
     * @summary 预签名信息获取
     * @param {DescribeIssueAttachmentPreSignedUrlRequest} [describeIssueAttachmentPreSignedUrlRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest?: DescribeIssueAttachmentPreSignedUrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueAttachmentPreSignedUrl(describeIssueAttachmentPreSignedUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过状态以及状态的更新时间查询事项列表
     * @summary 通过状态以及状态的更新时间查询事项列表
     * @param {DescribeIssueByStatusUpdateRequest} [describeIssueByStatusUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest?: DescribeIssueByStatusUpdateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueByStatusUpdate(describeIssueByStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项评论列表
     * @summary 事项评论列表查询
     * @param {DescribeIssueCommentListRequest} [describeIssueCommentListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueCommentList(describeIssueCommentListRequest?: DescribeIssueCommentListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueCommentList(describeIssueCommentListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取某个事项的自定义属性变更日志
     * @summary 事项的自定义属性变更日志查询
     * @param {DescribeIssueCustomFieldLogListRequest} [describeIssueCustomFieldLogListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest?: DescribeIssueCustomFieldLogListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueCustomFieldLogList(describeIssueCustomFieldLogListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项附件的下载地址
     * @summary 事项附件的下载地址查询
     * @param {DescribeIssueFileUrlRequest} [describeIssueFileUrlRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueFileUrl(describeIssueFileUrlRequest?: DescribeIssueFileUrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueFileUrl(describeIssueFileUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项筛选器列表
     * @summary 事项筛选器列表查询
     * @param {DescribeIssueFilterListRequest} [describeIssueFilterListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueFilterList(describeIssueFilterListRequest?: DescribeIssueFilterListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueFilterList(describeIssueFilterListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项列表
     * @summary 事项列表查询
     * @param {DescribeIssueListRequest} [describeIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueList(describeIssueListRequest?: DescribeIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueList(describeIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 事项列表（新），返回分页信息
     * @summary 事项查询,返回分页信息
     * @param {DescribeIssueListWithPageRequest} [describeIssueListWithPageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueListWithPage(describeIssueListWithPageRequest?: DescribeIssueListWithPageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueListWithPage(describeIssueListWithPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取某个事项的活动日志
     * @summary 事项活动日志查询
     * @param {DescribeIssueLogListRequest} [describeIssueLogListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueLogList(describeIssueLogListRequest?: DescribeIssueLogListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueLogList(describeIssueLogListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项模块列表
     * @summary 事项模块列表查询
     * @param {DescribeWikiListRequest} [describeWikiListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueModuleList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueModuleList(describeWikiListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项的引用资源列表
     * @summary 事项的引用资源列表查询
     * @param {DescribeIssueReferenceResourcesRequest} [describeIssueReferenceResourcesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueReferenceResources(describeIssueReferenceResourcesRequest?: DescribeIssueReferenceResourcesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueReferenceResources(describeIssueReferenceResourcesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项关联的代码仓库信息
     * @summary 事项关联的代码仓库信息查询
     * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueRelatedRepos(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueRelatedRepos(describeIssueRelatedReposRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询事项关联的项目集中的工作项
     * @summary 事项关联的项目集中的工作项查询
     * @param {DescribeIssueRelatedWorkItemListRequest} [describeIssueRelatedWorkItemListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest?: DescribeIssueRelatedWorkItemListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueRelatedWorkItemList(describeIssueRelatedWorkItemListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取某个事项加入的所有版本
     * @summary 事项加入的版本查询
     * @param {DescribeIssueRelatedReposRequest} [describeIssueRelatedReposRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueReleaseList(describeIssueRelatedReposRequest?: DescribeIssueRelatedReposRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueReleaseList(describeIssueRelatedReposRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 状态变更记录
     * @summary 事项的状态变更记录查询
     * @param {DescribeIssueStatusChangeLogListRequest} [describeIssueStatusChangeLogListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest?: DescribeIssueStatusChangeLogListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueStatusChangeLogList(describeIssueStatusChangeLogListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询工时日志列表
     * @summary 事项的工时日志查询
     * @param {DescribeIssueWorkLogListRequest} [describeIssueWorkLogListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIssueWorkLogList(describeIssueWorkLogListRequest?: DescribeIssueWorkLogListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIssueWorkLogList(describeIssueWorkLogListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询迭代详情
     * @summary 迭代详情查询
     * @param {DeleteIterationRequest} [deleteIterationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIteration(deleteIterationRequest?: DeleteIterationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIteration(deleteIterationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 迭代列表
     * @summary 迭代列表获取
     * @param {DescribeIterationListRequest} [describeIterationListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeIterationList(describeIterationListRequest?: DescribeIterationListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeIterationList(describeIterationListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取团队成员的 SSH 公钥列表
     * @summary 仓库设置-获取团队成员的SSH公钥列表
     * @param {DescribeMemberSshKeyRequest} [describeMemberSshKeyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMemberSshKey(describeMemberSshKeyRequest?: DescribeMemberSshKeyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMemberSshKey(describeMemberSshKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求列表
     * @summary 合并请求-查询合并请求列表
     * @param {DescribeMergeReqCommitsRequest} [describeMergeReqCommitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeReqCommits(describeMergeReqCommitsRequest?: DescribeMergeReqCommitsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeReqCommits(describeMergeReqCommitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求详情
     * @summary 合并请求-查询合并请求详情
     * @param {DescribeMergeReqInfoRequest} [describeMergeReqInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeReqInfo(describeMergeReqInfoRequest?: DescribeMergeReqInfoRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeReqInfo(describeMergeReqInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求详情信息
     * @summary 合并请求-查询合并请求详情信息
     * @param {DescribeMergeRequestRequest} [describeMergeRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeRequest(describeMergeRequestRequest?: DescribeMergeRequestRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeRequest(describeMergeRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取合并请求文件修改记录
     * @summary 合并请求-获取合并请求文件修改记录
     * @param {DescribeMergeRequestFileDiffRequest} [describeMergeRequestFileDiffRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest?: DescribeMergeRequestFileDiffRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeRequestFileDiff(describeMergeRequestFileDiffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询合并请求操作记录
     * @summary 合并请求-查询合并请求操作记录
     * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeRequestLog(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeRequestLog(modifyCloseMRRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取合并请求的参与者
     * @summary 合并请求-获取合并请求的评审者
     * @param {DescribeMergeRequestReviewersRequest} [describeMergeRequestReviewersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMergeRequestReviewers(describeMergeRequestReviewersRequest?: DescribeMergeRequestReviewersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMergeRequestReviewers(describeMergeRequestReviewersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取当前用户拥有读权限的仓库列表
     * @summary 仓库信息-获取当前用户拥有读权限的仓库列表
     * @param {DescribeMyDepotsRequest} [describeMyDepotsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeMyDepots(describeMyDepotsRequest?: DescribeMyDepotsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeMyDepots(describeMyDepotsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取提交的note信息
     * @summary 仓库信息-获取提交的note信息
     * @param {DescribeNotesByCommitsRequest} [describeNotesByCommitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeNotesByCommits(describeNotesByCommitsRequest?: DescribeNotesByCommitsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeNotesByCommits(describeNotesByCommitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 单个项目查询
     * @summary 单个项目查询
     * @param {DescribeOneProjectRequest} [describeOneProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeOneProject(describeOneProjectRequest?: DescribeOneProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeOneProject(describeOneProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取个人外部仓库
     * @summary 个人外部仓库获取
     * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePersonalExternalDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePersonalExternalDepots(describePersonalExternalDepotsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 汉字转拼音
     * @summary 汉字转拼音
     * @param {DescribePinyinRequest} [describePinyinRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePinyin(describePinyinRequest?: DescribePinyinRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePinyin(describePinyinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组列表查询（指定资源类型）
     * @summary 权限组列表查询（指定资源类型）
     * @param {DescribePoliciesOnResourceTypeRequest} [describePoliciesOnResourceTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest?: DescribePoliciesOnResourceTypeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePoliciesOnResourceType(describePoliciesOnResourceTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组详情获取
     * @summary 权限组详情获取
     * @param {DescribePolicyRequest} [describePolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePolicy(describePolicyRequest?: DescribePolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePolicy(describePolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 预签名信息获取，上传文件
     * @summary 预签名URL获取
     * @param {DescribePreSignUploadUrlRequest} [describePreSignUploadUrlRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePreSignUploadUrl(describePreSignUploadUrlRequest?: DescribePreSignUploadUrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePreSignUploadUrl(describePreSignUploadUrlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 资源权限判定模式获取
     * @summary 资源权限判定模式获取
     * @param {DescribePredicatePolicyOnResourceRequest} [describePredicatePolicyOnResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest?: DescribePredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePredicatePolicyOnResource(describePredicatePolicyOnResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集下项目列表查询
     * @summary 项目集下项目列表查询
     * @param {DescribeProgramProjectsRequest} [describeProgramProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProgramProjects(describeProgramProjectsRequest?: DescribeProgramProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProgramProjects(describeProgramProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集列表查询
     * @summary 项目集列表查询
     * @param {DescribeProgramsRequest} [describeProgramsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePrograms(describeProgramsRequest?: DescribeProgramsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describePrograms(describeProgramsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目公告查询
     * @summary 项目公告查询
     * @param {DescribeProjectAnnouncementRequest} [describeProjectAnnouncementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectAnnouncement(describeProjectAnnouncementRequest?: DescribeProjectAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectAnnouncement(describeProjectAnnouncementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目公告列表查询
     * @summary 项目公告列表查询
     * @param {DescribeProjectAnnouncementsRequest} [describeProjectAnnouncementsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectAnnouncements(describeProjectAnnouncementsRequest?: DescribeProjectAnnouncementsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectAnnouncements(describeProjectAnnouncementsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目查询(通过项目名称)
     * @summary 项目查询(通过项目名称)
     * @param {DescribeProjectByNameRequest} [describeProjectByNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectByName(describeProjectByNameRequest?: DescribeProjectByNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectByName(describeProjectByNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目凭据列表查询
     * @summary 项目凭据列表查询
     * @param {DescribeProjectCredentialsRequest} [describeProjectCredentialsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectCredentials(describeProjectCredentialsRequest?: DescribeProjectCredentialsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectCredentials(describeProjectCredentialsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取仓库分支列表
     * @summary 仓库分支列表获取
     * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectDepotBranches(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectDepotBranches(describeProjectDepotBranchesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取分支下的提交列表
     * @summary 分支下的提交列表获取
     * @param {DescribeProjectDepotCommitsRequest} [describeProjectDepotCommitsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectDepotCommits(describeProjectDepotCommitsRequest?: DescribeProjectDepotCommitsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectDepotCommits(describeProjectDepotCommitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询项目下所有的仓库信息列表
     * @summary 仓库信息-查询项目下所有的仓库信息列表
     * @param {DescribeProjectDepotInfoListRequest} [describeProjectDepotInfoListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectDepotInfoList(describeProjectDepotInfoListRequest?: DescribeProjectDepotInfoListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectDepotInfoList(describeProjectDepotInfoListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取仓库的标签列表
     * @summary 仓库的标签列表获取
     * @param {DescribeProjectDepotBranchesRequest} [describeProjectDepotBranchesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectDepotTags(describeProjectDepotBranchesRequest?: DescribeProjectDepotBranchesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectDepotTags(describeProjectDepotBranchesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取项目仓库列表
     * @summary 项目仓库列表获取
     * @param {DescribePersonalExternalDepotsRequest} [describePersonalExternalDepotsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectDepots(describePersonalExternalDepotsRequest?: DescribePersonalExternalDepotsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectDepots(describePersonalExternalDepotsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询具体事项类型的属性列表
     * @summary 具体事项类型的属性列表查询
     * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectIssueFieldList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectIssueFieldList(describeProjectIssueFieldListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询具体事项类型的状态列表
     * @summary 具体事项类型的状态列表查询
     * @param {DescribeProjectIssueFieldListRequest} [describeProjectIssueFieldListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectIssueStatusList(describeProjectIssueFieldListRequest?: DescribeProjectIssueFieldListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectIssueStatusList(describeProjectIssueFieldListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询项目事项类型列表
     * @summary 项目事项类型列表查询
     * @param {DescribeProjectIssueTypeListRequest} [describeProjectIssueTypeListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectIssueTypeList(describeProjectIssueTypeListRequest?: DescribeProjectIssueTypeListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectIssueTypeList(describeProjectIssueTypeListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目列表查询-指定项目标签
     * @summary 项目列表查询-指定项目标签
     * @param {DescribeProjectLabelsRequest} [describeProjectLabelsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectLabels(describeProjectLabelsRequest?: DescribeProjectLabelsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectLabels(describeProjectLabelsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目成员主体查询(包含用户组、部门、成员)
     * @summary 项目成员主体查询(包含用户组、部门、成员)
     * @param {DescribeProjectMemberPrincipalsRequest} [describeProjectMemberPrincipalsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest?: DescribeProjectMemberPrincipalsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectMemberPrincipals(describeProjectMemberPrincipalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目成员列表查询
     * @summary 项目成员列表查询
     * @param {DescribeProjectMembersRequest} [describeProjectMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectMembers(describeProjectMembersRequest?: DescribeProjectMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectMembers(describeProjectMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取项目下的合并请求列表
     * @summary 合并请求-获取项目下的合并请求列表
     * @param {DescribeProjectMergeRequestsRequest} [describeProjectMergeRequestsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectMergeRequests(describeProjectMergeRequestsRequest?: DescribeProjectMergeRequestsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectMergeRequests(describeProjectMergeRequestsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目用户组查询
     * @summary 项目用户组查询
     * @param {DescribeProjectRolesRequest} [describeProjectRolesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectRoles(describeProjectRolesRequest?: DescribeProjectRolesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectRoles(describeProjectRolesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目查询（通过一级菜单名查询开启某个模块的项目）
     * @summary 项目查询（通过一级菜单名）
     * @param {DescribeProjectsByFeatureRequest} [describeProjectsByFeatureRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProjectsByFeature(describeProjectsByFeatureRequest?: DescribeProjectsByFeatureRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProjectsByFeature(describeProjectsByFeatureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询保护分支详情
     * @summary 仓库设置-查询保护分支详情
     * @param {DescribeProtectedBranchRequest} [describeProtectedBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProtectedBranch(describeProtectedBranchRequest?: DescribeProtectedBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProtectedBranch(describeProtectedBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询保护分支成员
     * @summary 仓库设置-查询保护分支成员
     * @param {DescribeProtectedBranchMembersRequest} [describeProtectedBranchMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProtectedBranchMembers(describeProtectedBranchMembersRequest?: DescribeProtectedBranchMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProtectedBranchMembers(describeProtectedBranchMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询保护分支
     * @summary 仓库设置-查询保护分支列表
     * @param {DescribeProtectedBranchesRequest} [describeProtectedBranchesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeProtectedBranches(describeProtectedBranchesRequest?: DescribeProtectedBranchesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeProtectedBranches(describeProtectedBranchesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 管理测试用例
     * @summary 事项关联的测试用例查询
     * @param {DescribeRelatedCaseListRequest} [describeRelatedCaseListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeRelatedCaseList(describeRelatedCaseListRequest?: DescribeRelatedCaseListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeRelatedCaseList(describeRelatedCaseListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 版本详情
     * @summary 版本详情查询
     * @param {DescribeReleaseRequest} [describeReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeRelease(describeReleaseRequest?: DescribeReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeRelease(describeReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 版本发布范围
     * @summary 版本发布范围查询
     * @param {DescribeReleaseIssueListRequest} [describeReleaseIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeReleaseIssueList(describeReleaseIssueListRequest?: DescribeReleaseIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeReleaseIssueList(describeReleaseIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询项目内版本列表
     * @summary 版本列表查询
     * @param {DescribeReleaseListRequest} [describeReleaseListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeReleaseList(describeReleaseListRequest?: DescribeReleaseListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeReleaseList(describeReleaseListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试报告详情
     * @summary 测试报告详情
     * @param {DeleteReportRequest} [deleteReportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeReport(deleteReportRequest?: DeleteReportRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeReport(deleteReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试报告列表
     * @summary 测试报告列表
     * @param {DescribeReportListRequest} [describeReportListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeReportList(describeReportListRequest?: DescribeReportListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeReportList(describeReportListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询需求关联缺陷列表
     * @summary 需求关联缺陷列表查询
     * @param {DescribeRequirementDefectRelationRequest} [describeRequirementDefectRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeRequirementDefectRelation(describeRequirementDefectRelationRequest?: DescribeRequirementDefectRelationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeRequirementDefectRelation(describeRequirementDefectRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 需求关联的测试用例列表
     * @summary 需求关联的测试用例列表
     * @param {DescribeRequirementTestCaseListRequest} [describeRequirementTestCaseListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeRequirementTestCaseList(describeRequirementTestCaseListRequest?: DescribeRequirementTestCaseListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeRequirementTestCaseList(describeRequirementTestCaseListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 被引用资源列表查询
     * @summary 被引用资源列表查询
     * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeResourceReferencesCited(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeResourceReferencesCited(describeResourceReferencesCitingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 引用资源列表查询
     * @summary 引用资源列表查询
     * @param {DescribeResourceReferencesCitingRequest} [describeResourceReferencesCitingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeResourceReferencesCiting(describeResourceReferencesCitingRequest?: DescribeResourceReferencesCitingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeResourceReferencesCiting(describeResourceReferencesCitingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组可用资源范围分页查询
     * @summary 权限组可用资源范围分页查询
     * @param {DescribeResourceScopeListOnPolicyRequest} [describeResourceScopeListOnPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest?: DescribeResourceScopeListOnPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeResourceScopeListOnPolicy(describeResourceScopeListOnPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取自己的合并请求列表
     * @summary 合并请求-获取自己的合并请求列表
     * @param {DescribeSelfMergeRequestsRequest} [describeSelfMergeRequestsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeSelfMergeRequests(describeSelfMergeRequestsRequest?: DescribeSelfMergeRequestsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeSelfMergeRequests(describeSelfMergeRequestsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取单个合并请求行评论和改动文件diff行评论
     * @summary 合并请求-获取单个合并请求行评论和改动文件diff行评论
     * @param {DescribeSingeMergeRequestNotesRequest} [describeSingeMergeRequestNotesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest?: DescribeSingeMergeRequestNotesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeSingeMergeRequestNotes(describeSingeMergeRequestNotesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取当前用户所有SSH公钥
     * @summary 仓库设置-获取当前用户所有SSH公钥
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeSshKey(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeSshKey(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询子事项列表
     * @summary 子事项列表查询
     * @param {DescribeSubIssueListRequest} [describeSubIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeSubIssueList(describeSubIssueListRequest?: DescribeSubIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeSubIssueList(describeSubIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 团队信息查询
     * @summary 团队信息查询
     * @param {any} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeam(body?: any, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeam(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询团队管理员
     * @summary 团队管理员查询
     * @param {DescribeTeamAdminMembersRequest} [describeTeamAdminMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamAdminMembers(describeTeamAdminMembersRequest?: DescribeTeamAdminMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamAdminMembers(describeTeamAdminMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品列表查询
     * @summary 制品列表查询
     * @param {DescribeTeamArtifactsRequest} [describeTeamArtifactsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamArtifacts(describeTeamArtifactsRequest?: DescribeTeamArtifactsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamArtifacts(describeTeamArtifactsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
     * @summary 仓库信息-获取团队下仓库列表，仅团队所有者或团队管理员可以调用。
     * @param {DescribeTeamDepotInfoListRequest} [describeTeamDepotInfoListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamDepotInfoList(describeTeamDepotInfoListRequest?: DescribeTeamDepotInfoListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamDepotInfoList(describeTeamDepotInfoListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询企业事项类型列表
     * @summary 企业事项类型列表查询
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamIssueTypeList(body?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamIssueTypeList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询团队事项列表
     * @summary 查询团队事项列表
     * @param {DescribeTeamIssuesRequest} [describeTeamIssuesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamIssues(describeTeamIssuesRequest?: DescribeTeamIssuesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamIssues(describeTeamIssuesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过用户 ID 查询团队成员信息
     * @summary 团队成员信息查询（通过用户 ID）
     * @param {DescribeTeamMemberRequest} [describeTeamMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamMember(describeTeamMemberRequest?: DescribeTeamMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamMember(describeTeamMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过用户 Email 查询团队成员信息
     * @summary 团队成员信息查询（通过用户 Email）
     * @param {DescribeTeamMemberByEmailRequest} [describeTeamMemberByEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamMemberByEmail(describeTeamMemberByEmailRequest?: DescribeTeamMemberByEmailRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamMemberByEmail(describeTeamMemberByEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 团队成员列表查询
     * @summary 团队成员列表查询
     * @param {DescribeTeamMembersRequest} [describeTeamMembersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTeamMembers(describeTeamMembersRequest?: DescribeTeamMembersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTeamMembers(describeTeamMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务详情
     * @summary 测试任务详情
     * @param {DescribeTestRequest} [describeTestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTest(describeTestRequest?: DescribeTestRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTest(describeTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例详情
     * @summary 测试用例详情
     * @param {DeleteTestCaseRequest} [deleteTestCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestCase(deleteTestCaseRequest?: DeleteTestCaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestCase(deleteTestCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例分页数据
     * @summary 测试用例列表
     * @param {DescribeTestCaseListRequest} [describeTestCaseListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestCaseList(describeTestCaseListRequest?: DescribeTestCaseListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestCaseList(describeTestCaseListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例分组列表
     * @summary 测试用例分组列表
     * @param {DescribeTestCaseSectionListRequest} [describeTestCaseSectionListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestCaseSectionList(describeTestCaseSectionListRequest?: DescribeTestCaseSectionListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestCaseSectionList(describeTestCaseSectionListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务关联的缺陷列表
     * @summary 测试任务关联的缺陷列表
     * @param {DescribeTestDefectListRequest} [describeTestDefectListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestDefectList(describeTestDefectListRequest?: DescribeTestDefectListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestDefectList(describeTestDefectListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试任务列表
     * @summary 测试任务列表
     * @param {DescribeTestListRequest} [describeTestListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestList(describeTestListRequest?: DescribeTestListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestList(describeTestListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试计划详情
     * @summary 测试计划详情
     * @param {DeleteTestRunRequest} [deleteTestRunRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestRun(deleteTestRunRequest?: DeleteTestRunRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestRun(deleteTestRunRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试计划列表
     * @summary 测试计划列表
     * @param {DescribeTestRunListRequest} [describeTestRunListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeTestRunList(describeTestRunListRequest?: DescribeTestRunListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeTestRunList(describeTestRunListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组列表分页查询
     * @summary 用户组列表分页查询
     * @param {DescribeUserGroupsRequest} [describeUserGroupsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeUserGroups(describeUserGroupsRequest?: DescribeUserGroupsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeUserGroups(describeUserGroupsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询团队成员待交接事项列表
     * @summary 查询团队成员待交接事项列表
     * @param {DescribeUserHandoverIssuesRequest} [describeUserHandoverIssuesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeUserHandoverIssues(describeUserHandoverIssuesRequest?: DescribeUserHandoverIssuesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeUserHandoverIssues(describeUserHandoverIssuesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目列表查询（已加入的项目）
     * @summary 项目列表查询（已加入的项目）
     * @param {DescribeUserProjectsRequest} [describeUserProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeUserProjects(describeUserProjectsRequest?: DescribeUserProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeUserProjects(describeUserProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户列表查询（根据用户组id分页查询）
     * @summary 用户列表查询（根据用户组id分页查询）
     * @param {DescribeUsersByGroupIdRequest} [describeUsersByGroupIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeUsersByGroupId(describeUsersByGroupIdRequest?: DescribeUsersByGroupIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeUsersByGroupId(describeUsersByGroupIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 授权用户列表分页查询（指定资源）
     * @summary 授权用户列表分页查询（指定资源）
     * @param {DescribeUsersOnResourceAndGrantObjectRequest} [describeUsersOnResourceAndGrantObjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest?: DescribeUsersOnResourceAndGrantObjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeUsersOnResourceAndGrantObject(describeUsersOnResourceAndGrantObjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 事项分解信息
     * @summary 事项分解信息查询
     * @param {DescribeWorkItemSalvageRequest} [describeWorkItemSalvageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeWorkItemSalvage(describeWorkItemSalvageRequest?: DescribeWorkItemSalvageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeWorkItemSalvage(describeWorkItemSalvageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取一个用户在团队内的所有代办事项（即前端页面上个人工作台中的事项列表）
     * @summary 用户在团队内的所有代办事项查询
     * @param {DescribeWorkbenchIssueListRequest} [describeWorkbenchIssueListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeWorkbenchIssueList(describeWorkbenchIssueListRequest?: DescribeWorkbenchIssueListRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).describeWorkbenchIssueList(describeWorkbenchIssueListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 授权收回，只收回参数指定的授权，已有其它授权不受影响
     * @summary 授权收回，只收回参数指定的授权，已有其它授权不受影响
     * @param {DetachFromResourceRequest} [detachFromResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detachFromResource(detachFromResourceRequest?: DetachFromResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).detachFromResource(detachFromResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
     * @summary 权限组可用资源删除，只删除参数指定的资源，已有的其它资源不受影响
     * @param {DetachResourceScopeOnPolicyRequest} [detachResourceScopeOnPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest?: DetachResourceScopeOnPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).detachResourceScopeOnPolicy(detachResourceScopeOnPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品版本下载 禁止、解禁
     * @summary 制品版本下载 禁止、解禁
     * @param {ForbiddenArtifactVersionRequest} [forbiddenArtifactVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forbiddenArtifactVersion(forbiddenArtifactVersionRequest?: ForbiddenArtifactVersionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forbiddenArtifactVersion(forbiddenArtifactVersionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 初始化项目配置方案
     * @summary 项目配置方案初始化
     * @param {InitProjectTemplateRequest} [initProjectTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public initProjectTemplate(initProjectTemplateRequest?: InitProjectTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).initProjectTemplate(initProjectTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 制品授信清单修改
     * @summary 制品授信清单修改
     * @param {ModifyArtifactCreditRequest} [modifyArtifactCreditRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyArtifactCredit(modifyArtifactCreditRequest?: ModifyArtifactCreditRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyArtifactCredit(modifyArtifactCreditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 指定版本制品的制品属性修改
     * @summary 制品属性修改
     * @param {ModifyArtifactPropertiesRequest} [modifyArtifactPropertiesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyArtifactProperties(modifyArtifactPropertiesRequest?: ModifyArtifactPropertiesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyArtifactProperties(modifyArtifactPropertiesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改保护分支规则相关信息
     * @summary 仓库设置-修改保护分支规则相关信息
     * @param {ModifyBranchProtectionRequest} [modifyBranchProtectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyBranchProtection(modifyBranchProtectionRequest?: ModifyBranchProtectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyBranchProtection(modifyBranchProtectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 更改保护分支管理员权限
     * @summary 仓库设置-更改保护分支管理员权限
     * @param {ModifyBranchProtectionMemberPermissionRequest} [modifyBranchProtectionMemberPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest?: ModifyBranchProtectionMemberPermissionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyBranchProtectionMemberPermission(modifyBranchProtectionMemberPermissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 云账号更新
     * @summary CD 云账号更新
     * @param {ModifyCdCloudAccountRequest} [modifyCdCloudAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCdCloudAccount(modifyCdCloudAccountRequest?: ModifyCdCloudAccountRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCdCloudAccount(modifyCdCloudAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 主机组修改
     * @summary CD 主机组修改
     * @param {ModifyCdHostServerGroupRequest} [modifyCdHostServerGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCdHostServerGroup(modifyCdHostServerGroupRequest?: ModifyCdHostServerGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCdHostServerGroup(modifyCdHostServerGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ CD 部署流程修改
     * @summary CD 部署流程修改
     * @param {ModifyCdPipelineRequest} [modifyCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCdPipeline(modifyCdPipelineRequest?: ModifyCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCdPipeline(modifyCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 使用、取消使用仓库规范
     * @summary 仓库设置-使用、取消使用仓库规范
     * @param {ModifyChooseDepotSpecRequest} [modifyChooseDepotSpecRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyChooseDepotSpec(modifyChooseDepotSpecRequest?: ModifyChooseDepotSpecRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyChooseDepotSpec(modifyChooseDepotSpecRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 关闭合并请求
     * @summary 合并请求-关闭合并请求
     * @param {ModifyCloseMRRequest} [modifyCloseMRRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCloseMR(modifyCloseMRRequest?: ModifyCloseMRRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCloseMR(modifyCloseMRRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 自定义构建节点启用、禁用
     * @summary 自定义构建节点启用、禁用
     * @param {ModifyCodingCIAgentEnableRequest} [modifyCodingCIAgentEnableRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest?: ModifyCodingCIAgentEnableRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCodingCIAgentEnable(modifyCodingCIAgentEnableRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建计划修改
     * @summary 构建计划修改
     * @param {ModifyCodingCIJobRequest} [modifyCodingCIJobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyCodingCIJob(modifyCodingCIJobRequest?: ModifyCodingCIJobRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyCodingCIJob(modifyCodingCIJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库默认分支
     * @summary 仓库设置-修改仓库默认分支
     * @param {ModifyDefaultBranchRequest} [modifyDefaultBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDefaultBranch(modifyDefaultBranchRequest?: ModifyDefaultBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDefaultBranch(modifyDefaultBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改缺陷所属的需求
     * @summary 缺陷所属的需求修改
     * @param {ModifyDefectRelatedRequirementRequest} [modifyDefectRelatedRequirementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest?: ModifyDefectRelatedRequirementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDefectRelatedRequirement(modifyDefectRelatedRequirementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改部门信息(部门名，移动位置)
     * @summary 部门信息修改
     * @param {ModifyDepartmentRequest} [modifyDepartmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepartment(modifyDepartmentRequest?: ModifyDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepartment(modifyDepartmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部门负责人管理
     * @summary 部门负责人管理
     * @param {ModifyDepartmentAssigneeRequest} [modifyDepartmentAssigneeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepartmentAssignee(modifyDepartmentAssigneeRequest?: ModifyDepartmentAssigneeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepartmentAssignee(modifyDepartmentAssigneeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部门成员管理
     * @summary 部门成员管理
     * @param {ModifyDepartmentMemberRequest} [modifyDepartmentMemberRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepartmentMember(modifyDepartmentMemberRequest?: ModifyDepartmentMemberRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepartmentMember(modifyDepartmentMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库描述
     * @summary 仓库信息-修改仓库描述
     * @param {ModifyDepotDescriptionRequest} [modifyDepotDescriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotDescription(modifyDepotDescriptionRequest?: ModifyDepotDescriptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotDescription(modifyDepotDescriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改 git 仓库文件推送规则
     * @summary 仓库设置-修改git仓库文件推送规则
     * @param {ModifyDepotFilePushRuleRequest} [modifyDepotFilePushRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotFilePushRule(modifyDepotFilePushRuleRequest?: ModifyDepotFilePushRuleRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotFilePushRule(modifyDepotFilePushRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改 git 仓库特权者文件推送权限
     * @summary 仓库设置-修改 git 仓库特权者文件推送权限
     * @param {ModifyDepotFilePushRuleDenyPrivilegeRequest} [modifyDepotFilePushRuleDenyPrivilegeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest?: ModifyDepotFilePushRuleDenyPrivilegeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotFilePushRuleDenyPrivilege(modifyDepotFilePushRuleDenyPrivilegeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改、新增仓库级别的仓库规范
     * @summary 仓库设置-修改、新增仓库级别的仓库规范
     * @param {ModifyDepotLevelDepotSpecRequest} [modifyDepotLevelDepotSpecRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest?: ModifyDepotLevelDepotSpecRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotLevelDepotSpec(modifyDepotLevelDepotSpecRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库名称
     * @summary 仓库信息-修改仓库名称
     * @param {ModifyDepotNameRequest} [modifyDepotNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotName(modifyDepotNameRequest?: ModifyDepotNameRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotName(modifyDepotNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库推送设置
     * @summary 仓库设置-修改仓库推送设置
     * @param {ModifyDepotPushSettingRequest} [modifyDepotPushSettingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotPushSetting(modifyDepotPushSettingRequest?: ModifyDepotPushSettingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotPushSetting(modifyDepotPushSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库容量
     * @summary 仓库信息-修改仓库容量
     * @param {ModifyDepotQuotaRequest} [modifyDepotQuotaRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotQuota(modifyDepotQuotaRequest?: ModifyDepotQuotaRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotQuota(modifyDepotQuotaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库设置
     * @summary 仓库设置-修改仓库设置
     * @param {ModifyDepotSettingsRequest} [modifyDepotSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotSettings(modifyDepotSettingsRequest?: ModifyDepotSettingsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotSettings(modifyDepotSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库是否开源设置
     * @summary 仓库设置-修改仓库是否开源设置
     * @param {ModifyDepotSharedSettingRequest} [modifyDepotSharedSettingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyDepotSharedSetting(modifyDepotSharedSettingRequest?: ModifyDepotSharedSettingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyDepotSharedSetting(modifyDepotSharedSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 将某次提交cherry-pick到指定分支
     * @summary Git提交-将某次提交cherry-pick到指定分支
     * @param {ModifyGitCherryPickRequest} [modifyGitCherryPickRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitCherryPick(modifyGitCherryPickRequest?: ModifyGitCherryPickRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitCherryPick(modifyGitCherryPickRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 还原某次提交
     * @summary Git提交-还原某次提交
     * @param {ModifyGitCommitRevertRequest} [modifyGitCommitRevertRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitCommitRevert(modifyGitCommitRevertRequest?: ModifyGitCommitRevertRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitCommitRevert(modifyGitCommitRevertRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改提交对应的流水线状态
     * @summary Git提交-修改提交对应的流水线状态
     * @param {ModifyGitCommitStatusRequest} [modifyGitCommitStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitCommitStatus(modifyGitCommitStatusRequest?: ModifyGitCommitStatusRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitCommitStatus(modifyGitCommitStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 仓库归档
     * @summary 仓库设置-仓库归档
     * @param {ModifyGitDepotArchiveRequest} [modifyGitDepotArchiveRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitDepotArchive(modifyGitDepotArchiveRequest?: ModifyGitDepotArchiveRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitDepotArchive(modifyGitDepotArchiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 仓库解除归档
     * @summary 仓库设置-仓库解除归档
     * @param {ModifyGitDepotUnarchiveRequest} [modifyGitDepotUnarchiveRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest?: ModifyGitDepotUnarchiveRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitDepotUnarchive(modifyGitDepotUnarchiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库某文件
     * @summary Git提交-修改仓库某文件
     * @param {ModifyGitFilesRequest} [modifyGitFilesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitFiles(modifyGitFilesRequest?: ModifyGitFilesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitFiles(modifyGitFilesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 将源分支的改动合并到目标分支
     * @summary 合并请求-将源分支的改动合并到目标分支
     * @param {ModifyGitMergeBranchRequest} [modifyGitMergeBranchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitMergeBranch(modifyGitMergeBranchRequest?: ModifyGitMergeBranchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitMergeBranch(modifyGitMergeBranchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改合并请求的标题和描述信息
     * @summary 合并请求-修改合并请求的标题和描述信息
     * @param {ModifyGitMergeRequestRequest} [modifyGitMergeRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitMergeRequest(modifyGitMergeRequestRequest?: ModifyGitMergeRequestRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitMergeRequest(modifyGitMergeRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 合并请求中的源分支进行rebase操作
     * @summary 合并请求-合并请求中的源分支进行rebase操作
     * @param {ModifyGitMergeRequestRebaseRequest} [modifyGitMergeRequestRebaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest?: ModifyGitMergeRequestRebaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitMergeRequestRebase(modifyGitMergeRequestRebaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ git变基操作
     * @summary 仓库信息-git变基操作
     * @param {ModifyGitRebaseRequest} [modifyGitRebaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitRebase(modifyGitRebaseRequest?: ModifyGitRebaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitRebase(modifyGitRebaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改仓库版本信息
     * @summary 版本信息-修改仓库版本信息
     * @param {ModifyGitReleaseRequest} [modifyGitReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitRelease(modifyGitReleaseRequest?: ModifyGitReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitRelease(modifyGitReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 仓库转移至同团队下的其他项目中
     * @summary 仓库信息-仓库转移至同团队下的其他项目中
     * @param {ModifyGitTransferRequest} [modifyGitTransferRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyGitTransfer(modifyGitTransferRequest?: ModifyGitTransferRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyGitTransfer(modifyGitTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改事项
     * @summary 事项修改
     * @param {ModifyIssueRequest} [modifyIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIssue(modifyIssueRequest?: ModifyIssueRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIssue(modifyIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改事项评论
     * @summary 事项评论修改
     * @param {ModifyIssueCommentRequest} [modifyIssueCommentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIssueComment(modifyIssueCommentRequest?: ModifyIssueCommentRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIssueComment(modifyIssueCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改事项描述
     * @summary 事项描述修改
     * @param {ModifyIssueDescriptionRequest} [modifyIssueDescriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIssueDescription(modifyIssueDescriptionRequest?: ModifyIssueDescriptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIssueDescription(modifyIssueDescriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改事项父需求
     * @summary 事项父需求修改
     * @param {ModifyIssueParentRequirementRequest} [modifyIssueParentRequirementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIssueParentRequirement(modifyIssueParentRequirementRequest?: ModifyIssueParentRequirementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIssueParentRequirement(modifyIssueParentRequirementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改迭代
     * @summary 迭代修改
     * @param {ModifyIterationRequest} [modifyIterationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIteration(modifyIterationRequest?: ModifyIterationRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIteration(modifyIterationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改迭代状态
     * @summary 修改迭代状态
     * @param {ModifyIterationStatusRequest} [modifyIterationStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyIterationStatus(modifyIterationStatusRequest?: ModifyIterationStatusRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyIterationStatus(modifyIterationStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 执行合并
     * @summary 合并信息-执行合并
     * @param {ModifyMergeMRRequest} [modifyMergeMRRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyMergeMR(modifyMergeMRRequest?: ModifyMergeMRRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyMergeMR(modifyMergeMRRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改合并请求基础设置
     * @summary 仓库设置-修改合并请求基础设置
     * @param {ModifyMergeRequestBasicSettingsRequest} [modifyMergeRequestBasicSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest?: ModifyMergeRequestBasicSettingsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyMergeRequestBasicSettings(modifyMergeRequestBasicSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改合并请求合并提交消息模版
     * @summary 仓库设置-修改合并请求合并提交消息模版
     * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyMergeRequestMergeCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改合并请求合并压缩提交消息模版
     * @summary 仓库设置-修改合并请求合并压缩提交消息模版
     * @param {ModifyMergeRequestSquashCommitMessageTemplateRequest} [modifyMergeRequestSquashCommitMessageTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest?: ModifyMergeRequestSquashCommitMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyMergeRequestSquashCommitMessageTemplate(modifyMergeRequestSquashCommitMessageTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 权限组修改
     * @summary 权限组修改
     * @param {ModifyPolicyRequest} [modifyPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyPolicy(modifyPolicyRequest?: ModifyPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyPolicy(modifyPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目信息修改
     * @summary 项目信息修改
     * @param {ModifyProjectRequest} [modifyProjectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyProject(modifyProjectRequest?: ModifyProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyProject(modifyProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目公告更新
     * @summary 项目公告更新
     * @param {ModifyProjectAnnouncementRequest} [modifyProjectAnnouncementRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyProjectAnnouncement(modifyProjectAnnouncementRequest?: ModifyProjectAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyProjectAnnouncement(modifyProjectAnnouncementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目标签修改
     * @summary 项目标签修改
     * @param {ModifyProjectLabelRequest} [modifyProjectLabelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyProjectLabel(modifyProjectLabelRequest?: ModifyProjectLabelRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyProjectLabel(modifyProjectLabelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改版本
     * @summary 版本修改
     * @param {ModifyReleaseRequest} [modifyReleaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyRelease(modifyReleaseRequest?: ModifyReleaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyRelease(modifyReleaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改、新增团队级别的仓库规范
     * @summary 仓库设置-修改、新增团队级别的仓库规范
     * @param {ModifyTeamLevelDepotSpecRequest} [modifyTeamLevelDepotSpecRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest?: ModifyTeamLevelDepotSpecRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTeamLevelDepotSpec(modifyTeamLevelDepotSpecRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过用户 ID 团队成员锁定
     * @summary 团队成员锁定
     * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTeamMemberLocked(modifyTeamMemberUnlockedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过用户 ID 解锁团队成员
     * @summary 团队成员解锁
     * @param {ModifyTeamMemberUnlockedRequest} [modifyTeamMemberUnlockedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest?: ModifyTeamMemberUnlockedRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTeamMemberUnlocked(modifyTeamMemberUnlockedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例修改
     * @summary 测试用例修改
     * @param {ModifyTestCaseRequest} [modifyTestCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTestCase(modifyTestCaseRequest?: ModifyTestCaseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTestCase(modifyTestCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试用例分组修改
     * @summary 测试用例分组修改
     * @param {ModifyTestCaseSectionRequest} [modifyTestCaseSectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTestCaseSection(modifyTestCaseSectionRequest?: ModifyTestCaseSectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTestCaseSection(modifyTestCaseSectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 测试计划修改
     * @summary 测试计划修改
     * @param {ModifyTestRunRequest} [modifyTestRunRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyTestRun(modifyTestRunRequest?: ModifyTestRunRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyTestRun(modifyTestRunRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 项目集工作项分解/取消分解到项目中的事项
     * @summary 项目集工作项分解&取消分解到项目中的事项
     * @param {ModifyWorkItemSplitIssuesRequest} [modifyWorkItemSplitIssuesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest?: ModifyWorkItemSplitIssuesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).modifyWorkItemSplitIssues(modifyWorkItemSplitIssuesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 批量规划迭代
     * @summary 迭代批量规划
     * @param {PlanIterationIssueRequest} [planIterationIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public planIterationIssue(planIterationIssueRequest?: PlanIterationIssueRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).planIterationIssue(planIterationIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 将指定版本的制品的发布状态调整为已发布
     * @summary 制品版本发布
     * @param {DescribeArtifactChecksumsRequest} [describeArtifactChecksumsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public releaseArtifactVersion(describeArtifactChecksumsRequest?: DescribeArtifactChecksumsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).releaseArtifactVersion(describeArtifactChecksumsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部署流程重排序
     * @summary 部署流程重排序
     * @param {ReorderCdPipelinesRequest} [reorderCdPipelinesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reorderCdPipelines(reorderCdPipelinesRequest?: ReorderCdPipelinesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reorderCdPipelines(reorderCdPipelinesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
     * @summary 授权设置，收回授权体在资源中的所有授权，重新设置为参数指定的授权
     * @param {SetGrantToResourceRequest} [setGrantToResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setGrantToResource(setGrantToResourceRequest?: SetGrantToResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setGrantToResource(setGrantToResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 资源权限判定策略设置
     * @summary 资源权限判定策略设置
     * @param {SetPredicatePolicyOnResourceRequest} [setPredicatePolicyOnResourceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest?: SetPredicatePolicyOnResourceRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setPredicatePolicyOnResource(setPredicatePolicyOnResourceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建停止
     * @summary 构建停止
     * @param {DescribeCodingCIBuildStageRequest} [describeCodingCIBuildStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public stopCodingCIBuild(describeCodingCIBuildStageRequest?: DescribeCodingCIBuildStageRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).stopCodingCIBuild(describeCodingCIBuildStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 部署流程触发
     * @summary 部署流程触发
     * @param {TriggerCdPipelineRequest} [triggerCdPipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public triggerCdPipeline(triggerCdPipelineRequest?: TriggerCdPipelineRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).triggerCdPipeline(triggerCdPipelineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 构建触发
     * @summary 构建触发
     * @param {TriggerCodingCIBuildRequest} [triggerCodingCIBuildRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public triggerCodingCIBuild(triggerCodingCIBuildRequest?: TriggerCodingCIBuildRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).triggerCodingCIBuild(triggerCodingCIBuildRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 用户组更新
     * @summary 用户组更新
     * @param {UpdateUserGroupByIdRequest} [updateUserGroupByIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserGroupById(updateUserGroupByIdRequest?: UpdateUserGroupByIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserGroupById(updateUserGroupByIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServiceHookApi - axios parameter creator
 * @export
 */
export const ServiceHookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ✨ Service Hook 创建
         * @summary Service Hook 创建
         * @param {CreateServiceHookRequest} [createServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceHook: async (createServiceHookRequest?: CreateServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 删除
         * @summary Service Hook 删除
         * @param {DeleteServiceHookRequest} [deleteServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceHook: async (deleteServiceHookRequest?: DeleteServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 查询 Service Hook 事件列表，返回事件英文标识、事件中文名、事件分组英文标识、事件分组中文名
         * @summary Service Hook 事件列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeEvents: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 查询
         * @summary Service Hook 查询单条
         * @param {DescribeServiceHookRequest} [describeServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHook: async (describeServiceHookRequest?: DescribeServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 发送记录分页查询
         * @summary Service Hook 发送记录分页查询
         * @param {DescribeServiceHookLogsRequest} [describeServiceHookLogsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHookLogs: async (describeServiceHookLogsRequest?: DescribeServiceHookLogsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeServiceHookLogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeServiceHookLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 列表分页查询
         * @summary Service Hook 列表分页查询
         * @param {DescribeServiceHooksRequest} [describeServiceHooksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHooks: async (describeServiceHooksRequest?: DescribeServiceHooksRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeServiceHooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeServiceHooksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 事件开关
         * @summary Service Hook 事件开关
         * @param {EnabledServiceHookRequest} [enabledServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enabledServiceHook: async (enabledServiceHookRequest?: EnabledServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=EnabledServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enabledServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 修改
         * @summary Service Hook 修改
         * @param {ModifyServiceHookRequest} [modifyServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyServiceHook: async (modifyServiceHookRequest?: ModifyServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 测试
         * @summary Service Hook 测试
         * @param {PingServiceHookRequest} [pingServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServiceHook: async (pingServiceHookRequest?: PingServiceHookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=PingServiceHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pingServiceHookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Service Hook 重发
         * @summary Service Hook 重发
         * @param {ResendServiceHookLogRequest} [resendServiceHookLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendServiceHookLog: async (resendServiceHookLogRequest?: ResendServiceHookLogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ResendServiceHookLog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendServiceHookLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceHookApi - functional programming interface
 * @export
 */
export const ServiceHookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceHookApiAxiosParamCreator(configuration)
    return {
        /**
         * ✨ Service Hook 创建
         * @summary Service Hook 创建
         * @param {CreateServiceHookRequest} [createServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceHook(createServiceHookRequest?: CreateServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceHook(createServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.createServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 删除
         * @summary Service Hook 删除
         * @param {DeleteServiceHookRequest} [deleteServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceHook(deleteServiceHookRequest?: DeleteServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceHook(deleteServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.deleteServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 查询 Service Hook 事件列表，返回事件英文标识、事件中文名、事件分组英文标识、事件分组中文名
         * @summary Service Hook 事件列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeEvents(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeEvents(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.describeEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 查询
         * @summary Service Hook 查询单条
         * @param {DescribeServiceHookRequest} [describeServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeServiceHook(describeServiceHookRequest?: DescribeServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeServiceHook(describeServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.describeServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 发送记录分页查询
         * @summary Service Hook 发送记录分页查询
         * @param {DescribeServiceHookLogsRequest} [describeServiceHookLogsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeServiceHookLogs(describeServiceHookLogsRequest?: DescribeServiceHookLogsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeServiceHookLogs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeServiceHookLogs(describeServiceHookLogsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.describeServiceHookLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 列表分页查询
         * @summary Service Hook 列表分页查询
         * @param {DescribeServiceHooksRequest} [describeServiceHooksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeServiceHooks(describeServiceHooksRequest?: DescribeServiceHooksRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeServiceHooks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeServiceHooks(describeServiceHooksRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.describeServiceHooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 事件开关
         * @summary Service Hook 事件开关
         * @param {EnabledServiceHookRequest} [enabledServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enabledServiceHook(enabledServiceHookRequest?: EnabledServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enabledServiceHook(enabledServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.enabledServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 修改
         * @summary Service Hook 修改
         * @param {ModifyServiceHookRequest} [modifyServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyServiceHook(modifyServiceHookRequest?: ModifyServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyServiceHook(modifyServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.modifyServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 测试
         * @summary Service Hook 测试
         * @param {PingServiceHookRequest} [pingServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingServiceHook(pingServiceHookRequest?: PingServiceHookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnabledServiceHook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingServiceHook(pingServiceHookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.pingServiceHook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Service Hook 重发
         * @summary Service Hook 重发
         * @param {ResendServiceHookLogRequest} [resendServiceHookLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendServiceHookLog(resendServiceHookLogRequest?: ResendServiceHookLogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResendServiceHookLog200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendServiceHookLog(resendServiceHookLogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServiceHookApi.resendServiceHookLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServiceHookApi - factory interface
 * @export
 */
export const ServiceHookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceHookApiFp(configuration)
    return {
        /**
         * ✨ Service Hook 创建
         * @summary Service Hook 创建
         * @param {CreateServiceHookRequest} [createServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceHook(createServiceHookRequest?: CreateServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateServiceHook200Response> {
            return localVarFp.createServiceHook(createServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 删除
         * @summary Service Hook 删除
         * @param {DeleteServiceHookRequest} [deleteServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceHook(deleteServiceHookRequest?: DeleteServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<EnabledServiceHook200Response> {
            return localVarFp.deleteServiceHook(deleteServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 查询 Service Hook 事件列表，返回事件英文标识、事件中文名、事件分组英文标识、事件分组中文名
         * @summary Service Hook 事件列表查询
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeEvents(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<DescribeEvents200Response> {
            return localVarFp.describeEvents(body, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 查询
         * @summary Service Hook 查询单条
         * @param {DescribeServiceHookRequest} [describeServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHook(describeServiceHookRequest?: DescribeServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeServiceHook200Response> {
            return localVarFp.describeServiceHook(describeServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 发送记录分页查询
         * @summary Service Hook 发送记录分页查询
         * @param {DescribeServiceHookLogsRequest} [describeServiceHookLogsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHookLogs(describeServiceHookLogsRequest?: DescribeServiceHookLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeServiceHookLogs200Response> {
            return localVarFp.describeServiceHookLogs(describeServiceHookLogsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 列表分页查询
         * @summary Service Hook 列表分页查询
         * @param {DescribeServiceHooksRequest} [describeServiceHooksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeServiceHooks(describeServiceHooksRequest?: DescribeServiceHooksRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeServiceHooks200Response> {
            return localVarFp.describeServiceHooks(describeServiceHooksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 事件开关
         * @summary Service Hook 事件开关
         * @param {EnabledServiceHookRequest} [enabledServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enabledServiceHook(enabledServiceHookRequest?: EnabledServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<EnabledServiceHook200Response> {
            return localVarFp.enabledServiceHook(enabledServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 修改
         * @summary Service Hook 修改
         * @param {ModifyServiceHookRequest} [modifyServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyServiceHook(modifyServiceHookRequest?: ModifyServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyServiceHook200Response> {
            return localVarFp.modifyServiceHook(modifyServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 测试
         * @summary Service Hook 测试
         * @param {PingServiceHookRequest} [pingServiceHookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServiceHook(pingServiceHookRequest?: PingServiceHookRequest, options?: RawAxiosRequestConfig): AxiosPromise<EnabledServiceHook200Response> {
            return localVarFp.pingServiceHook(pingServiceHookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Service Hook 重发
         * @summary Service Hook 重发
         * @param {ResendServiceHookLogRequest} [resendServiceHookLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendServiceHookLog(resendServiceHookLogRequest?: ResendServiceHookLogRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResendServiceHookLog200Response> {
            return localVarFp.resendServiceHookLog(resendServiceHookLogRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceHookApi - object-oriented interface
 * @export
 * @class ServiceHookApi
 * @extends {BaseAPI}
 */
export class ServiceHookApi extends BaseAPI {
    /**
     * ✨ Service Hook 创建
     * @summary Service Hook 创建
     * @param {CreateServiceHookRequest} [createServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public createServiceHook(createServiceHookRequest?: CreateServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).createServiceHook(createServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 删除
     * @summary Service Hook 删除
     * @param {DeleteServiceHookRequest} [deleteServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public deleteServiceHook(deleteServiceHookRequest?: DeleteServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).deleteServiceHook(deleteServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 查询 Service Hook 事件列表，返回事件英文标识、事件中文名、事件分组英文标识、事件分组中文名
     * @summary Service Hook 事件列表查询
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public describeEvents(body?: object, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).describeEvents(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 查询
     * @summary Service Hook 查询单条
     * @param {DescribeServiceHookRequest} [describeServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public describeServiceHook(describeServiceHookRequest?: DescribeServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).describeServiceHook(describeServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 发送记录分页查询
     * @summary Service Hook 发送记录分页查询
     * @param {DescribeServiceHookLogsRequest} [describeServiceHookLogsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public describeServiceHookLogs(describeServiceHookLogsRequest?: DescribeServiceHookLogsRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).describeServiceHookLogs(describeServiceHookLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 列表分页查询
     * @summary Service Hook 列表分页查询
     * @param {DescribeServiceHooksRequest} [describeServiceHooksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public describeServiceHooks(describeServiceHooksRequest?: DescribeServiceHooksRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).describeServiceHooks(describeServiceHooksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 事件开关
     * @summary Service Hook 事件开关
     * @param {EnabledServiceHookRequest} [enabledServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public enabledServiceHook(enabledServiceHookRequest?: EnabledServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).enabledServiceHook(enabledServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 修改
     * @summary Service Hook 修改
     * @param {ModifyServiceHookRequest} [modifyServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public modifyServiceHook(modifyServiceHookRequest?: ModifyServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).modifyServiceHook(modifyServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 测试
     * @summary Service Hook 测试
     * @param {PingServiceHookRequest} [pingServiceHookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public pingServiceHook(pingServiceHookRequest?: PingServiceHookRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).pingServiceHook(pingServiceHookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Service Hook 重发
     * @summary Service Hook 重发
     * @param {ResendServiceHookLogRequest} [resendServiceHookLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceHookApi
     */
    public resendServiceHookLog(resendServiceHookLogRequest?: ResendServiceHookLogRequest, options?: RawAxiosRequestConfig) {
        return ServiceHookApiFp(this.configuration).resendServiceHookLog(resendServiceHookLogRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WikiApi - axios parameter creator
 * @export
 */
export const WikiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ✨ 获取上传文件的Token，成功后使用uploadLink 上传文件(ex:https://coding-net-test-self-1257242599.cos.ap-shanghai.myqcloud.com/b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png)
         * @summary 上传文件的Token获取
         * @param {CreateUploadTokenRequest} [createUploadTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUploadToken: async (createUploadTokenRequest?: CreateUploadTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateUploadToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUploadTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Wiki创建
         * @summary Wiki创建
         * @param {CreateWikiRequest} [createWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWiki: async (createWikiRequest?: CreateWikiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateWiki`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWikiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过zip包上传wiki
         * @summary Wiki 通过zip包上传
         * @param {CreateWikiByZipRequest} [createWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWikiByZip: async (createWikiByZipRequest?: CreateWikiByZipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=CreateWikiByZip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWikiByZipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 删除Wiki至回收站
         * @summary Wiki 移至回收站
         * @param {DeleteWikiRequest} [deleteWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWiki: async (deleteWikiRequest?: DeleteWikiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DeleteWiki`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteWikiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过zip包创建wiki任务状态查询
         * @summary zip包创建wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeImportJobStatus: async (describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeImportJobStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeImportJobStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过zip包更新wiki任务状态查询
         * @summary zip包更新wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUpdateJobStatus: async (describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeUpdateJobStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeImportJobStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取Wiki详情
         * @summary Wiki 详情获取
         * @param {DescribeWikiRequest} [describeWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWiki: async (describeWikiRequest?: DescribeWikiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeWiki`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWikiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 获取Wiki列表详情
         * @summary Wiki 列表详情获取
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWikiList: async (describeWikiListRequest?: DescribeWikiListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=DescribeWikiList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(describeWikiListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 更新Wiki
         * @summary Wiki 更新
         * @param {ModifyWikiRequest} [modifyWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWiki: async (modifyWikiRequest?: ModifyWikiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyWiki`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWikiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 通过zip包更新wiki
         * @summary 通过zip包更新wiki
         * @param {ModifyWikiByZipRequest} [modifyWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiByZip: async (modifyWikiByZipRequest?: ModifyWikiByZipRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyWikiByZip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWikiByZipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ 修改wiki父级
         * @summary Wiki 父级修改
         * @param {ModifyWikiOrderRequest} [modifyWikiOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiOrder: async (modifyWikiOrderRequest?: ModifyWikiOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyWikiOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWikiOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ✨ Wiki 标题更新
         * @summary Wiki 标题更新
         * @param {ModifyWikiTitleRequest} [modifyWikiTitleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiTitle: async (modifyWikiTitleRequest?: ModifyWikiTitleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/?action=ModifyWikiTitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWikiTitleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WikiApi - functional programming interface
 * @export
 */
export const WikiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WikiApiAxiosParamCreator(configuration)
    return {
        /**
         * ✨ 获取上传文件的Token，成功后使用uploadLink 上传文件(ex:https://coding-net-test-self-1257242599.cos.ap-shanghai.myqcloud.com/b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png)
         * @summary 上传文件的Token获取
         * @param {CreateUploadTokenRequest} [createUploadTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUploadToken(createUploadTokenRequest?: CreateUploadTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUploadToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUploadToken(createUploadTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.createUploadToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Wiki创建
         * @summary Wiki创建
         * @param {CreateWikiRequest} [createWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWiki(createWikiRequest?: CreateWikiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWiki200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWiki(createWikiRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.createWiki']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过zip包上传wiki
         * @summary Wiki 通过zip包上传
         * @param {CreateWikiByZipRequest} [createWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWikiByZip(createWikiByZipRequest?: CreateWikiByZipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWikiByZip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWikiByZip(createWikiByZipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.createWikiByZip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 删除Wiki至回收站
         * @summary Wiki 移至回收站
         * @param {DeleteWikiRequest} [deleteWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWiki(deleteWikiRequest?: DeleteWikiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWiki(deleteWikiRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.deleteWiki']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过zip包创建wiki任务状态查询
         * @summary zip包创建wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeImportJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeImportJobStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeImportJobStatus(describeImportJobStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.describeImportJobStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过zip包更新wiki任务状态查询
         * @summary zip包更新wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeUpdateJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeImportJobStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeUpdateJobStatus(describeImportJobStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.describeUpdateJobStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取Wiki详情
         * @summary Wiki 详情获取
         * @param {DescribeWikiRequest} [describeWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeWiki(describeWikiRequest?: DescribeWikiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyWiki200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeWiki(describeWikiRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.describeWiki']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 获取Wiki列表详情
         * @summary Wiki 列表详情获取
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeWikiList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescribeWikiList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeWikiList(describeWikiListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.describeWikiList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 更新Wiki
         * @summary Wiki 更新
         * @param {ModifyWikiRequest} [modifyWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWiki(modifyWikiRequest?: ModifyWikiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyWiki200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWiki(modifyWikiRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.modifyWiki']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 通过zip包更新wiki
         * @summary 通过zip包更新wiki
         * @param {ModifyWikiByZipRequest} [modifyWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWikiByZip(modifyWikiByZipRequest?: ModifyWikiByZipRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWikiByZip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWikiByZip(modifyWikiByZipRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.modifyWikiByZip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ 修改wiki父级
         * @summary Wiki 父级修改
         * @param {ModifyWikiOrderRequest} [modifyWikiOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWikiOrder(modifyWikiOrderRequest?: ModifyWikiOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCdHostServerGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWikiOrder(modifyWikiOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.modifyWikiOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ✨ Wiki 标题更新
         * @summary Wiki 标题更新
         * @param {ModifyWikiTitleRequest} [modifyWikiTitleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWikiTitle(modifyWikiTitleRequest?: ModifyWikiTitleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyWikiTitle200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWikiTitle(modifyWikiTitleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WikiApi.modifyWikiTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WikiApi - factory interface
 * @export
 */
export const WikiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WikiApiFp(configuration)
    return {
        /**
         * ✨ 获取上传文件的Token，成功后使用uploadLink 上传文件(ex:https://coding-net-test-self-1257242599.cos.ap-shanghai.myqcloud.com/b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png)
         * @summary 上传文件的Token获取
         * @param {CreateUploadTokenRequest} [createUploadTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUploadToken(createUploadTokenRequest?: CreateUploadTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUploadToken200Response> {
            return localVarFp.createUploadToken(createUploadTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Wiki创建
         * @summary Wiki创建
         * @param {CreateWikiRequest} [createWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWiki(createWikiRequest?: CreateWikiRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWiki200Response> {
            return localVarFp.createWiki(createWikiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过zip包上传wiki
         * @summary Wiki 通过zip包上传
         * @param {CreateWikiByZipRequest} [createWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWikiByZip(createWikiByZipRequest?: CreateWikiByZipRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWikiByZip200Response> {
            return localVarFp.createWikiByZip(createWikiByZipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 删除Wiki至回收站
         * @summary Wiki 移至回收站
         * @param {DeleteWikiRequest} [deleteWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWiki(deleteWikiRequest?: DeleteWikiRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.deleteWiki(deleteWikiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过zip包创建wiki任务状态查询
         * @summary zip包创建wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeImportJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeImportJobStatus200Response> {
            return localVarFp.describeImportJobStatus(describeImportJobStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过zip包更新wiki任务状态查询
         * @summary zip包更新wiki的任务状态查询
         * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeUpdateJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeImportJobStatus200Response> {
            return localVarFp.describeUpdateJobStatus(describeImportJobStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取Wiki详情
         * @summary Wiki 详情获取
         * @param {DescribeWikiRequest} [describeWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWiki(describeWikiRequest?: DescribeWikiRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyWiki200Response> {
            return localVarFp.describeWiki(describeWikiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 获取Wiki列表详情
         * @summary Wiki 列表详情获取
         * @param {DescribeWikiListRequest} [describeWikiListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeWikiList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig): AxiosPromise<DescribeWikiList200Response> {
            return localVarFp.describeWikiList(describeWikiListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 更新Wiki
         * @summary Wiki 更新
         * @param {ModifyWikiRequest} [modifyWikiRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWiki(modifyWikiRequest?: ModifyWikiRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyWiki200Response> {
            return localVarFp.modifyWiki(modifyWikiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 通过zip包更新wiki
         * @summary 通过zip包更新wiki
         * @param {ModifyWikiByZipRequest} [modifyWikiByZipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiByZip(modifyWikiByZipRequest?: ModifyWikiByZipRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWikiByZip200Response> {
            return localVarFp.modifyWikiByZip(modifyWikiByZipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ 修改wiki父级
         * @summary Wiki 父级修改
         * @param {ModifyWikiOrderRequest} [modifyWikiOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiOrder(modifyWikiOrderRequest?: ModifyWikiOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteCdHostServerGroup200Response> {
            return localVarFp.modifyWikiOrder(modifyWikiOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ✨ Wiki 标题更新
         * @summary Wiki 标题更新
         * @param {ModifyWikiTitleRequest} [modifyWikiTitleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWikiTitle(modifyWikiTitleRequest?: ModifyWikiTitleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModifyWikiTitle200Response> {
            return localVarFp.modifyWikiTitle(modifyWikiTitleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WikiApi - object-oriented interface
 * @export
 * @class WikiApi
 * @extends {BaseAPI}
 */
export class WikiApi extends BaseAPI {
    /**
     * ✨ 获取上传文件的Token，成功后使用uploadLink 上传文件(ex:https://coding-net-test-self-1257242599.cos.ap-shanghai.myqcloud.com/b5d0d8e0-3aca-11eb-8673-a9b6d94ca755.png)
     * @summary 上传文件的Token获取
     * @param {CreateUploadTokenRequest} [createUploadTokenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public createUploadToken(createUploadTokenRequest?: CreateUploadTokenRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).createUploadToken(createUploadTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Wiki创建
     * @summary Wiki创建
     * @param {CreateWikiRequest} [createWikiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public createWiki(createWikiRequest?: CreateWikiRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).createWiki(createWikiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过zip包上传wiki
     * @summary Wiki 通过zip包上传
     * @param {CreateWikiByZipRequest} [createWikiByZipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public createWikiByZip(createWikiByZipRequest?: CreateWikiByZipRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).createWikiByZip(createWikiByZipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 删除Wiki至回收站
     * @summary Wiki 移至回收站
     * @param {DeleteWikiRequest} [deleteWikiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public deleteWiki(deleteWikiRequest?: DeleteWikiRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).deleteWiki(deleteWikiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过zip包创建wiki任务状态查询
     * @summary zip包创建wiki的任务状态查询
     * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public describeImportJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).describeImportJobStatus(describeImportJobStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过zip包更新wiki任务状态查询
     * @summary zip包更新wiki的任务状态查询
     * @param {DescribeImportJobStatusRequest} [describeImportJobStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public describeUpdateJobStatus(describeImportJobStatusRequest?: DescribeImportJobStatusRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).describeUpdateJobStatus(describeImportJobStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取Wiki详情
     * @summary Wiki 详情获取
     * @param {DescribeWikiRequest} [describeWikiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public describeWiki(describeWikiRequest?: DescribeWikiRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).describeWiki(describeWikiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 获取Wiki列表详情
     * @summary Wiki 列表详情获取
     * @param {DescribeWikiListRequest} [describeWikiListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public describeWikiList(describeWikiListRequest?: DescribeWikiListRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).describeWikiList(describeWikiListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 更新Wiki
     * @summary Wiki 更新
     * @param {ModifyWikiRequest} [modifyWikiRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public modifyWiki(modifyWikiRequest?: ModifyWikiRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).modifyWiki(modifyWikiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 通过zip包更新wiki
     * @summary 通过zip包更新wiki
     * @param {ModifyWikiByZipRequest} [modifyWikiByZipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public modifyWikiByZip(modifyWikiByZipRequest?: ModifyWikiByZipRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).modifyWikiByZip(modifyWikiByZipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ 修改wiki父级
     * @summary Wiki 父级修改
     * @param {ModifyWikiOrderRequest} [modifyWikiOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public modifyWikiOrder(modifyWikiOrderRequest?: ModifyWikiOrderRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).modifyWikiOrder(modifyWikiOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ✨ Wiki 标题更新
     * @summary Wiki 标题更新
     * @param {ModifyWikiTitleRequest} [modifyWikiTitleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WikiApi
     */
    public modifyWikiTitle(modifyWikiTitleRequest?: ModifyWikiTitleRequest, options?: RawAxiosRequestConfig) {
        return WikiApiFp(this.configuration).modifyWikiTitle(modifyWikiTitleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



